// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`E2E: Local OpenAPI Tests should generate Django Allauth API files correctly: local-openapi-generated-files 1`] = `
Object {
  "config.ts": "/**
 * You can modify this file
 *
 * @version 6
 */
import Axios, {
  AxiosRequestConfig,
  AxiosError,
  AxiosResponse,
  AxiosInstance,
} from \\"axios\\";
//@ts-ignore
import qs from \\"qs\\";

const baseConfig: AxiosRequestConfig = {
  baseURL: \\"\\", // <--- Add your base url
  headers: {
    \\"Content-Encoding\\": \\"UTF-8\\",
    Accept: \\"application/json\\",
    \\"Content-Type\\": \\"application/json-patch+json\\",
  },
  paramsSerializer: (param) => qs.stringify(param, { indices: false }),
};

let axiosInstance: AxiosInstance;

function getAxiosInstance(security: Security): AxiosInstance {
  if (!axiosInstance) {
    axiosInstance = Axios.create(baseConfig);

    // Response interceptor
    axiosInstance.interceptors.response.use(
      (async (response: AxiosResponse): Promise<SwaggerResponse<any>> => {
        // Any status code that lie within the range of 2xx cause this function to trigger
        // Do something with response data
        /**
         * Example on response manipulation
         *
         * @example
         *   const swaggerResponse: SwaggerResponse = {
         *     ...response,
         *   };
         *   return swaggerResponse;
         */
        return response.data;
      }) as any,
      (error: AxiosError) => {
        // Any status codes that falls outside the range of 2xx cause this function to trigger
        // Do something with response error

        if (error.response) {
          return Promise.reject(
            new RequestError(
              error.response.data,
              error.response.status,
              error.response,
            ),
          );
        }

        if (error.isAxiosError) {
          return Promise.reject(new RequestError(\\"noInternetConnection\\"));
        }
        return Promise.reject(error);
      },
    );
  }

  // ًًRequest interceptor
  axiosInstance.interceptors.request.use(
    async (requestConfig) => {
      // Do something before request is sent
      /** Example on how to add authorization based on security */
      if (security?.[0]) {
        // requestConfig.headers.authorization = \\"\\";
      }

      return requestConfig;
    },
    (error) => {
      // Do something with request error
      return Promise.reject(error);
    },
  );

  return axiosInstance;
}

class RequestError extends Error {
  constructor(
    public message: string,
    public status?: number,
    public response?: AxiosResponse,
  ) {
    super(message);
  }

  isApiException = true;

  static isRequestError(error: any): error is RequestError {
    return error.isApiException;
  }
}

export type Security = any[] | undefined;

// export interface SwaggerResponse<R> extends AxiosResponse<R> {}
export type SwaggerResponse<R> = R;

export { getAxiosInstance, RequestError };
",
  "hooks.ts": "//@ts-nocheck
/**
 * AUTO_GENERATED Do not change this file directly, use config.ts file instead
 *
 * @version 6
 */

import { useMemo } from \\"react\\";
import { AxiosRequestConfig } from \\"axios\\";
import {
  UseQueryOptions,
  useQuery,
  useMutation,
  UseMutationOptions,
  useInfiniteQuery,
  UseInfiniteQueryOptions,
  QueryClient,
  QueryKey,
} from \\"@tanstack/react-query\\";
import { RequestError, SwaggerResponse } from \\"./config\\";
import { paginationFlattenData, getPageSize, getTotal } from \\"./hooksConfig\\";
import type {
  Account,
  AccountRequest,
  AccountType,
  AccountingType,
  AccountingTypeRequest,
  Activity,
  ActivityRequest,
  ActivityType,
  ActivityTypeRequest,
  Answer,
  AnswerRequest,
  ApproveSerializerForContractRequest,
  ApproveSerializerForDeductionReturnRequest,
  ApproveSerializerForIncomeInvoiceRequest,
  ApproveSerializerForInvoiceRequest,
  ApproveSerializerForOrderRequest,
  ApproveSerializerForProgressRequest,
  ApproveSerializerForRequestRequest,
  ApproveSerializerForSpecialInvoiceRequest,
  ApprovedOrderItem,
  ApprovedRequestItem,
  Attachment,
  Avatar,
  AvatarRequest,
  BankAccount,
  BankAccountRequest,
  BankName,
  BankNameRequest,
  Branch,
  BranchRequest,
  CancellableRequest,
  CashAccount,
  CashAccountRequest,
  City,
  Company,
  CompanyAvailable,
  CompanyRequest,
  ConsolidatedPermissions,
  Contact,
  ContactRequest,
  Contract,
  ContractCategory,
  ContractCollateralReason,
  ContractCollateralStatus,
  ContractCollateralType,
  ContractCreateRequest,
  ContractRequest,
  Country,
  CreateRevisionRequest,
  Crew,
  CrewRequest,
  Currency,
  CurrencyRequest,
  CustomUserDetails,
  CustomUserDetailsRequest,
  DeductionReturn,
  DeductionReturnRequest,
  DeleteCodesActivitiesIdQueryParams,
  DeleteCodesResourcesIdQueryParams,
  DeleteCodesWbsIdQueryParams,
  DeleteProjectsProjectsSlugQueryParams,
  DeleteWarehouseProductsIdQueryParams,
  District,
  Expense,
  ExpenseRequest,
  FeatureFlags,
  GetApiSchemaQueryParams,
  GetCodesActivitiesIdQueryParams,
  GetCodesActivitiesPermissionsQueryParams,
  GetCodesActivitiesQueryParams,
  GetCodesResourcesIdQueryParams,
  GetCodesResourcesPermissionsQueryParams,
  GetCodesResourcesQueryParams,
  GetCodesWbsIdQueryParams,
  GetCodesWbsPermissionsQueryParams,
  GetCodesWbsProjectsQueryParams,
  GetCodesWbsQueryParams,
  GetFinanceAccountsQueryParams,
  GetFinanceBankAccountsQueryParams,
  GetFinanceCashAccountsQueryParams,
  GetFinanceExpensesQueryParams,
  GetFinanceIncomeInvoiceCategoriesQueryParams,
  GetFinanceIncomeInvoicesCounter__slugApprovalHistoryQueryParams,
  GetFinanceIncomeInvoicesQueryParams,
  GetFinanceIncomeInvoicesStatesQueryParams,
  GetFinanceInstrumentsQueryParams,
  GetFinancePaymentBondsQueryParams,
  GetFinancePaymentChequesQueryParams,
  GetFinancePaymentDetailsQueryParams,
  GetFinancePlannedPaymentsQueryParams,
  GetFinancePlannedRevenueQueryParams,
  GetFinanceRevenueBondsQueryParams,
  GetFinanceRevenueChequesQueryParams,
  GetFinanceRevenueDetailsQueryParams,
  GetFinanceSlipsQueryParams,
  GetFinanceSupplierAccountsQueryParams,
  GetFinanceTxnsExportQueryParams,
  GetFinanceTxnsQueryParams,
  GetHrCrewsQueryParams,
  GetHrDepartmentsQueryParams,
  GetHrPersonnelQueryParams,
  GetHrPositionsQueryParams,
  GetHrSalariesQueryParams,
  GetHrSalaryPermissionsQueryParams,
  GetProcurementApprovedOrderItemsQueryParams,
  GetProcurementApprovedRequestItemsQueryParams,
  GetProcurementInvoiceAdvanceBalanceCounter__slugQueryParams,
  GetProcurementInvoiceItemsQueryParams,
  GetProcurementInvoicesCounter__slugApprovalHistoryQueryParams,
  GetProcurementInvoicesQueryParams,
  GetProcurementInvoicesStatesQueryParams,
  GetProcurementOrdersCounter__slugApprovalHistoryQueryParams,
  GetProcurementOrdersQueryParams,
  GetProcurementOrdersStatesQueryParams,
  GetProcurementRequestTypesQueryParams,
  GetProcurementRequestsCounter__slugApprovalHistoryQueryParams,
  GetProcurementRequestsQueryParams,
  GetProcurementRequestsStatesQueryParams,
  GetProcurementSpecialInvoiceItemsQueryParams,
  GetProcurementSpecialInvoiceTypesQueryParams,
  GetProcurementSpecialInvoicesCounter__slugApprovalHistoryQueryParams,
  GetProcurementSpecialInvoicesQueryParams,
  GetProcurementSpecialInvoicesStatesQueryParams,
  GetProjectsCitiesQueryParams,
  GetProjectsCompaniesAvailableQueryParams,
  GetProjectsCompaniesQueryParams,
  GetProjectsCountriesQueryParams,
  GetProjectsDistrictsQueryParams,
  GetProjectsProjectsAvailableQueryParams,
  GetProjectsProjectsPermissionsQueryParams,
  GetProjectsProjectsQueryParams,
  GetProjectsProjectsSlugHistoryQueryParams,
  GetProjectsProjectsSlugQueryParams,
  GetProjectsProjectsSlugResponsibilitiesQueryParams,
  GetRatesRatesQueryParams,
  GetSubcontractsContractCategoriesQueryParams,
  GetSubcontractsContractCollateralReasonQueryParams,
  GetSubcontractsContractCollateralStatusQueryParams,
  GetSubcontractsContractCollateralTypesQueryParams,
  GetSubcontractsContractCollateralsQueryParams,
  GetSubcontractsContractsCounter__slugApprovalHistoryQueryParams,
  GetSubcontractsContractsQueryParams,
  GetSubcontractsContractsStatesQueryParams,
  GetSubcontractsDeductionReturnsCounter__slugApprovalHistoryQueryParams,
  GetSubcontractsDeductionReturnsQueryParams,
  GetSubcontractsDeductionReturnsStatesQueryParams,
  GetSubcontractsProgressAdditionTypesQueryParams,
  GetSubcontractsProgressDeductionTypesQueryParams,
  GetSubcontractsProgressItemsQueryParams,
  GetSubcontractsProgressesCounter__slugApprovalHistoryQueryParams,
  GetSubcontractsProgressesQueryParams,
  GetSubcontractsProgressesStatesQueryParams,
  GetSubcontractsRevisionsQueryParams,
  GetSuppliersAccountingCodesQueryParams,
  GetSuppliersAdvanceBalancesSlugQueryParams,
  GetSuppliersBankAccountsQueryParams,
  GetSuppliersContactsQueryParams,
  GetSuppliersReviewAnswersQueryParams,
  GetSuppliersReviewFormsQueryParams,
  GetSuppliersReviewQuestionsQueryParams,
  GetSuppliersReviewTemplatesQueryParams,
  GetSuppliersSupplierActivityTypesQueryParams,
  GetSuppliersSupplierBranchesQueryParams,
  GetSuppliersSupplierTypesQueryParams,
  GetSuppliersSuppliersAutocompleteQueryParams,
  GetSuppliersSuppliersQueryParams,
  GetWarehouseProductsIdAttachmentsQueryParams,
  GetWarehouseProductsIdHistoryQueryParams,
  GetWarehouseProductsIdQueryParams,
  GetWarehouseProductsIdTransactionsQueryParams,
  GetWarehouseProductsPermissionsQueryParams,
  GetWarehouseProductsQueryParams,
  GetWarehouseWarehousesAvailableQueryParams,
  GetWarehouseWarehousesQueryParams,
  GroupMember,
  GroupMemberRequest,
  IncomeInvoice,
  IncomeInvoiceCategory,
  IncomeInvoiceCategoryRequest,
  IncomeInvoiceRequest,
  InlineUserRequest,
  Invoice,
  InvoiceAdvanceBalance,
  InvoiceItemList,
  InvoicePrepareRequest,
  InvoiceRequest,
  LocationParameter,
  LocationParameterRequest,
  MainDepartment,
  MainDepartmentRequest,
  MainPosition,
  MainPositionRequest,
  NotificationRequest,
  OfferComparisonRequestRequest,
  OfferComparisonResponse,
  Order,
  OrderAdvancePayment,
  OrderAdvancePaymentRequest,
  OrderPrepareRequest,
  OrderRequest,
  PackagingMethod,
  PackagingMethodRequest,
  PaginatedAccountList,
  PaginatedActivityListList,
  PaginatedApprovalHistoryList,
  PaginatedApprovedOrderItemList,
  PaginatedApprovedRequestItemList,
  PaginatedBankAccountListList,
  PaginatedCashAccountListList,
  PaginatedCompanyList,
  PaginatedContractCollateralListList,
  PaginatedContractListList,
  PaginatedCrewListList,
  PaginatedDeductionReturnListList,
  PaginatedExpenseListList,
  PaginatedIncomeInvoiceListList,
  PaginatedInstrumentListDiscoveryList,
  PaginatedInvoiceListList,
  PaginatedOrderListList,
  PaginatedPaymentBondListList,
  PaginatedPaymentChequeListList,
  PaginatedPaymentDetailList,
  PaginatedPaymentPlan2TypeDiscoveryList,
  PaginatedPersonListList,
  PaginatedProductListList,
  PaginatedProgressListList,
  PaginatedProjectListList,
  PaginatedRequestListList,
  PaginatedResourceListList,
  PaginatedRevenueBondListList,
  PaginatedRevenueChequeListList,
  PaginatedRevenueDetailList,
  PaginatedReviewsListList,
  PaginatedRevisionList,
  PaginatedSalaryList,
  PaginatedSlipList,
  PaginatedSpecialInvoiceListList,
  PaginatedSupplierAccountListList,
  PaginatedSupplierList,
  PaginatedTransactionList,
  PaginatedTransactionListList,
  PaginatedTransitionList,
  PaginatedWBSListList,
  PaginatedWarehouseList,
  PatchCodesActivitiesIdQueryParams,
  PatchCodesResourcesIdQueryParams,
  PatchCodesWbsIdQueryParams,
  PatchProjectsProjectsSlugQueryParams,
  PatchWarehouseProductsIdQueryParams,
  PatchedAccountRequest,
  PatchedAccountingTypeRequest,
  PatchedActivityRequest,
  PatchedActivityTypeRequest,
  PatchedAnswerRequest,
  PatchedBankAccountRequest,
  PatchedBankNameRequest,
  PatchedBranchRequest,
  PatchedCashAccountRequest,
  PatchedCompanyRequest,
  PatchedContactRequest,
  PatchedContractRequest,
  PatchedCrewRequest,
  PatchedCurrencyRequest,
  PatchedCustomUserDetailsRequest,
  PatchedDeductionReturnRequest,
  PatchedExpenseRequest,
  PatchedGroupMemberRequest,
  PatchedIncomeInvoiceCategoryRequest,
  PatchedIncomeInvoiceRequest,
  PatchedInvoiceRequest,
  PatchedLocationParameterRequest,
  PatchedMainDepartmentRequest,
  PatchedMainPositionRequest,
  PatchedOrderAdvancePaymentRequest,
  PatchedOrderRequest,
  PatchedPackagingMethodRequest,
  PatchedPaymentBondRequest,
  PatchedPaymentChequeRequest,
  PatchedPaymentDetailRequest,
  PatchedPaymentMethodRequest,
  PatchedPersonRequest,
  PatchedProductCreateRequest,
  PatchedProfessionRequest,
  PatchedProgressRequest,
  PatchedProjectRequest,
  PatchedProjectSalaryPermissionRequest,
  PatchedProjectTypeParamRequest,
  PatchedQuitReasonRequest,
  PatchedQuitRecordRequest,
  PatchedRateRequest,
  PatchedRequestRequest,
  PatchedResourceRequest,
  PatchedResponsibleRequest,
  PatchedResponsibleTypeParamRequest,
  PatchedRevenueBondRequest,
  PatchedRevenueChequeRequest,
  PatchedRevenueDetailRequest,
  PatchedReviewQuestionRequest,
  PatchedReviewRequest,
  PatchedReviewTemplateRequest,
  PatchedRevisionRequest,
  PatchedSalaryRequest,
  PatchedSlipRequest,
  PatchedSpecialInvoiceRequest,
  PatchedSupplierAccountRequest,
  PatchedSupplierAccountingCodeRequest,
  PatchedSupplierBankAccountRequest,
  PatchedSupplierRequest,
  PatchedSupplierTypeRequest,
  PatchedTaxParameterRequest,
  PatchedTransactionListCreateRequest,
  PatchedTransactionRequest,
  PatchedVatwitholdingRequest,
  PatchedWBSRequest,
  PatchedWarehouseRequest,
  PayByBond,
  PayByBondRequest,
  PayByCheque,
  PayByChequeRequest,
  PayByFilter,
  PayByFilterRequest,
  PaySelected,
  PaySelectedRequest,
  PaymentBond,
  PaymentBondRequest,
  PaymentCheque,
  PaymentChequeRequest,
  PaymentDetail,
  PaymentDetailDelete,
  PaymentDetailDeleteRequest,
  PaymentDetailRealize,
  PaymentDetailRealizeRequest,
  PaymentDetailRequest,
  PaymentMethod,
  PaymentMethodRequest,
  Permissions,
  Person,
  PersonRequest,
  PostCodesActivitiesAdd_rootQueryParams,
  PostCodesActivitiesIdAdd_childQueryParams,
  PostCodesActivitiesIdAdd_siblingQueryParams,
  PostCodesActivitiesIdMove_underQueryParams,
  PostCodesResourcesAdd_rootQueryParams,
  PostCodesResourcesIdAdd_childQueryParams,
  PostCodesResourcesIdAdd_siblingQueryParams,
  PostCodesResourcesIdMove_underQueryParams,
  PostCodesWbsAdd_rootQueryParams,
  PostCodesWbsIdAdd_childQueryParams,
  PostCodesWbsIdAdd_siblingQueryParams,
  PostCodesWbsIdMove_underQueryParams,
  PostFinanceIncomeInvoicesApprovalsQueryParams,
  PostFinancePlannedPaymentsPay_by_bondQueryParams,
  PostFinancePlannedPaymentsPay_by_chequeQueryParams,
  PostFinancePlannedPaymentsPay_by_filterQueryParams,
  PostFinancePlannedRevenuePay_by_bondQueryParams,
  PostFinancePlannedRevenuePay_by_chequeQueryParams,
  PostFinancePlannedRevenuePay_by_filterQueryParams,
  PostProcurementInvoicesApprovalsQueryParams,
  PostProcurementOrdersApprovalsQueryParams,
  PostProcurementRequestsApprovalsQueryParams,
  PostProcurementSpecialInvoicesApprovalsQueryParams,
  PostProjectsProjectsQueryParams,
  PostSubcontractsContractsApprovalsQueryParams,
  PostSubcontractsDeductionReturnsApprovalsQueryParams,
  PostSubcontractsProgressesApprovalsQueryParams,
  PostWarehouseProductsAdd_attachmentQueryParams,
  PostWarehouseProductsDeliver_productsQueryParams,
  PostWarehouseProductsQueryParams,
  Product,
  ProductCreateRequest,
  ProductDeliveryListCreateRequest,
  Profession,
  ProfessionRequest,
  Progress,
  ProgressAdditionType,
  ProgressDeductionType,
  ProgressItemList,
  ProgressRequest,
  Project,
  ProjectAvailable,
  ProjectRequest,
  ProjectSalaryPermission,
  ProjectSalaryPermissionRequest,
  ProjectTypeParam,
  ProjectTypeParamRequest,
  PutCodesActivitiesIdQueryParams,
  PutCodesResourcesIdQueryParams,
  PutCodesWbsIdQueryParams,
  PutProjectsProjectsSlugQueryParams,
  PutWarehouseProductsIdQueryParams,
  QuitReason,
  QuitReasonRequest,
  QuitRecord,
  QuitRecordRequest,
  Rate,
  RateRequest,
  Request,
  RequestRequest,
  RequestType,
  Resource,
  ResourceRequest,
  ResourceUnit,
  Responsible,
  ResponsibleRequest,
  ResponsibleTypeParam,
  ResponsibleTypeParamRequest,
  RevenueBond,
  RevenueBondRequest,
  RevenueCheque,
  RevenueChequeRequest,
  RevenueDetail,
  RevenueDetailDelete,
  RevenueDetailDeleteRequest,
  RevenueDetailRealize,
  RevenueDetailRealizeRequest,
  RevenueDetailRequest,
  Review,
  ReviewQuestion,
  ReviewQuestionRequest,
  ReviewRequest,
  ReviewTemplate,
  ReviewTemplateList,
  ReviewTemplateRequest,
  Revision,
  RevisionRequest,
  Salary,
  SalaryRequest,
  Slip,
  SlipRequest,
  SpecialInvoice,
  SpecialInvoiceItemList,
  SpecialInvoiceRequest,
  SpecialInvoiceType,
  State,
  Supplier,
  SupplierAccount,
  SupplierAccountRequest,
  SupplierAccountingCode,
  SupplierAccountingCodeRequest,
  SupplierAutocomplete,
  SupplierBankAccount,
  SupplierBankAccountRequest,
  SupplierRequest,
  SupplierType,
  SupplierTypeRequest,
  Tax,
  TaxParameter,
  TaxParameterRequest,
  Transaction,
  TransactionList,
  TransactionListCreateRequest,
  TransactionRequest,
  TransactionType,
  UnCancellableRequest,
  UserGroup,
  UserProfile,
  ValidateOfferComparisonApiKeyRequestRequest,
  ValidateOfferComparisonApiKeyResponse,
  Vatwitholding,
  VatwitholdingRequest,
  WBS,
  WBSRequest,
  Warehouse,
  WarehouseRequest,
} from \\"./types\\";
import {
  deleteAuthGroupsId,
  deleteAuthGroupsIdMembersUser_id,
  deleteAuthUserGroupsId,
  deleteCodesActivitiesId,
  deleteCodesActivityAccountCodesId,
  deleteCodesResourcesId,
  deleteCodesWbsId,
  deleteCommonAttachmentsId,
  deleteCommonBankNamesId,
  deleteCommonCurrenciesId,
  deleteCommonPackagingMethodsId,
  deleteCommonPaymentMethodsId,
  deleteCommonResourceUnitsId,
  deleteCommonTaxParametersId,
  deleteCommonVatWitholdingsId,
  deleteFinanceAccountsId,
  deleteFinanceBankAccountsId,
  deleteFinanceCashAccountsId,
  deleteFinanceExpensesCounter__slug,
  deleteFinanceIncomeInvoiceCategoriesId,
  deleteFinanceIncomeInvoicesCounter__slug,
  deleteFinancePaymentBondsCounter__slug,
  deleteFinancePaymentChequesCounter__slug,
  deleteFinancePaymentDetailsId,
  deleteFinanceRevenueBondsCounter__slug,
  deleteFinanceRevenueChequesCounter__slug,
  deleteFinanceRevenueDetailsId,
  deleteFinanceSlipsId,
  deleteFinanceSupplierAccountsId,
  deleteFinanceTxnsId,
  deleteHrCrewsId,
  deleteHrDepartmentsId,
  deleteHrLocationsId,
  deleteHrPersonnelId,
  deleteHrPositionsId,
  deleteHrProfessionsId,
  deleteHrQuitReasonsId,
  deleteHrQuitRecordsId,
  deleteHrSalariesId,
  deleteHrSalaryPermissionsId,
  deleteProcurementAdvancePaymentsId,
  deleteProcurementInvoicesCounter__slug,
  deleteProcurementOrdersCounter__slug,
  deleteProcurementRequestTypesId,
  deleteProcurementRequestsCounter__slug,
  deleteProcurementSpecialInvoiceTypesId,
  deleteProcurementSpecialInvoicesCounter__slug,
  deleteProjectsAccountingtypesId,
  deleteProjectsCitiesId,
  deleteProjectsCompaniesSlug,
  deleteProjectsCountriesId,
  deleteProjectsDistrictsId,
  deleteProjectsProjectsSlug,
  deleteProjectsProjecttypesId,
  deleteProjectsResponsiblesId,
  deleteProjectsResponsibletypesId,
  deleteRatesRatesId,
  deleteSubcontractsContractCategoriesId,
  deleteSubcontractsContractCollateralReasonId,
  deleteSubcontractsContractCollateralStatusId,
  deleteSubcontractsContractCollateralTypesId,
  deleteSubcontractsContractsCounter__slug,
  deleteSubcontractsDeductionReturnsCounter__slug,
  deleteSubcontractsProgressesCounter__slug,
  deleteSubcontractsRevisionsId,
  deleteSuppliersAccountingCodesId,
  deleteSuppliersBankAccountsId,
  deleteSuppliersContactsId,
  deleteSuppliersReviewAnswersId,
  deleteSuppliersReviewFormsSlug,
  deleteSuppliersReviewQuestionsId,
  deleteSuppliersReviewTemplatesSlug,
  deleteSuppliersSupplierActivityTypesId,
  deleteSuppliersSupplierBranchesId,
  deleteSuppliersSupplierTypesId,
  deleteSuppliersSuppliersSlug,
  deleteWarehouseProductsId,
  deleteWarehouseTransactionsId,
  deleteWarehouseWarehousesId,
  getApiSchema,
  getAuthGroups,
  getAuthGroupsId,
  getAuthGroupsPermissions,
  getAuthPermissions,
  getAuthUser,
  getAuthUserGroups,
  getAuthUserGroupsId,
  getCodesActivities,
  getCodesActivitiesId,
  getCodesActivitiesPermissions,
  getCodesActivityAccountCodes,
  getCodesActivityAccountCodesId,
  getCodesResources,
  getCodesResourcesId,
  getCodesResourcesPermissions,
  getCodesWbs,
  getCodesWbsId,
  getCodesWbsPermissions,
  getCodesWbsProjects,
  getCommonAttachmentsId,
  getCommonBankNames,
  getCommonBankNamesId,
  getCommonCurrencies,
  getCommonCurrenciesId,
  getCommonFeatureFlags,
  getCommonPackagingMethods,
  getCommonPackagingMethodsId,
  getCommonPaymentMethods,
  getCommonPaymentMethodsId,
  getCommonResourceUnits,
  getCommonResourceUnitsId,
  getCommonTaxParameters,
  getCommonTaxParametersId,
  getCommonVatWitholdings,
  getCommonVatWitholdingsId,
  getFinanceAccountTypes,
  getFinanceAccounts,
  getFinanceAccountsId,
  getFinanceBankAccountTypes,
  getFinanceBankAccounts,
  getFinanceBankAccountsId,
  getFinanceCashAccountTypes,
  getFinanceCashAccounts,
  getFinanceCashAccountsId,
  getFinanceDefaultCurrency,
  getFinanceDefaultCurrencyId,
  getFinanceExpenseTransactionTypes,
  getFinanceExpenses,
  getFinanceExpensesCounter__slug,
  getFinanceExpensesCounter__slugHistory,
  getFinanceIncomeInvoiceCategories,
  getFinanceIncomeInvoiceCategoriesId,
  getFinanceIncomeInvoices,
  getFinanceIncomeInvoicesCounter__slug,
  getFinanceIncomeInvoicesCounter__slugApprovalHistory,
  getFinanceIncomeInvoicesCounter__slugAttachments,
  getFinanceIncomeInvoicesCounter__slugHistory,
  getFinanceIncomeInvoicesPermissions,
  getFinanceIncomeInvoicesStates,
  getFinanceInstruments,
  getFinanceInstrumentsPermissions,
  getFinancePaymentBonds,
  getFinancePaymentBondsCounter__slug,
  getFinancePaymentBondsCounter__slugHistory,
  getFinancePaymentBondsPermissions,
  getFinancePaymentCheques,
  getFinancePaymentChequesCounter__slug,
  getFinancePaymentChequesCounter__slugHistory,
  getFinancePaymentChequesPermissions,
  getFinancePaymentDetails,
  getFinancePaymentDetailsId,
  getFinancePaymentInstrumentStates,
  getFinancePlannedPayments,
  getFinancePlannedPaymentsPermissions,
  getFinancePlannedRevenue,
  getFinancePlannedRevenuePermissions,
  getFinanceRevenueBonds,
  getFinanceRevenueBondsCounter__slug,
  getFinanceRevenueBondsCounter__slugHistory,
  getFinanceRevenueBondsPermissions,
  getFinanceRevenueCheques,
  getFinanceRevenueChequesCounter__slug,
  getFinanceRevenueChequesCounter__slugHistory,
  getFinanceRevenueChequesPermissions,
  getFinanceRevenueDetails,
  getFinanceRevenueDetailsId,
  getFinanceSlips,
  getFinanceSlipsId,
  getFinanceSupplierAccountTypes,
  getFinanceSupplierAccounts,
  getFinanceSupplierAccountsId,
  getFinanceTxns,
  getFinanceTxnsExport,
  getFinanceTxnsId,
  getHrCrews,
  getHrCrewsId,
  getHrCrewsIdHistory,
  getHrCrewsPermissions,
  getHrDepartments,
  getHrDepartmentsId,
  getHrLocations,
  getHrLocationsId,
  getHrPersonnel,
  getHrPersonnelId,
  getHrPersonnelIdHistory,
  getHrPersonnelPermissions,
  getHrPositions,
  getHrPositionsId,
  getHrProfessions,
  getHrProfessionsId,
  getHrQuitReasons,
  getHrQuitReasonsId,
  getHrQuitRecords,
  getHrQuitRecordsId,
  getHrSalaries,
  getHrSalariesId,
  getHrSalariesIdHistory,
  getHrSalariesPermissions,
  getHrSalaryPermissions,
  getHrSalaryPermissionsId,
  getProcurementAdvancePayments,
  getProcurementAdvancePaymentsId,
  getProcurementAdvancePaymentsPermissions,
  getProcurementApprovedOrderItems,
  getProcurementApprovedOrderItemsPermissions,
  getProcurementApprovedRequestItems,
  getProcurementApprovedRequestItemsPermissions,
  getProcurementInvoiceAdvanceBalanceCounter__slug,
  getProcurementInvoiceItems,
  getProcurementInvoiceItemsPermissions,
  getProcurementInvoices,
  getProcurementInvoicesCounter__slug,
  getProcurementInvoicesCounter__slugApprovalHistory,
  getProcurementInvoicesCounter__slugAttachments,
  getProcurementInvoicesCounter__slugHistory,
  getProcurementInvoicesPermissions,
  getProcurementInvoicesStates,
  getProcurementOrders,
  getProcurementOrdersCounter__slug,
  getProcurementOrdersCounter__slugApprovalHistory,
  getProcurementOrdersCounter__slugAttachments,
  getProcurementOrdersCounter__slugHistory,
  getProcurementOrdersPermissions,
  getProcurementOrdersStates,
  getProcurementRequestTypes,
  getProcurementRequestTypesId,
  getProcurementRequests,
  getProcurementRequestsCounter__slug,
  getProcurementRequestsCounter__slugApprovalHistory,
  getProcurementRequestsCounter__slugAttachments,
  getProcurementRequestsCounter__slugHistory,
  getProcurementRequestsPermissions,
  getProcurementRequestsStates,
  getProcurementSpecialInvoiceItems,
  getProcurementSpecialInvoiceItemsPermissions,
  getProcurementSpecialInvoiceTypes,
  getProcurementSpecialInvoiceTypesId,
  getProcurementSpecialInvoices,
  getProcurementSpecialInvoicesCounter__slug,
  getProcurementSpecialInvoicesCounter__slugApprovalHistory,
  getProcurementSpecialInvoicesCounter__slugAttachments,
  getProcurementSpecialInvoicesCounter__slugHistory,
  getProcurementSpecialInvoicesPermissions,
  getProcurementSpecialInvoicesStates,
  getProfilesAvatar,
  getProfilesAvatarId,
  getProfilesUsers,
  getProjectsAccountingtypes,
  getProjectsAccountingtypesId,
  getProjectsCities,
  getProjectsCitiesId,
  getProjectsCompanies,
  getProjectsCompaniesAvailable,
  getProjectsCompaniesPermissions,
  getProjectsCompaniesSlug,
  getProjectsCompaniesSlugHistory,
  getProjectsCountries,
  getProjectsCountriesId,
  getProjectsDistricts,
  getProjectsDistrictsId,
  getProjectsProjects,
  getProjectsProjectsAvailable,
  getProjectsProjectsPermissions,
  getProjectsProjectsSlug,
  getProjectsProjectsSlugHistory,
  getProjectsProjectsSlugResponsibilities,
  getProjectsProjecttypes,
  getProjectsProjecttypesId,
  getProjectsResponsibles,
  getProjectsResponsiblesId,
  getProjectsResponsibletypes,
  getProjectsResponsibletypesId,
  getRatesRates,
  getRatesRatesId,
  getSubcontractsContractCategories,
  getSubcontractsContractCategoriesId,
  getSubcontractsContractCollateralReason,
  getSubcontractsContractCollateralReasonId,
  getSubcontractsContractCollateralStatus,
  getSubcontractsContractCollateralStatusId,
  getSubcontractsContractCollateralTypes,
  getSubcontractsContractCollateralTypesId,
  getSubcontractsContractCollaterals,
  getSubcontractsContractCollateralsPermissions,
  getSubcontractsContracts,
  getSubcontractsContractsCounter__slug,
  getSubcontractsContractsCounter__slugApprovalHistory,
  getSubcontractsContractsCounter__slugAttachments,
  getSubcontractsContractsCounter__slugCopy_contract,
  getSubcontractsContractsCounter__slugCreate_progress,
  getSubcontractsContractsCounter__slugDeductionReturnType,
  getSubcontractsContractsCounter__slugHistory,
  getSubcontractsContractsPermissions,
  getSubcontractsContractsStates,
  getSubcontractsDeductionReturns,
  getSubcontractsDeductionReturnsCounter__slug,
  getSubcontractsDeductionReturnsCounter__slugApprovalHistory,
  getSubcontractsDeductionReturnsCounter__slugAttachments,
  getSubcontractsDeductionReturnsCounter__slugHistory,
  getSubcontractsDeductionReturnsPermissions,
  getSubcontractsDeductionReturnsStates,
  getSubcontractsProgressAdditionTypes,
  getSubcontractsProgressAdditionTypesSlug,
  getSubcontractsProgressDeductionTypes,
  getSubcontractsProgressDeductionTypesSlug,
  getSubcontractsProgressItems,
  getSubcontractsProgressItemsPermissions,
  getSubcontractsProgresses,
  getSubcontractsProgressesCounter__slug,
  getSubcontractsProgressesCounter__slugApprovalHistory,
  getSubcontractsProgressesCounter__slugAttachments,
  getSubcontractsProgressesCounter__slugHistory,
  getSubcontractsProgressesPermissions,
  getSubcontractsProgressesStates,
  getSubcontractsRevisions,
  getSubcontractsRevisionsId,
  getSubcontractsRevisionsPermissions,
  getSuppliersAccountingCodes,
  getSuppliersAccountingCodesId,
  getSuppliersAdvanceBalancesSlug,
  getSuppliersBankAccounts,
  getSuppliersBankAccountsId,
  getSuppliersContacts,
  getSuppliersContactsId,
  getSuppliersContactsPermissions,
  getSuppliersReviewAnswers,
  getSuppliersReviewAnswersId,
  getSuppliersReviewForms,
  getSuppliersReviewFormsPermissions,
  getSuppliersReviewFormsSlug,
  getSuppliersReviewFormsSlugHistory,
  getSuppliersReviewQuestions,
  getSuppliersReviewQuestionsId,
  getSuppliersReviewTemplates,
  getSuppliersReviewTemplatesPermissions,
  getSuppliersReviewTemplatesSlug,
  getSuppliersReviewTemplatesSlugHistory,
  getSuppliersSupplierActivityTypes,
  getSuppliersSupplierActivityTypesId,
  getSuppliersSupplierBranches,
  getSuppliersSupplierBranchesId,
  getSuppliersSupplierTypes,
  getSuppliersSupplierTypesId,
  getSuppliersSuppliers,
  getSuppliersSuppliersAutocomplete,
  getSuppliersSuppliersPermissions,
  getSuppliersSuppliersSlug,
  getSuppliersSuppliersSlugHistory,
  getWarehouseProducts,
  getWarehouseProductsId,
  getWarehouseProductsIdAttachments,
  getWarehouseProductsIdHistory,
  getWarehouseProductsIdTransactions,
  getWarehouseProductsPermissions,
  getWarehouseTransactions,
  getWarehouseTransactionsId,
  getWarehouseTransactionsPermissions,
  getWarehouseWarehouses,
  getWarehouseWarehousesAvailable,
  getWarehouseWarehousesId,
  getWarehouseWarehousesIdHistory,
  getWarehouseWarehousesPermissions,
  patchAuthGroupsId,
  patchAuthUser,
  patchAuthUserGroupsId,
  patchCodesActivitiesId,
  patchCodesActivityAccountCodesId,
  patchCodesResourcesId,
  patchCodesWbsId,
  patchCommonBankNamesId,
  patchCommonCurrenciesId,
  patchCommonPackagingMethodsId,
  patchCommonPaymentMethodsId,
  patchCommonResourceUnitsId,
  patchCommonTaxParametersId,
  patchCommonVatWitholdingsId,
  patchFinanceAccountsId,
  patchFinanceBankAccountsId,
  patchFinanceCashAccountsId,
  patchFinanceExpensesCounter__slug,
  patchFinanceIncomeInvoiceCategoriesId,
  patchFinanceIncomeInvoicesCounter__slug,
  patchFinancePaymentBondsCounter__slug,
  patchFinancePaymentChequesCounter__slug,
  patchFinancePaymentDetailsId,
  patchFinanceRevenueBondsCounter__slug,
  patchFinanceRevenueChequesCounter__slug,
  patchFinanceRevenueDetailsId,
  patchFinanceSlipsId,
  patchFinanceSupplierAccountsId,
  patchFinanceTxnsId,
  patchHrCrewsId,
  patchHrDepartmentsId,
  patchHrLocationsId,
  patchHrPersonnelId,
  patchHrPositionsId,
  patchHrProfessionsId,
  patchHrQuitReasonsId,
  patchHrQuitRecordsId,
  patchHrSalariesId,
  patchHrSalaryPermissionsId,
  patchProcurementAdvancePaymentsId,
  patchProcurementInvoicesCounter__slug,
  patchProcurementOrdersCounter__slug,
  patchProcurementRequestTypesId,
  patchProcurementRequestsCounter__slug,
  patchProcurementSpecialInvoiceTypesId,
  patchProcurementSpecialInvoicesCounter__slug,
  patchProjectsAccountingtypesId,
  patchProjectsCitiesId,
  patchProjectsCompaniesSlug,
  patchProjectsCountriesId,
  patchProjectsDistrictsId,
  patchProjectsProjectsSlug,
  patchProjectsProjecttypesId,
  patchProjectsResponsiblesId,
  patchProjectsResponsibletypesId,
  patchRatesRatesId,
  patchSubcontractsContractCategoriesId,
  patchSubcontractsContractCollateralReasonId,
  patchSubcontractsContractCollateralStatusId,
  patchSubcontractsContractCollateralTypesId,
  patchSubcontractsContractsCounter__slug,
  patchSubcontractsDeductionReturnsCounter__slug,
  patchSubcontractsProgressesCounter__slug,
  patchSubcontractsRevisionsId,
  patchSuppliersAccountingCodesId,
  patchSuppliersBankAccountsId,
  patchSuppliersContactsId,
  patchSuppliersReviewAnswersId,
  patchSuppliersReviewFormsSlug,
  patchSuppliersReviewQuestionsId,
  patchSuppliersReviewTemplatesSlug,
  patchSuppliersSupplierActivityTypesId,
  patchSuppliersSupplierBranchesId,
  patchSuppliersSupplierTypesId,
  patchSuppliersSuppliersSlug,
  patchWarehouseProductsId,
  patchWarehouseTransactionsId,
  patchWarehouseWarehousesId,
  postAuthGroups,
  postAuthUserGroups,
  postCodesActivitiesAdd_root,
  postCodesActivitiesIdAdd_child,
  postCodesActivitiesIdAdd_sibling,
  postCodesActivitiesIdMove_under,
  postCodesActivityAccountCodes,
  postCodesResourcesAdd_root,
  postCodesResourcesIdAdd_child,
  postCodesResourcesIdAdd_sibling,
  postCodesResourcesIdMove_under,
  postCodesWbsAdd_root,
  postCodesWbsIdAdd_child,
  postCodesWbsIdAdd_sibling,
  postCodesWbsIdMove_under,
  postCommonBankNames,
  postCommonCurrencies,
  postCommonPackagingMethods,
  postCommonPaymentMethods,
  postCommonResourceUnits,
  postCommonTaxParameters,
  postCommonVatWitholdings,
  postFinanceAccounts,
  postFinanceBankAccounts,
  postFinanceCashAccounts,
  postFinanceExpenses,
  postFinanceIncomeInvoiceCategories,
  postFinanceIncomeInvoices,
  postFinanceIncomeInvoicesAdd_attachment,
  postFinanceIncomeInvoicesApprovals,
  postFinanceIncomeInvoicesApprove,
  postFinancePaymentBonds,
  postFinancePaymentCheques,
  postFinancePaymentDetailsIdDelete,
  postFinancePaymentDetailsRealize,
  postFinancePlannedPaymentsPay_by_bond,
  postFinancePlannedPaymentsPay_by_cheque,
  postFinancePlannedPaymentsPay_by_filter,
  postFinancePlannedPaymentsPay_selected,
  postFinancePlannedRevenuePay_by_bond,
  postFinancePlannedRevenuePay_by_cheque,
  postFinancePlannedRevenuePay_by_filter,
  postFinancePlannedRevenuePay_selected,
  postFinanceRevenueBonds,
  postFinanceRevenueCheques,
  postFinanceRevenueDetailsIdDelete,
  postFinanceRevenueDetailsRealize,
  postFinanceSlips,
  postFinanceSupplierAccounts,
  postFinanceTxns,
  postHrCrews,
  postHrDepartments,
  postHrLocations,
  postHrPersonnel,
  postHrPositions,
  postHrProfessions,
  postHrQuitReasons,
  postHrQuitRecords,
  postHrSalaries,
  postHrSalaryPermissions,
  postProcurementAdvancePayments,
  postProcurementApprovedOrderItemsCancel,
  postProcurementApprovedOrderItemsUncancel,
  postProcurementApprovedRequestItemsCancel,
  postProcurementApprovedRequestItemsCreateOfferComparison,
  postProcurementApprovedRequestItemsUncancel,
  postProcurementInvoices,
  postProcurementInvoicesAdd_attachment,
  postProcurementInvoicesApprovals,
  postProcurementInvoicesApprove,
  postProcurementInvoicesPrepare,
  postProcurementOrders,
  postProcurementOrdersAdd_attachment,
  postProcurementOrdersApprovals,
  postProcurementOrdersApprove,
  postProcurementOrdersPrepare,
  postProcurementRequestTypes,
  postProcurementRequests,
  postProcurementRequestsAdd_attachment,
  postProcurementRequestsApprovals,
  postProcurementRequestsApprove,
  postProcurementSpecialInvoiceTypes,
  postProcurementSpecialInvoices,
  postProcurementSpecialInvoicesAdd_attachment,
  postProcurementSpecialInvoicesApprovals,
  postProcurementSpecialInvoicesApprove,
  postProfilesAvatar,
  postProfilesNotifications,
  postProjectsAccountingtypes,
  postProjectsCities,
  postProjectsCompanies,
  postProjectsCompaniesSlugValidateOfferComparisonApiKey,
  postProjectsCountries,
  postProjectsDistricts,
  postProjectsProjects,
  postProjectsProjecttypes,
  postProjectsResponsibles,
  postProjectsResponsibletypes,
  postRatesRates,
  postSubcontractsContractCategories,
  postSubcontractsContractCollateralReason,
  postSubcontractsContractCollateralStatus,
  postSubcontractsContractCollateralTypes,
  postSubcontractsContracts,
  postSubcontractsContractsAdd_attachment,
  postSubcontractsContractsApprovals,
  postSubcontractsContractsApprove,
  postSubcontractsContractsCounter__slugCreate_revision,
  postSubcontractsDeductionReturns,
  postSubcontractsDeductionReturnsAdd_attachment,
  postSubcontractsDeductionReturnsApprovals,
  postSubcontractsDeductionReturnsApprove,
  postSubcontractsProgresses,
  postSubcontractsProgressesAdd_attachment,
  postSubcontractsProgressesApprovals,
  postSubcontractsProgressesApprove,
  postSubcontractsRevisions,
  postSuppliersAccountingCodes,
  postSuppliersBankAccounts,
  postSuppliersContacts,
  postSuppliersReviewAnswers,
  postSuppliersReviewForms,
  postSuppliersReviewQuestions,
  postSuppliersReviewTemplates,
  postSuppliersSupplierActivityTypes,
  postSuppliersSupplierBranches,
  postSuppliersSupplierTypes,
  postSuppliersSuppliers,
  postWarehouseProducts,
  postWarehouseProductsAdd_attachment,
  postWarehouseProductsDeliver_products,
  postWarehouseTransactions,
  postWarehouseWarehouses,
  putAuthGroupsId,
  putAuthGroupsIdMembersUser_id,
  putAuthUser,
  putAuthUserGroupsId,
  putAuthUserGroupsIdCopy_groups_from,
  putCodesActivitiesId,
  putCodesActivityAccountCodesId,
  putCodesResourcesId,
  putCodesWbsId,
  putCommonBankNamesId,
  putCommonCurrenciesId,
  putCommonPackagingMethodsId,
  putCommonPaymentMethodsId,
  putCommonResourceUnitsId,
  putCommonTaxParametersId,
  putCommonVatWitholdingsId,
  putFinanceAccountsId,
  putFinanceBankAccountsId,
  putFinanceCashAccountsId,
  putFinanceExpensesCounter__slug,
  putFinanceIncomeInvoiceCategoriesId,
  putFinanceIncomeInvoicesCounter__slug,
  putFinancePaymentBondsCounter__slug,
  putFinancePaymentChequesCounter__slug,
  putFinancePaymentDetailsId,
  putFinanceRevenueBondsCounter__slug,
  putFinanceRevenueChequesCounter__slug,
  putFinanceRevenueDetailsId,
  putFinanceSlipsId,
  putFinanceSupplierAccountsId,
  putFinanceTxnsId,
  putHrCrewsId,
  putHrDepartmentsId,
  putHrLocationsId,
  putHrPersonnelId,
  putHrPositionsId,
  putHrProfessionsId,
  putHrQuitReasonsId,
  putHrQuitRecordsId,
  putHrSalariesId,
  putHrSalaryPermissionsId,
  putProcurementAdvancePaymentsId,
  putProcurementInvoicesCounter__slug,
  putProcurementOrdersCounter__slug,
  putProcurementRequestTypesId,
  putProcurementRequestsCounter__slug,
  putProcurementSpecialInvoiceTypesId,
  putProcurementSpecialInvoicesCounter__slug,
  putProjectsAccountingtypesId,
  putProjectsCitiesId,
  putProjectsCompaniesSlug,
  putProjectsCountriesId,
  putProjectsDistrictsId,
  putProjectsProjectsSlug,
  putProjectsProjecttypesId,
  putProjectsResponsiblesId,
  putProjectsResponsibletypesId,
  putRatesRatesId,
  putSubcontractsContractCategoriesId,
  putSubcontractsContractCollateralReasonId,
  putSubcontractsContractCollateralStatusId,
  putSubcontractsContractCollateralTypesId,
  putSubcontractsContractsCounter__slug,
  putSubcontractsDeductionReturnsCounter__slug,
  putSubcontractsProgressesCounter__slug,
  putSubcontractsRevisionsId,
  putSuppliersAccountingCodesId,
  putSuppliersBankAccountsId,
  putSuppliersContactsId,
  putSuppliersReviewAnswersId,
  putSuppliersReviewFormsSlug,
  putSuppliersReviewFormsSlugAnswers,
  putSuppliersReviewQuestionsId,
  putSuppliersReviewTemplatesSlug,
  putSuppliersReviewTemplatesSlugQuestions,
  putSuppliersSupplierActivityTypesId,
  putSuppliersSupplierBranchesId,
  putSuppliersSupplierTypesId,
  putSuppliersSuppliersSlug,
  putWarehouseProductsId,
  putWarehouseTransactionsId,
  putWarehouseWarehousesId,
} from \\"./services\\";

const useHasMore = (
  pages: Array<SwaggerResponse<any>> | undefined,
  list: any,
  queryParams: any,
) =>
  useMemo(() => {
    if (!pages || (pages && pages.length < 1)) {
      return false;
    }

    const total = getTotal(pages);

    if (total !== undefined) {
      if (list && list.length < total) {
        return true;
      }
      return false;
    }
    if (
      paginationFlattenData([pages[pages.length - 1]])?.length ===
      getPageSize(queryParams as any)
    ) {
      return true;
    }

    return false;
  }, [pages, list, queryParams]);

export type SwaggerTypescriptMutationDefaultParams<TExtra> = {
  _extraVariables?: TExtra;
  configOverride?: AxiosRequestConfig;
};
type SwaggerTypescriptUseQueryOptions<TData> = Omit<
  UseQueryOptions<SwaggerResponse<TData>, RequestError | Error>,
  \\"queryKey\\"
>;

type SwaggerTypescriptUseMutationOptions<TData, TRequest, TExtra> =
  UseMutationOptions<
    SwaggerResponse<TData>,
    RequestError | Error,
    TRequest & SwaggerTypescriptMutationDefaultParams<TExtra>
  >;

type SwaggerTypescriptUseMutationOptionsVoid<TData, TExtra> =
  UseMutationOptions<
    SwaggerResponse<TData>,
    RequestError | Error,
    SwaggerTypescriptMutationDefaultParams<TExtra> | void
  >;

export const useDeleteAuthGroupsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A unique integer value identifying this group. */
      id: number;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteAuthGroupsId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteAuthGroupsIdMembersUser_id = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A unique integer value identifying this group. */
      id: number;
      user_id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        user_id,

        configOverride,
      } = _o || {};

      return deleteAuthGroupsIdMembersUser_id(
        id,
        user_id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteAuthUserGroupsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A unique integer value identifying this user. */
      id: number;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteAuthUserGroupsId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteCodesActivitiesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this Activity. */
      id: string;
      queryParams?: DeleteCodesActivitiesIdQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        queryParams,
        configOverride,
      } = _o || {};

      return deleteCodesActivitiesId(
        id,

        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteCodesActivityAccountCodesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this accounting code. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteCodesActivityAccountCodesId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteCodesResourcesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this Resource. */
      id: string;
      queryParams?: DeleteCodesResourcesIdQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        queryParams,
        configOverride,
      } = _o || {};

      return deleteCodesResourcesId(
        id,

        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteCodesWbsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this WBS. */
      id: string;
      queryParams?: DeleteCodesWbsIdQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        queryParams,
        configOverride,
      } = _o || {};

      return deleteCodesWbsId(
        id,

        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteCommonAttachmentsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this attachment. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteCommonAttachmentsId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteCommonBankNamesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this Bank Name. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteCommonBankNamesId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteCommonCurrenciesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this Currency. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteCommonCurrenciesId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteCommonPackagingMethodsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this Packaging Method. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteCommonPackagingMethodsId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteCommonPaymentMethodsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this Payment Method. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteCommonPaymentMethodsId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteCommonResourceUnitsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this Resource Unit. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteCommonResourceUnitsId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteCommonTaxParametersId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this Tax Parameter. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteCommonTaxParametersId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteCommonVatWitholdingsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this Vat Witholding. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteCommonVatWitholdingsId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteFinanceAccountsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this account. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteFinanceAccountsId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteFinanceBankAccountsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this bank account. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteFinanceBankAccountsId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteFinanceCashAccountsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this cash account. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteFinanceCashAccountsId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteFinanceExpensesCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { counter__slug: string },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,

        configOverride,
      } = _o || {};

      return deleteFinanceExpensesCounter__slug(
        counter__slug,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteFinanceIncomeInvoiceCategoriesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this income invoice category. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteFinanceIncomeInvoiceCategoriesId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteFinanceIncomeInvoicesCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { counter__slug: string },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,

        configOverride,
      } = _o || {};

      return deleteFinanceIncomeInvoicesCounter__slug(
        counter__slug,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteFinancePaymentBondsCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { counter__slug: string },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,

        configOverride,
      } = _o || {};

      return deleteFinancePaymentBondsCounter__slug(
        counter__slug,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteFinancePaymentChequesCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { counter__slug: string },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,

        configOverride,
      } = _o || {};

      return deleteFinancePaymentChequesCounter__slug(
        counter__slug,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteFinancePaymentDetailsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this Payment Detail. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteFinancePaymentDetailsId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteFinanceRevenueBondsCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { counter__slug: string },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,

        configOverride,
      } = _o || {};

      return deleteFinanceRevenueBondsCounter__slug(
        counter__slug,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteFinanceRevenueChequesCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { counter__slug: string },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,

        configOverride,
      } = _o || {};

      return deleteFinanceRevenueChequesCounter__slug(
        counter__slug,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteFinanceRevenueDetailsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this Revenue Detail. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteFinanceRevenueDetailsId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteFinanceSlipsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this slip. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteFinanceSlipsId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteFinanceSupplierAccountsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this supplier account. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteFinanceSupplierAccountsId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteFinanceTxnsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this transaction. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteFinanceTxnsId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteHrCrewsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this Crew. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteHrCrewsId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteHrDepartmentsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this Main Department. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteHrDepartmentsId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteHrLocationsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this Location. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteHrLocationsId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteHrPersonnelId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this Person. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteHrPersonnelId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteHrPositionsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this Main Position. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteHrPositionsId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteHrProfessionsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this Profession. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteHrProfessionsId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteHrQuitReasonsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this Quit Reason. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteHrQuitReasonsId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteHrQuitRecordsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this Quit Record. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteHrQuitRecordsId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteHrSalariesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this Salary. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteHrSalariesId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteHrSalaryPermissionsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A unique integer value identifying this Project Salary Permission. */
      id: number;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteHrSalaryPermissionsId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteProcurementAdvancePaymentsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this order advance payment. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteProcurementAdvancePaymentsId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteProcurementInvoicesCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { counter__slug: string },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,

        configOverride,
      } = _o || {};

      return deleteProcurementInvoicesCounter__slug(
        counter__slug,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteProcurementOrdersCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { counter__slug: string },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,

        configOverride,
      } = _o || {};

      return deleteProcurementOrdersCounter__slug(
        counter__slug,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteProcurementRequestTypesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this request type. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteProcurementRequestTypesId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteProcurementRequestsCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { counter__slug: string },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,

        configOverride,
      } = _o || {};

      return deleteProcurementRequestsCounter__slug(
        counter__slug,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteProcurementSpecialInvoiceTypesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this special invoice type. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteProcurementSpecialInvoiceTypesId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteProcurementSpecialInvoicesCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { counter__slug: string },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,

        configOverride,
      } = _o || {};

      return deleteProcurementSpecialInvoicesCounter__slug(
        counter__slug,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteProjectsAccountingtypesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this accounting type. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteProjectsAccountingtypesId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteProjectsCitiesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this city. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteProjectsCitiesId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteProjectsCompaniesSlug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<any, { slug: string }, TExtra>,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        slug,

        configOverride,
      } = _o || {};

      return deleteProjectsCompaniesSlug(
        slug,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteProjectsCountriesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this country. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteProjectsCountriesId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteProjectsDistrictsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this district. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteProjectsDistrictsId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteProjectsProjectsSlug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { slug: string; queryParams?: DeleteProjectsProjectsSlugQueryParams },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        slug,

        queryParams,
        configOverride,
      } = _o || {};

      return deleteProjectsProjectsSlug(
        slug,

        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteProjectsProjecttypesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this project type. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteProjectsProjecttypesId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteProjectsResponsiblesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this responsible. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteProjectsResponsiblesId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteProjectsResponsibletypesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this responsible type. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteProjectsResponsibletypesId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteRatesRatesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A unique integer value identifying this rate. */
      id: number;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteRatesRatesId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteSubcontractsContractCategoriesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this contract category. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteSubcontractsContractCategoriesId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteSubcontractsContractCollateralReasonId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this contract collateral reason. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteSubcontractsContractCollateralReasonId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteSubcontractsContractCollateralStatusId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this contract collateral status. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteSubcontractsContractCollateralStatusId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteSubcontractsContractCollateralTypesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this contract collateral type. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteSubcontractsContractCollateralTypesId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteSubcontractsContractsCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { counter__slug: string },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,

        configOverride,
      } = _o || {};

      return deleteSubcontractsContractsCounter__slug(
        counter__slug,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteSubcontractsDeductionReturnsCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { counter__slug: string },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,

        configOverride,
      } = _o || {};

      return deleteSubcontractsDeductionReturnsCounter__slug(
        counter__slug,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteSubcontractsProgressesCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { counter__slug: string },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,

        configOverride,
      } = _o || {};

      return deleteSubcontractsProgressesCounter__slug(
        counter__slug,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteSubcontractsRevisionsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this contract revision. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteSubcontractsRevisionsId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteSuppliersAccountingCodesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this supplier accounting code. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteSuppliersAccountingCodesId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteSuppliersBankAccountsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this supplier bank account. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteSuppliersBankAccountsId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteSuppliersContactsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this supplier contact. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteSuppliersContactsId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteSuppliersReviewAnswersId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this answer. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteSuppliersReviewAnswersId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteSuppliersReviewFormsSlug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<any, { slug: string }, TExtra>,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        slug,

        configOverride,
      } = _o || {};

      return deleteSuppliersReviewFormsSlug(
        slug,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteSuppliersReviewQuestionsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this review question. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteSuppliersReviewQuestionsId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteSuppliersReviewTemplatesSlug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<any, { slug: string }, TExtra>,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        slug,

        configOverride,
      } = _o || {};

      return deleteSuppliersReviewTemplatesSlug(
        slug,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteSuppliersSupplierActivityTypesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this supplier activity type. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteSuppliersSupplierActivityTypesId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteSuppliersSupplierBranchesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this supplier branch. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteSuppliersSupplierBranchesId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteSuppliersSupplierTypesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this supplier type. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteSuppliersSupplierTypesId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteSuppliersSuppliersSlug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<any, { slug: string }, TExtra>,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        slug,

        configOverride,
      } = _o || {};

      return deleteSuppliersSuppliersSlug(
        slug,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteWarehouseProductsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this product. */
      id: string;
      queryParams: DeleteWarehouseProductsIdQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        queryParams,
        configOverride,
      } = _o || {};

      return deleteWarehouseProductsId(
        id,

        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteWarehouseTransactionsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this transaction. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteWarehouseTransactionsId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useDeleteWarehouseWarehousesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      /** A UUID string identifying this warehouse. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return deleteWarehouseWarehousesId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const useGetApiSchema = (
  queryParams?: GetApiSchemaQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<{ [x: string]: any }>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetApiSchema.info(queryParams, configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetApiSchema.info = (
  queryParams?: GetApiSchemaQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getApiSchema.key, queryParams] as QueryKey,
    fun: () =>
      getApiSchema(
        queryParams,

        configOverride,
      ),
  };
};
useGetApiSchema.prefetch = (
  client: QueryClient,
  queryParams?: GetApiSchemaQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<{ [x: string]: any }>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetApiSchema.info(queryParams, configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetAuthGroups = (
  options?: SwaggerTypescriptUseQueryOptions<GroupMember[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetAuthGroups.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetAuthGroups.info = (configOverride?: AxiosRequestConfig) => {
  return {
    key: [getAuthGroups.key] as QueryKey,
    fun: () => getAuthGroups(configOverride),
  };
};
useGetAuthGroups.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<GroupMember[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetAuthGroups.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetAuthGroupsId = (
  /** A unique integer value identifying this group. */
  id: number,
  options?: SwaggerTypescriptUseQueryOptions<GroupMember>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetAuthGroupsId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetAuthGroupsId.info = (
  /** A unique integer value identifying this group. */
  id: number,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getAuthGroupsId.key, id] as QueryKey,
    fun: () =>
      getAuthGroupsId(
        id,

        configOverride,
      ),
  };
};
useGetAuthGroupsId.prefetch = (
  client: QueryClient,

  /** A unique integer value identifying this group. */
  id: number,
  options?: SwaggerTypescriptUseQueryOptions<GroupMember>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetAuthGroupsId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetAuthGroupsPermissions = (
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetAuthGroupsPermissions.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetAuthGroupsPermissions.info = (configOverride?: AxiosRequestConfig) => {
  return {
    key: [getAuthGroupsPermissions.key] as QueryKey,
    fun: () => getAuthGroupsPermissions(configOverride),
  };
};
useGetAuthGroupsPermissions.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetAuthGroupsPermissions.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetAuthPermissions = (
  options?: SwaggerTypescriptUseQueryOptions<ConsolidatedPermissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetAuthPermissions.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetAuthPermissions.info = (configOverride?: AxiosRequestConfig) => {
  return {
    key: [getAuthPermissions.key] as QueryKey,
    fun: () => getAuthPermissions(configOverride),
  };
};
useGetAuthPermissions.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<ConsolidatedPermissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetAuthPermissions.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetAuthUser = (
  options?: SwaggerTypescriptUseQueryOptions<CustomUserDetails>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetAuthUser.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetAuthUser.info = (configOverride?: AxiosRequestConfig) => {
  return {
    key: [getAuthUser.key] as QueryKey,
    fun: () => getAuthUser(configOverride),
  };
};
useGetAuthUser.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<CustomUserDetails>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetAuthUser.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetAuthUserGroups = (
  options?: SwaggerTypescriptUseQueryOptions<UserGroup[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetAuthUserGroups.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetAuthUserGroups.info = (configOverride?: AxiosRequestConfig) => {
  return {
    key: [getAuthUserGroups.key] as QueryKey,
    fun: () => getAuthUserGroups(configOverride),
  };
};
useGetAuthUserGroups.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<UserGroup[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetAuthUserGroups.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetAuthUserGroupsId = (
  /** A unique integer value identifying this user. */
  id: number,
  options?: SwaggerTypescriptUseQueryOptions<UserGroup>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetAuthUserGroupsId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetAuthUserGroupsId.info = (
  /** A unique integer value identifying this user. */
  id: number,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getAuthUserGroupsId.key, id] as QueryKey,
    fun: () =>
      getAuthUserGroupsId(
        id,

        configOverride,
      ),
  };
};
useGetAuthUserGroupsId.prefetch = (
  client: QueryClient,

  /** A unique integer value identifying this user. */
  id: number,
  options?: SwaggerTypescriptUseQueryOptions<UserGroup>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetAuthUserGroupsId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetCodesActivities = (
  queryParams?: GetCodesActivitiesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedActivityListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCodesActivities.info(queryParams, configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetCodesActivities.info = (
  queryParams?: GetCodesActivitiesQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getCodesActivities.key, queryParams] as QueryKey,
    fun: () =>
      getCodesActivities(
        queryParams,

        configOverride,
      ),
  };
};
useGetCodesActivities.prefetch = (
  client: QueryClient,
  queryParams?: GetCodesActivitiesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedActivityListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCodesActivities.info(queryParams, configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetCodesActivitiesId = (
  /** A UUID string identifying this Activity. */
  id: string,
  queryParams?: GetCodesActivitiesIdQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Activity>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCodesActivitiesId.info(
    id,

    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetCodesActivitiesId.info = (
  /** A UUID string identifying this Activity. */
  id: string,
  queryParams?: GetCodesActivitiesIdQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getCodesActivitiesId.key, id, queryParams] as QueryKey,
    fun: () =>
      getCodesActivitiesId(
        id,

        queryParams,

        configOverride,
      ),
  };
};
useGetCodesActivitiesId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this Activity. */
  id: string,
  queryParams?: GetCodesActivitiesIdQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Activity>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCodesActivitiesId.info(
    id,

    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetCodesActivitiesPermissions = (
  queryParams?: GetCodesActivitiesPermissionsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCodesActivitiesPermissions.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetCodesActivitiesPermissions.info = (
  queryParams?: GetCodesActivitiesPermissionsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getCodesActivitiesPermissions.key, queryParams] as QueryKey,
    fun: () =>
      getCodesActivitiesPermissions(
        queryParams,

        configOverride,
      ),
  };
};
useGetCodesActivitiesPermissions.prefetch = (
  client: QueryClient,
  queryParams?: GetCodesActivitiesPermissionsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCodesActivitiesPermissions.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetCodesActivityAccountCodes = (
  options?: SwaggerTypescriptUseQueryOptions<SupplierAccountingCode[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCodesActivityAccountCodes.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetCodesActivityAccountCodes.info = (
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getCodesActivityAccountCodes.key] as QueryKey,
    fun: () => getCodesActivityAccountCodes(configOverride),
  };
};
useGetCodesActivityAccountCodes.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<SupplierAccountingCode[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCodesActivityAccountCodes.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetCodesActivityAccountCodesId = (
  /** A UUID string identifying this accounting code. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<SupplierAccountingCode>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCodesActivityAccountCodesId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetCodesActivityAccountCodesId.info = (
  /** A UUID string identifying this accounting code. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getCodesActivityAccountCodesId.key, id] as QueryKey,
    fun: () =>
      getCodesActivityAccountCodesId(
        id,

        configOverride,
      ),
  };
};
useGetCodesActivityAccountCodesId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this accounting code. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<SupplierAccountingCode>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCodesActivityAccountCodesId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetCodesResources = (
  queryParams?: GetCodesResourcesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedResourceListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCodesResources.info(queryParams, configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetCodesResources.info = (
  queryParams?: GetCodesResourcesQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getCodesResources.key, queryParams] as QueryKey,
    fun: () =>
      getCodesResources(
        queryParams,

        configOverride,
      ),
  };
};
useGetCodesResources.prefetch = (
  client: QueryClient,
  queryParams?: GetCodesResourcesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedResourceListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCodesResources.info(queryParams, configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetCodesResourcesId = (
  /** A UUID string identifying this Resource. */
  id: string,
  queryParams?: GetCodesResourcesIdQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Resource>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCodesResourcesId.info(
    id,

    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetCodesResourcesId.info = (
  /** A UUID string identifying this Resource. */
  id: string,
  queryParams?: GetCodesResourcesIdQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getCodesResourcesId.key, id, queryParams] as QueryKey,
    fun: () =>
      getCodesResourcesId(
        id,

        queryParams,

        configOverride,
      ),
  };
};
useGetCodesResourcesId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this Resource. */
  id: string,
  queryParams?: GetCodesResourcesIdQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Resource>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCodesResourcesId.info(
    id,

    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetCodesResourcesPermissions = (
  queryParams?: GetCodesResourcesPermissionsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCodesResourcesPermissions.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetCodesResourcesPermissions.info = (
  queryParams?: GetCodesResourcesPermissionsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getCodesResourcesPermissions.key, queryParams] as QueryKey,
    fun: () =>
      getCodesResourcesPermissions(
        queryParams,

        configOverride,
      ),
  };
};
useGetCodesResourcesPermissions.prefetch = (
  client: QueryClient,
  queryParams?: GetCodesResourcesPermissionsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCodesResourcesPermissions.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetCodesWbs = (
  queryParams?: GetCodesWbsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedWBSListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCodesWbs.info(queryParams, configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetCodesWbs.info = (
  queryParams?: GetCodesWbsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getCodesWbs.key, queryParams] as QueryKey,
    fun: () =>
      getCodesWbs(
        queryParams,

        configOverride,
      ),
  };
};
useGetCodesWbs.prefetch = (
  client: QueryClient,
  queryParams?: GetCodesWbsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedWBSListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCodesWbs.info(queryParams, configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetCodesWbsId = (
  /** A UUID string identifying this WBS. */
  id: string,
  queryParams?: GetCodesWbsIdQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<WBS>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCodesWbsId.info(
    id,

    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetCodesWbsId.info = (
  /** A UUID string identifying this WBS. */
  id: string,
  queryParams?: GetCodesWbsIdQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getCodesWbsId.key, id, queryParams] as QueryKey,
    fun: () =>
      getCodesWbsId(
        id,

        queryParams,

        configOverride,
      ),
  };
};
useGetCodesWbsId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this WBS. */
  id: string,
  queryParams?: GetCodesWbsIdQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<WBS>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCodesWbsId.info(
    id,

    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetCodesWbsPermissions = (
  queryParams?: GetCodesWbsPermissionsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCodesWbsPermissions.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetCodesWbsPermissions.info = (
  queryParams?: GetCodesWbsPermissionsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getCodesWbsPermissions.key, queryParams] as QueryKey,
    fun: () =>
      getCodesWbsPermissions(
        queryParams,

        configOverride,
      ),
  };
};
useGetCodesWbsPermissions.prefetch = (
  client: QueryClient,
  queryParams?: GetCodesWbsPermissionsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCodesWbsPermissions.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetCodesWbsProjects = (
  queryParams?: GetCodesWbsProjectsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<WBS>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCodesWbsProjects.info(queryParams, configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetCodesWbsProjects.info = (
  queryParams?: GetCodesWbsProjectsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getCodesWbsProjects.key, queryParams] as QueryKey,
    fun: () =>
      getCodesWbsProjects(
        queryParams,

        configOverride,
      ),
  };
};
useGetCodesWbsProjects.prefetch = (
  client: QueryClient,
  queryParams?: GetCodesWbsProjectsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<WBS>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCodesWbsProjects.info(queryParams, configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetCommonAttachmentsId = (
  /** A UUID string identifying this attachment. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Attachment>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCommonAttachmentsId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetCommonAttachmentsId.info = (
  /** A UUID string identifying this attachment. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getCommonAttachmentsId.key, id] as QueryKey,
    fun: () =>
      getCommonAttachmentsId(
        id,

        configOverride,
      ),
  };
};
useGetCommonAttachmentsId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this attachment. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Attachment>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCommonAttachmentsId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetCommonBankNames = (
  options?: SwaggerTypescriptUseQueryOptions<BankName[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCommonBankNames.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetCommonBankNames.info = (configOverride?: AxiosRequestConfig) => {
  return {
    key: [getCommonBankNames.key] as QueryKey,
    fun: () => getCommonBankNames(configOverride),
  };
};
useGetCommonBankNames.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<BankName[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCommonBankNames.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetCommonBankNamesId = (
  /** A UUID string identifying this Bank Name. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<BankName>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCommonBankNamesId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetCommonBankNamesId.info = (
  /** A UUID string identifying this Bank Name. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getCommonBankNamesId.key, id] as QueryKey,
    fun: () =>
      getCommonBankNamesId(
        id,

        configOverride,
      ),
  };
};
useGetCommonBankNamesId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this Bank Name. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<BankName>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCommonBankNamesId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetCommonCurrencies = (
  options?: SwaggerTypescriptUseQueryOptions<Currency[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCommonCurrencies.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetCommonCurrencies.info = (configOverride?: AxiosRequestConfig) => {
  return {
    key: [getCommonCurrencies.key] as QueryKey,
    fun: () => getCommonCurrencies(configOverride),
  };
};
useGetCommonCurrencies.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Currency[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCommonCurrencies.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetCommonCurrenciesId = (
  /** A UUID string identifying this Currency. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Currency>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCommonCurrenciesId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetCommonCurrenciesId.info = (
  /** A UUID string identifying this Currency. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getCommonCurrenciesId.key, id] as QueryKey,
    fun: () =>
      getCommonCurrenciesId(
        id,

        configOverride,
      ),
  };
};
useGetCommonCurrenciesId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this Currency. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Currency>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCommonCurrenciesId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetCommonFeatureFlags = (
  options?: SwaggerTypescriptUseQueryOptions<FeatureFlags[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCommonFeatureFlags.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetCommonFeatureFlags.info = (configOverride?: AxiosRequestConfig) => {
  return {
    key: [getCommonFeatureFlags.key] as QueryKey,
    fun: () => getCommonFeatureFlags(configOverride),
  };
};
useGetCommonFeatureFlags.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<FeatureFlags[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCommonFeatureFlags.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetCommonPackagingMethods = (
  options?: SwaggerTypescriptUseQueryOptions<PackagingMethod[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCommonPackagingMethods.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetCommonPackagingMethods.info = (configOverride?: AxiosRequestConfig) => {
  return {
    key: [getCommonPackagingMethods.key] as QueryKey,
    fun: () => getCommonPackagingMethods(configOverride),
  };
};
useGetCommonPackagingMethods.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<PackagingMethod[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCommonPackagingMethods.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetCommonPackagingMethodsId = (
  /** A UUID string identifying this Packaging Method. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<PackagingMethod>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCommonPackagingMethodsId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetCommonPackagingMethodsId.info = (
  /** A UUID string identifying this Packaging Method. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getCommonPackagingMethodsId.key, id] as QueryKey,
    fun: () =>
      getCommonPackagingMethodsId(
        id,

        configOverride,
      ),
  };
};
useGetCommonPackagingMethodsId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this Packaging Method. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<PackagingMethod>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCommonPackagingMethodsId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetCommonPaymentMethods = (
  options?: SwaggerTypescriptUseQueryOptions<PaymentMethod[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCommonPaymentMethods.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetCommonPaymentMethods.info = (configOverride?: AxiosRequestConfig) => {
  return {
    key: [getCommonPaymentMethods.key] as QueryKey,
    fun: () => getCommonPaymentMethods(configOverride),
  };
};
useGetCommonPaymentMethods.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<PaymentMethod[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCommonPaymentMethods.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetCommonPaymentMethodsId = (
  /** A UUID string identifying this Payment Method. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<PaymentMethod>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCommonPaymentMethodsId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetCommonPaymentMethodsId.info = (
  /** A UUID string identifying this Payment Method. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getCommonPaymentMethodsId.key, id] as QueryKey,
    fun: () =>
      getCommonPaymentMethodsId(
        id,

        configOverride,
      ),
  };
};
useGetCommonPaymentMethodsId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this Payment Method. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<PaymentMethod>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCommonPaymentMethodsId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetCommonResourceUnits = (
  options?: SwaggerTypescriptUseQueryOptions<ResourceUnit[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCommonResourceUnits.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetCommonResourceUnits.info = (configOverride?: AxiosRequestConfig) => {
  return {
    key: [getCommonResourceUnits.key] as QueryKey,
    fun: () => getCommonResourceUnits(configOverride),
  };
};
useGetCommonResourceUnits.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<ResourceUnit[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCommonResourceUnits.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetCommonResourceUnitsId = (
  /** A UUID string identifying this Resource Unit. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<ResourceUnit>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCommonResourceUnitsId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetCommonResourceUnitsId.info = (
  /** A UUID string identifying this Resource Unit. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getCommonResourceUnitsId.key, id] as QueryKey,
    fun: () =>
      getCommonResourceUnitsId(
        id,

        configOverride,
      ),
  };
};
useGetCommonResourceUnitsId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this Resource Unit. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<ResourceUnit>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCommonResourceUnitsId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetCommonTaxParameters = (
  options?: SwaggerTypescriptUseQueryOptions<TaxParameter[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCommonTaxParameters.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetCommonTaxParameters.info = (configOverride?: AxiosRequestConfig) => {
  return {
    key: [getCommonTaxParameters.key] as QueryKey,
    fun: () => getCommonTaxParameters(configOverride),
  };
};
useGetCommonTaxParameters.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<TaxParameter[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCommonTaxParameters.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetCommonTaxParametersId = (
  /** A UUID string identifying this Tax Parameter. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<TaxParameter>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCommonTaxParametersId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetCommonTaxParametersId.info = (
  /** A UUID string identifying this Tax Parameter. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getCommonTaxParametersId.key, id] as QueryKey,
    fun: () =>
      getCommonTaxParametersId(
        id,

        configOverride,
      ),
  };
};
useGetCommonTaxParametersId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this Tax Parameter. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<TaxParameter>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCommonTaxParametersId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetCommonVatWitholdings = (
  options?: SwaggerTypescriptUseQueryOptions<Vatwitholding[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCommonVatWitholdings.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetCommonVatWitholdings.info = (configOverride?: AxiosRequestConfig) => {
  return {
    key: [getCommonVatWitholdings.key] as QueryKey,
    fun: () => getCommonVatWitholdings(configOverride),
  };
};
useGetCommonVatWitholdings.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Vatwitholding[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCommonVatWitholdings.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetCommonVatWitholdingsId = (
  /** A UUID string identifying this Vat Witholding. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Vatwitholding>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCommonVatWitholdingsId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetCommonVatWitholdingsId.info = (
  /** A UUID string identifying this Vat Witholding. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getCommonVatWitholdingsId.key, id] as QueryKey,
    fun: () =>
      getCommonVatWitholdingsId(
        id,

        configOverride,
      ),
  };
};
useGetCommonVatWitholdingsId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this Vat Witholding. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Vatwitholding>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetCommonVatWitholdingsId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceAccountTypes = (
  options?: SwaggerTypescriptUseQueryOptions<AccountType[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceAccountTypes.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceAccountTypes.info = (configOverride?: AxiosRequestConfig) => {
  return {
    key: [getFinanceAccountTypes.key] as QueryKey,
    fun: () => getFinanceAccountTypes(configOverride),
  };
};
useGetFinanceAccountTypes.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<AccountType[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceAccountTypes.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceAccounts = (
  queryParams?: GetFinanceAccountsQueryParams,
  options?: UseInfiniteQueryOptions<
    SwaggerResponse<PaginatedAccountList>,
    RequestError | Error
  >,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceAccounts.info(queryParams, configOverride);
  const {
    data: { pages } = {},
    data,
    ...rest
  } = useInfiniteQuery({
    queryKey: key,
    queryFn: ({ pageParam }) =>
      fun({
        offset: pageParam,
      }),
    initialPageParam: 1,
    getNextPageParam: (_lastPage, allPages) => allPages.length + 1,
    ...(options as any),
  });

  const list = useMemo(() => paginationFlattenData(pages), [pages]);
  const total = getTotal(pages);

  const hasMore = useHasMore(pages, list, queryParams);

  return { ...rest, data, list, hasMore, total };
};
useGetFinanceAccounts.info = (
  queryParams?: GetFinanceAccountsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinanceAccounts.key, queryParams] as QueryKey,
    fun: (_param?: Partial<GetFinanceAccountsQueryParams>) =>
      getFinanceAccounts(
        {
          ..._param,
          ...queryParams,
        },

        configOverride,
      ),
  };
};
useGetFinanceAccounts.prefetch = (
  client: QueryClient,
  queryParams?: GetFinanceAccountsQueryParams,
  options?: UseInfiniteQueryOptions<
    SwaggerResponse<PaginatedAccountList>,
    RequestError | Error
  >,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceAccounts.info(queryParams, configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceAccountsId = (
  /** A UUID string identifying this account. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Account>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceAccountsId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceAccountsId.info = (
  /** A UUID string identifying this account. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinanceAccountsId.key, id] as QueryKey,
    fun: () =>
      getFinanceAccountsId(
        id,

        configOverride,
      ),
  };
};
useGetFinanceAccountsId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this account. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Account>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceAccountsId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceBankAccountTypes = (
  options?: SwaggerTypescriptUseQueryOptions<AccountType[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceBankAccountTypes.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceBankAccountTypes.info = (configOverride?: AxiosRequestConfig) => {
  return {
    key: [getFinanceBankAccountTypes.key] as QueryKey,
    fun: () => getFinanceBankAccountTypes(configOverride),
  };
};
useGetFinanceBankAccountTypes.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<AccountType[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceBankAccountTypes.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceBankAccounts = (
  queryParams?: GetFinanceBankAccountsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedBankAccountListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceBankAccounts.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceBankAccounts.info = (
  queryParams?: GetFinanceBankAccountsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinanceBankAccounts.key, queryParams] as QueryKey,
    fun: () =>
      getFinanceBankAccounts(
        queryParams,

        configOverride,
      ),
  };
};
useGetFinanceBankAccounts.prefetch = (
  client: QueryClient,
  queryParams?: GetFinanceBankAccountsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedBankAccountListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceBankAccounts.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceBankAccountsId = (
  /** A UUID string identifying this bank account. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<BankAccount>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceBankAccountsId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceBankAccountsId.info = (
  /** A UUID string identifying this bank account. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinanceBankAccountsId.key, id] as QueryKey,
    fun: () =>
      getFinanceBankAccountsId(
        id,

        configOverride,
      ),
  };
};
useGetFinanceBankAccountsId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this bank account. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<BankAccount>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceBankAccountsId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceCashAccountTypes = (
  options?: SwaggerTypescriptUseQueryOptions<AccountType[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceCashAccountTypes.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceCashAccountTypes.info = (configOverride?: AxiosRequestConfig) => {
  return {
    key: [getFinanceCashAccountTypes.key] as QueryKey,
    fun: () => getFinanceCashAccountTypes(configOverride),
  };
};
useGetFinanceCashAccountTypes.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<AccountType[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceCashAccountTypes.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceCashAccounts = (
  queryParams?: GetFinanceCashAccountsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedCashAccountListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceCashAccounts.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceCashAccounts.info = (
  queryParams?: GetFinanceCashAccountsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinanceCashAccounts.key, queryParams] as QueryKey,
    fun: () =>
      getFinanceCashAccounts(
        queryParams,

        configOverride,
      ),
  };
};
useGetFinanceCashAccounts.prefetch = (
  client: QueryClient,
  queryParams?: GetFinanceCashAccountsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedCashAccountListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceCashAccounts.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceCashAccountsId = (
  /** A UUID string identifying this cash account. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<CashAccount>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceCashAccountsId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceCashAccountsId.info = (
  /** A UUID string identifying this cash account. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinanceCashAccountsId.key, id] as QueryKey,
    fun: () =>
      getFinanceCashAccountsId(
        id,

        configOverride,
      ),
  };
};
useGetFinanceCashAccountsId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this cash account. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<CashAccount>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceCashAccountsId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceDefaultCurrency = (
  options?: SwaggerTypescriptUseQueryOptions<Currency[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceDefaultCurrency.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceDefaultCurrency.info = (configOverride?: AxiosRequestConfig) => {
  return {
    key: [getFinanceDefaultCurrency.key] as QueryKey,
    fun: () => getFinanceDefaultCurrency(configOverride),
  };
};
useGetFinanceDefaultCurrency.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Currency[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceDefaultCurrency.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceDefaultCurrencyId = (
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Currency>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceDefaultCurrencyId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceDefaultCurrencyId.info = (
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinanceDefaultCurrencyId.key, id] as QueryKey,
    fun: () =>
      getFinanceDefaultCurrencyId(
        id,

        configOverride,
      ),
  };
};
useGetFinanceDefaultCurrencyId.prefetch = (
  client: QueryClient,
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Currency>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceDefaultCurrencyId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceExpenseTransactionTypes = (
  options?: SwaggerTypescriptUseQueryOptions<TransactionType[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetFinanceExpenseTransactionTypes.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceExpenseTransactionTypes.info = (
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinanceExpenseTransactionTypes.key] as QueryKey,
    fun: () => getFinanceExpenseTransactionTypes(configOverride),
  };
};
useGetFinanceExpenseTransactionTypes.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<TransactionType[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetFinanceExpenseTransactionTypes.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceExpenses = (
  queryParams?: GetFinanceExpensesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedExpenseListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceExpenses.info(queryParams, configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceExpenses.info = (
  queryParams?: GetFinanceExpensesQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinanceExpenses.key, queryParams] as QueryKey,
    fun: () =>
      getFinanceExpenses(
        queryParams,

        configOverride,
      ),
  };
};
useGetFinanceExpenses.prefetch = (
  client: QueryClient,
  queryParams?: GetFinanceExpensesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedExpenseListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceExpenses.info(queryParams, configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceExpensesCounter__slug = (
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Expense>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceExpensesCounter__slug.info(
    counter__slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceExpensesCounter__slug.info = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinanceExpensesCounter__slug.key, counter__slug] as QueryKey,
    fun: () =>
      getFinanceExpensesCounter__slug(
        counter__slug,

        configOverride,
      ),
  };
};
useGetFinanceExpensesCounter__slug.prefetch = (
  client: QueryClient,
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Expense>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceExpensesCounter__slug.info(
    counter__slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceExpensesCounter__slugHistory = (
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Expense>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceExpensesCounter__slugHistory.info(
    counter__slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceExpensesCounter__slugHistory.info = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [
      getFinanceExpensesCounter__slugHistory.key,
      counter__slug,
    ] as QueryKey,
    fun: () =>
      getFinanceExpensesCounter__slugHistory(
        counter__slug,

        configOverride,
      ),
  };
};
useGetFinanceExpensesCounter__slugHistory.prefetch = (
  client: QueryClient,
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Expense>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceExpensesCounter__slugHistory.info(
    counter__slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceIncomeInvoiceCategories = (
  queryParams?: GetFinanceIncomeInvoiceCategoriesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<IncomeInvoiceCategory[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceIncomeInvoiceCategories.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceIncomeInvoiceCategories.info = (
  queryParams?: GetFinanceIncomeInvoiceCategoriesQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinanceIncomeInvoiceCategories.key, queryParams] as QueryKey,
    fun: () =>
      getFinanceIncomeInvoiceCategories(
        queryParams,

        configOverride,
      ),
  };
};
useGetFinanceIncomeInvoiceCategories.prefetch = (
  client: QueryClient,
  queryParams?: GetFinanceIncomeInvoiceCategoriesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<IncomeInvoiceCategory[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceIncomeInvoiceCategories.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceIncomeInvoiceCategoriesId = (
  /** A UUID string identifying this income invoice category. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<IncomeInvoiceCategory>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceIncomeInvoiceCategoriesId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceIncomeInvoiceCategoriesId.info = (
  /** A UUID string identifying this income invoice category. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinanceIncomeInvoiceCategoriesId.key, id] as QueryKey,
    fun: () =>
      getFinanceIncomeInvoiceCategoriesId(
        id,

        configOverride,
      ),
  };
};
useGetFinanceIncomeInvoiceCategoriesId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this income invoice category. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<IncomeInvoiceCategory>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceIncomeInvoiceCategoriesId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceIncomeInvoices = (
  queryParams?: GetFinanceIncomeInvoicesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedIncomeInvoiceListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceIncomeInvoices.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceIncomeInvoices.info = (
  queryParams?: GetFinanceIncomeInvoicesQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinanceIncomeInvoices.key, queryParams] as QueryKey,
    fun: () =>
      getFinanceIncomeInvoices(
        queryParams,

        configOverride,
      ),
  };
};
useGetFinanceIncomeInvoices.prefetch = (
  client: QueryClient,
  queryParams?: GetFinanceIncomeInvoicesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedIncomeInvoiceListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceIncomeInvoices.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceIncomeInvoicesCounter__slug = (
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<IncomeInvoice>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceIncomeInvoicesCounter__slug.info(
    counter__slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceIncomeInvoicesCounter__slug.info = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinanceIncomeInvoicesCounter__slug.key, counter__slug] as QueryKey,
    fun: () =>
      getFinanceIncomeInvoicesCounter__slug(
        counter__slug,

        configOverride,
      ),
  };
};
useGetFinanceIncomeInvoicesCounter__slug.prefetch = (
  client: QueryClient,
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<IncomeInvoice>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceIncomeInvoicesCounter__slug.info(
    counter__slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceIncomeInvoicesCounter__slugApprovalHistory = (
  counter__slug: string,
  queryParams?: GetFinanceIncomeInvoicesCounter__slugApprovalHistoryQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedApprovalHistoryList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetFinanceIncomeInvoicesCounter__slugApprovalHistory.info(
      counter__slug,

      queryParams,
      configOverride,
    );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceIncomeInvoicesCounter__slugApprovalHistory.info = (
  counter__slug: string,
  queryParams?: GetFinanceIncomeInvoicesCounter__slugApprovalHistoryQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [
      getFinanceIncomeInvoicesCounter__slugApprovalHistory.key,
      counter__slug,

      queryParams,
    ] as QueryKey,
    fun: () =>
      getFinanceIncomeInvoicesCounter__slugApprovalHistory(
        counter__slug,

        queryParams,

        configOverride,
      ),
  };
};
useGetFinanceIncomeInvoicesCounter__slugApprovalHistory.prefetch = (
  client: QueryClient,
  counter__slug: string,
  queryParams?: GetFinanceIncomeInvoicesCounter__slugApprovalHistoryQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedApprovalHistoryList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetFinanceIncomeInvoicesCounter__slugApprovalHistory.info(
      counter__slug,

      queryParams,
      configOverride,
    );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceIncomeInvoicesCounter__slugAttachments = (
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<IncomeInvoice>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceIncomeInvoicesCounter__slugAttachments.info(
    counter__slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceIncomeInvoicesCounter__slugAttachments.info = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [
      getFinanceIncomeInvoicesCounter__slugAttachments.key,
      counter__slug,
    ] as QueryKey,
    fun: () =>
      getFinanceIncomeInvoicesCounter__slugAttachments(
        counter__slug,

        configOverride,
      ),
  };
};
useGetFinanceIncomeInvoicesCounter__slugAttachments.prefetch = (
  client: QueryClient,
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<IncomeInvoice>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceIncomeInvoicesCounter__slugAttachments.info(
    counter__slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceIncomeInvoicesCounter__slugHistory = (
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<IncomeInvoice>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceIncomeInvoicesCounter__slugHistory.info(
    counter__slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceIncomeInvoicesCounter__slugHistory.info = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [
      getFinanceIncomeInvoicesCounter__slugHistory.key,
      counter__slug,
    ] as QueryKey,
    fun: () =>
      getFinanceIncomeInvoicesCounter__slugHistory(
        counter__slug,

        configOverride,
      ),
  };
};
useGetFinanceIncomeInvoicesCounter__slugHistory.prefetch = (
  client: QueryClient,
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<IncomeInvoice>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceIncomeInvoicesCounter__slugHistory.info(
    counter__slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceIncomeInvoicesPermissions = (
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetFinanceIncomeInvoicesPermissions.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceIncomeInvoicesPermissions.info = (
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinanceIncomeInvoicesPermissions.key] as QueryKey,
    fun: () => getFinanceIncomeInvoicesPermissions(configOverride),
  };
};
useGetFinanceIncomeInvoicesPermissions.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetFinanceIncomeInvoicesPermissions.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceIncomeInvoicesStates = (
  queryParams?: GetFinanceIncomeInvoicesStatesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<State[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceIncomeInvoicesStates.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceIncomeInvoicesStates.info = (
  queryParams?: GetFinanceIncomeInvoicesStatesQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinanceIncomeInvoicesStates.key, queryParams] as QueryKey,
    fun: () =>
      getFinanceIncomeInvoicesStates(
        queryParams,

        configOverride,
      ),
  };
};
useGetFinanceIncomeInvoicesStates.prefetch = (
  client: QueryClient,
  queryParams?: GetFinanceIncomeInvoicesStatesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<State[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceIncomeInvoicesStates.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceInstruments = (
  queryParams?: GetFinanceInstrumentsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedInstrumentListDiscoveryList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceInstruments.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceInstruments.info = (
  queryParams?: GetFinanceInstrumentsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinanceInstruments.key, queryParams] as QueryKey,
    fun: () =>
      getFinanceInstruments(
        queryParams,

        configOverride,
      ),
  };
};
useGetFinanceInstruments.prefetch = (
  client: QueryClient,
  queryParams?: GetFinanceInstrumentsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedInstrumentListDiscoveryList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceInstruments.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceInstrumentsPermissions = (
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceInstrumentsPermissions.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceInstrumentsPermissions.info = (
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinanceInstrumentsPermissions.key] as QueryKey,
    fun: () => getFinanceInstrumentsPermissions(configOverride),
  };
};
useGetFinanceInstrumentsPermissions.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceInstrumentsPermissions.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinancePaymentBonds = (
  queryParams?: GetFinancePaymentBondsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedPaymentBondListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinancePaymentBonds.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinancePaymentBonds.info = (
  queryParams?: GetFinancePaymentBondsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinancePaymentBonds.key, queryParams] as QueryKey,
    fun: () =>
      getFinancePaymentBonds(
        queryParams,

        configOverride,
      ),
  };
};
useGetFinancePaymentBonds.prefetch = (
  client: QueryClient,
  queryParams?: GetFinancePaymentBondsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedPaymentBondListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinancePaymentBonds.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinancePaymentBondsCounter__slug = (
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<PaymentBond>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinancePaymentBondsCounter__slug.info(
    counter__slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinancePaymentBondsCounter__slug.info = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinancePaymentBondsCounter__slug.key, counter__slug] as QueryKey,
    fun: () =>
      getFinancePaymentBondsCounter__slug(
        counter__slug,

        configOverride,
      ),
  };
};
useGetFinancePaymentBondsCounter__slug.prefetch = (
  client: QueryClient,
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<PaymentBond>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinancePaymentBondsCounter__slug.info(
    counter__slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinancePaymentBondsCounter__slugHistory = (
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<PaymentBond>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinancePaymentBondsCounter__slugHistory.info(
    counter__slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinancePaymentBondsCounter__slugHistory.info = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [
      getFinancePaymentBondsCounter__slugHistory.key,
      counter__slug,
    ] as QueryKey,
    fun: () =>
      getFinancePaymentBondsCounter__slugHistory(
        counter__slug,

        configOverride,
      ),
  };
};
useGetFinancePaymentBondsCounter__slugHistory.prefetch = (
  client: QueryClient,
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<PaymentBond>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinancePaymentBondsCounter__slugHistory.info(
    counter__slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinancePaymentBondsPermissions = (
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetFinancePaymentBondsPermissions.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinancePaymentBondsPermissions.info = (
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinancePaymentBondsPermissions.key] as QueryKey,
    fun: () => getFinancePaymentBondsPermissions(configOverride),
  };
};
useGetFinancePaymentBondsPermissions.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetFinancePaymentBondsPermissions.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinancePaymentCheques = (
  queryParams?: GetFinancePaymentChequesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedPaymentChequeListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinancePaymentCheques.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinancePaymentCheques.info = (
  queryParams?: GetFinancePaymentChequesQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinancePaymentCheques.key, queryParams] as QueryKey,
    fun: () =>
      getFinancePaymentCheques(
        queryParams,

        configOverride,
      ),
  };
};
useGetFinancePaymentCheques.prefetch = (
  client: QueryClient,
  queryParams?: GetFinancePaymentChequesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedPaymentChequeListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinancePaymentCheques.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinancePaymentChequesCounter__slug = (
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<PaymentCheque>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinancePaymentChequesCounter__slug.info(
    counter__slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinancePaymentChequesCounter__slug.info = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinancePaymentChequesCounter__slug.key, counter__slug] as QueryKey,
    fun: () =>
      getFinancePaymentChequesCounter__slug(
        counter__slug,

        configOverride,
      ),
  };
};
useGetFinancePaymentChequesCounter__slug.prefetch = (
  client: QueryClient,
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<PaymentCheque>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinancePaymentChequesCounter__slug.info(
    counter__slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinancePaymentChequesCounter__slugHistory = (
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<PaymentCheque>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinancePaymentChequesCounter__slugHistory.info(
    counter__slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinancePaymentChequesCounter__slugHistory.info = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [
      getFinancePaymentChequesCounter__slugHistory.key,
      counter__slug,
    ] as QueryKey,
    fun: () =>
      getFinancePaymentChequesCounter__slugHistory(
        counter__slug,

        configOverride,
      ),
  };
};
useGetFinancePaymentChequesCounter__slugHistory.prefetch = (
  client: QueryClient,
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<PaymentCheque>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinancePaymentChequesCounter__slugHistory.info(
    counter__slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinancePaymentChequesPermissions = (
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetFinancePaymentChequesPermissions.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinancePaymentChequesPermissions.info = (
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinancePaymentChequesPermissions.key] as QueryKey,
    fun: () => getFinancePaymentChequesPermissions(configOverride),
  };
};
useGetFinancePaymentChequesPermissions.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetFinancePaymentChequesPermissions.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinancePaymentDetails = (
  queryParams?: GetFinancePaymentDetailsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedPaymentDetailList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinancePaymentDetails.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinancePaymentDetails.info = (
  queryParams?: GetFinancePaymentDetailsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinancePaymentDetails.key, queryParams] as QueryKey,
    fun: () =>
      getFinancePaymentDetails(
        queryParams,

        configOverride,
      ),
  };
};
useGetFinancePaymentDetails.prefetch = (
  client: QueryClient,
  queryParams?: GetFinancePaymentDetailsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedPaymentDetailList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinancePaymentDetails.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinancePaymentDetailsId = (
  /** A UUID string identifying this Payment Detail. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<PaymentDetail>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinancePaymentDetailsId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinancePaymentDetailsId.info = (
  /** A UUID string identifying this Payment Detail. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinancePaymentDetailsId.key, id] as QueryKey,
    fun: () =>
      getFinancePaymentDetailsId(
        id,

        configOverride,
      ),
  };
};
useGetFinancePaymentDetailsId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this Payment Detail. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<PaymentDetail>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinancePaymentDetailsId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinancePaymentInstrumentStates = (
  options?: SwaggerTypescriptUseQueryOptions<AccountType[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetFinancePaymentInstrumentStates.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinancePaymentInstrumentStates.info = (
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinancePaymentInstrumentStates.key] as QueryKey,
    fun: () => getFinancePaymentInstrumentStates(configOverride),
  };
};
useGetFinancePaymentInstrumentStates.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<AccountType[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetFinancePaymentInstrumentStates.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinancePlannedPayments = (
  queryParams?: GetFinancePlannedPaymentsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedPaymentPlan2TypeDiscoveryList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinancePlannedPayments.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinancePlannedPayments.info = (
  queryParams?: GetFinancePlannedPaymentsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinancePlannedPayments.key, queryParams] as QueryKey,
    fun: () =>
      getFinancePlannedPayments(
        queryParams,

        configOverride,
      ),
  };
};
useGetFinancePlannedPayments.prefetch = (
  client: QueryClient,
  queryParams?: GetFinancePlannedPaymentsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedPaymentPlan2TypeDiscoveryList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinancePlannedPayments.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinancePlannedPaymentsPermissions = (
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetFinancePlannedPaymentsPermissions.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinancePlannedPaymentsPermissions.info = (
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinancePlannedPaymentsPermissions.key] as QueryKey,
    fun: () => getFinancePlannedPaymentsPermissions(configOverride),
  };
};
useGetFinancePlannedPaymentsPermissions.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetFinancePlannedPaymentsPermissions.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinancePlannedRevenue = (
  queryParams?: GetFinancePlannedRevenueQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedPaymentPlan2TypeDiscoveryList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinancePlannedRevenue.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinancePlannedRevenue.info = (
  queryParams?: GetFinancePlannedRevenueQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinancePlannedRevenue.key, queryParams] as QueryKey,
    fun: () =>
      getFinancePlannedRevenue(
        queryParams,

        configOverride,
      ),
  };
};
useGetFinancePlannedRevenue.prefetch = (
  client: QueryClient,
  queryParams?: GetFinancePlannedRevenueQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedPaymentPlan2TypeDiscoveryList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinancePlannedRevenue.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinancePlannedRevenuePermissions = (
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetFinancePlannedRevenuePermissions.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinancePlannedRevenuePermissions.info = (
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinancePlannedRevenuePermissions.key] as QueryKey,
    fun: () => getFinancePlannedRevenuePermissions(configOverride),
  };
};
useGetFinancePlannedRevenuePermissions.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetFinancePlannedRevenuePermissions.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceRevenueBonds = (
  queryParams?: GetFinanceRevenueBondsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedRevenueBondListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceRevenueBonds.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceRevenueBonds.info = (
  queryParams?: GetFinanceRevenueBondsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinanceRevenueBonds.key, queryParams] as QueryKey,
    fun: () =>
      getFinanceRevenueBonds(
        queryParams,

        configOverride,
      ),
  };
};
useGetFinanceRevenueBonds.prefetch = (
  client: QueryClient,
  queryParams?: GetFinanceRevenueBondsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedRevenueBondListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceRevenueBonds.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceRevenueBondsCounter__slug = (
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<RevenueBond>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceRevenueBondsCounter__slug.info(
    counter__slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceRevenueBondsCounter__slug.info = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinanceRevenueBondsCounter__slug.key, counter__slug] as QueryKey,
    fun: () =>
      getFinanceRevenueBondsCounter__slug(
        counter__slug,

        configOverride,
      ),
  };
};
useGetFinanceRevenueBondsCounter__slug.prefetch = (
  client: QueryClient,
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<RevenueBond>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceRevenueBondsCounter__slug.info(
    counter__slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceRevenueBondsCounter__slugHistory = (
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<RevenueBond>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceRevenueBondsCounter__slugHistory.info(
    counter__slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceRevenueBondsCounter__slugHistory.info = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [
      getFinanceRevenueBondsCounter__slugHistory.key,
      counter__slug,
    ] as QueryKey,
    fun: () =>
      getFinanceRevenueBondsCounter__slugHistory(
        counter__slug,

        configOverride,
      ),
  };
};
useGetFinanceRevenueBondsCounter__slugHistory.prefetch = (
  client: QueryClient,
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<RevenueBond>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceRevenueBondsCounter__slugHistory.info(
    counter__slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceRevenueBondsPermissions = (
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetFinanceRevenueBondsPermissions.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceRevenueBondsPermissions.info = (
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinanceRevenueBondsPermissions.key] as QueryKey,
    fun: () => getFinanceRevenueBondsPermissions(configOverride),
  };
};
useGetFinanceRevenueBondsPermissions.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetFinanceRevenueBondsPermissions.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceRevenueCheques = (
  queryParams?: GetFinanceRevenueChequesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedRevenueChequeListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceRevenueCheques.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceRevenueCheques.info = (
  queryParams?: GetFinanceRevenueChequesQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinanceRevenueCheques.key, queryParams] as QueryKey,
    fun: () =>
      getFinanceRevenueCheques(
        queryParams,

        configOverride,
      ),
  };
};
useGetFinanceRevenueCheques.prefetch = (
  client: QueryClient,
  queryParams?: GetFinanceRevenueChequesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedRevenueChequeListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceRevenueCheques.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceRevenueChequesCounter__slug = (
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<RevenueCheque>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceRevenueChequesCounter__slug.info(
    counter__slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceRevenueChequesCounter__slug.info = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinanceRevenueChequesCounter__slug.key, counter__slug] as QueryKey,
    fun: () =>
      getFinanceRevenueChequesCounter__slug(
        counter__slug,

        configOverride,
      ),
  };
};
useGetFinanceRevenueChequesCounter__slug.prefetch = (
  client: QueryClient,
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<RevenueCheque>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceRevenueChequesCounter__slug.info(
    counter__slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceRevenueChequesCounter__slugHistory = (
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<RevenueCheque>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceRevenueChequesCounter__slugHistory.info(
    counter__slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceRevenueChequesCounter__slugHistory.info = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [
      getFinanceRevenueChequesCounter__slugHistory.key,
      counter__slug,
    ] as QueryKey,
    fun: () =>
      getFinanceRevenueChequesCounter__slugHistory(
        counter__slug,

        configOverride,
      ),
  };
};
useGetFinanceRevenueChequesCounter__slugHistory.prefetch = (
  client: QueryClient,
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<RevenueCheque>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceRevenueChequesCounter__slugHistory.info(
    counter__slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceRevenueChequesPermissions = (
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetFinanceRevenueChequesPermissions.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceRevenueChequesPermissions.info = (
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinanceRevenueChequesPermissions.key] as QueryKey,
    fun: () => getFinanceRevenueChequesPermissions(configOverride),
  };
};
useGetFinanceRevenueChequesPermissions.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetFinanceRevenueChequesPermissions.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceRevenueDetails = (
  queryParams?: GetFinanceRevenueDetailsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedRevenueDetailList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceRevenueDetails.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceRevenueDetails.info = (
  queryParams?: GetFinanceRevenueDetailsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinanceRevenueDetails.key, queryParams] as QueryKey,
    fun: () =>
      getFinanceRevenueDetails(
        queryParams,

        configOverride,
      ),
  };
};
useGetFinanceRevenueDetails.prefetch = (
  client: QueryClient,
  queryParams?: GetFinanceRevenueDetailsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedRevenueDetailList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceRevenueDetails.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceRevenueDetailsId = (
  /** A UUID string identifying this Revenue Detail. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<RevenueDetail>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceRevenueDetailsId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceRevenueDetailsId.info = (
  /** A UUID string identifying this Revenue Detail. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinanceRevenueDetailsId.key, id] as QueryKey,
    fun: () =>
      getFinanceRevenueDetailsId(
        id,

        configOverride,
      ),
  };
};
useGetFinanceRevenueDetailsId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this Revenue Detail. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<RevenueDetail>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceRevenueDetailsId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceSlips = (
  queryParams?: GetFinanceSlipsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedSlipList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceSlips.info(queryParams, configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceSlips.info = (
  queryParams?: GetFinanceSlipsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinanceSlips.key, queryParams] as QueryKey,
    fun: () =>
      getFinanceSlips(
        queryParams,

        configOverride,
      ),
  };
};
useGetFinanceSlips.prefetch = (
  client: QueryClient,
  queryParams?: GetFinanceSlipsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedSlipList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceSlips.info(queryParams, configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceSlipsId = (
  /** A UUID string identifying this slip. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Slip>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceSlipsId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceSlipsId.info = (
  /** A UUID string identifying this slip. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinanceSlipsId.key, id] as QueryKey,
    fun: () =>
      getFinanceSlipsId(
        id,

        configOverride,
      ),
  };
};
useGetFinanceSlipsId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this slip. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Slip>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceSlipsId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceSupplierAccountTypes = (
  options?: SwaggerTypescriptUseQueryOptions<AccountType[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceSupplierAccountTypes.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceSupplierAccountTypes.info = (
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinanceSupplierAccountTypes.key] as QueryKey,
    fun: () => getFinanceSupplierAccountTypes(configOverride),
  };
};
useGetFinanceSupplierAccountTypes.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<AccountType[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceSupplierAccountTypes.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceSupplierAccounts = (
  queryParams?: GetFinanceSupplierAccountsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedSupplierAccountListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceSupplierAccounts.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceSupplierAccounts.info = (
  queryParams?: GetFinanceSupplierAccountsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinanceSupplierAccounts.key, queryParams] as QueryKey,
    fun: () =>
      getFinanceSupplierAccounts(
        queryParams,

        configOverride,
      ),
  };
};
useGetFinanceSupplierAccounts.prefetch = (
  client: QueryClient,
  queryParams?: GetFinanceSupplierAccountsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedSupplierAccountListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceSupplierAccounts.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceSupplierAccountsId = (
  /** A UUID string identifying this supplier account. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<SupplierAccount>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceSupplierAccountsId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceSupplierAccountsId.info = (
  /** A UUID string identifying this supplier account. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinanceSupplierAccountsId.key, id] as QueryKey,
    fun: () =>
      getFinanceSupplierAccountsId(
        id,

        configOverride,
      ),
  };
};
useGetFinanceSupplierAccountsId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this supplier account. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<SupplierAccount>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceSupplierAccountsId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceTxns = (
  queryParams?: GetFinanceTxnsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedTransactionList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceTxns.info(queryParams, configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceTxns.info = (
  queryParams?: GetFinanceTxnsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinanceTxns.key, queryParams] as QueryKey,
    fun: () =>
      getFinanceTxns(
        queryParams,

        configOverride,
      ),
  };
};
useGetFinanceTxns.prefetch = (
  client: QueryClient,
  queryParams?: GetFinanceTxnsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedTransactionList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceTxns.info(queryParams, configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceTxnsExport = (
  queryParams?: GetFinanceTxnsExportQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<string>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceTxnsExport.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceTxnsExport.info = (
  queryParams?: GetFinanceTxnsExportQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinanceTxnsExport.key, queryParams] as QueryKey,
    fun: () =>
      getFinanceTxnsExport(
        queryParams,

        configOverride,
      ),
  };
};
useGetFinanceTxnsExport.prefetch = (
  client: QueryClient,
  queryParams?: GetFinanceTxnsExportQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<string>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceTxnsExport.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetFinanceTxnsId = (
  /** A UUID string identifying this transaction. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Transaction>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceTxnsId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetFinanceTxnsId.info = (
  /** A UUID string identifying this transaction. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getFinanceTxnsId.key, id] as QueryKey,
    fun: () =>
      getFinanceTxnsId(
        id,

        configOverride,
      ),
  };
};
useGetFinanceTxnsId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this transaction. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Transaction>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetFinanceTxnsId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetHrCrews = (
  queryParams?: GetHrCrewsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedCrewListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrCrews.info(queryParams, configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetHrCrews.info = (
  queryParams?: GetHrCrewsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getHrCrews.key, queryParams] as QueryKey,
    fun: () =>
      getHrCrews(
        queryParams,

        configOverride,
      ),
  };
};
useGetHrCrews.prefetch = (
  client: QueryClient,
  queryParams?: GetHrCrewsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedCrewListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrCrews.info(queryParams, configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetHrCrewsId = (
  /** A UUID string identifying this Crew. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Crew>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrCrewsId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetHrCrewsId.info = (
  /** A UUID string identifying this Crew. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getHrCrewsId.key, id] as QueryKey,
    fun: () =>
      getHrCrewsId(
        id,

        configOverride,
      ),
  };
};
useGetHrCrewsId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this Crew. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Crew>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrCrewsId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetHrCrewsIdHistory = (
  /** A UUID string identifying this Crew. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Crew>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrCrewsIdHistory.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetHrCrewsIdHistory.info = (
  /** A UUID string identifying this Crew. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getHrCrewsIdHistory.key, id] as QueryKey,
    fun: () =>
      getHrCrewsIdHistory(
        id,

        configOverride,
      ),
  };
};
useGetHrCrewsIdHistory.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this Crew. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Crew>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrCrewsIdHistory.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetHrCrewsPermissions = (
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrCrewsPermissions.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetHrCrewsPermissions.info = (configOverride?: AxiosRequestConfig) => {
  return {
    key: [getHrCrewsPermissions.key] as QueryKey,
    fun: () => getHrCrewsPermissions(configOverride),
  };
};
useGetHrCrewsPermissions.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrCrewsPermissions.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetHrDepartments = (
  queryParams?: GetHrDepartmentsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<MainDepartment[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrDepartments.info(queryParams, configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetHrDepartments.info = (
  queryParams?: GetHrDepartmentsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getHrDepartments.key, queryParams] as QueryKey,
    fun: () =>
      getHrDepartments(
        queryParams,

        configOverride,
      ),
  };
};
useGetHrDepartments.prefetch = (
  client: QueryClient,
  queryParams?: GetHrDepartmentsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<MainDepartment[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrDepartments.info(queryParams, configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetHrDepartmentsId = (
  /** A UUID string identifying this Main Department. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<MainDepartment>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrDepartmentsId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetHrDepartmentsId.info = (
  /** A UUID string identifying this Main Department. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getHrDepartmentsId.key, id] as QueryKey,
    fun: () =>
      getHrDepartmentsId(
        id,

        configOverride,
      ),
  };
};
useGetHrDepartmentsId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this Main Department. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<MainDepartment>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrDepartmentsId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetHrLocations = (
  options?: SwaggerTypescriptUseQueryOptions<LocationParameter[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrLocations.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetHrLocations.info = (configOverride?: AxiosRequestConfig) => {
  return {
    key: [getHrLocations.key] as QueryKey,
    fun: () => getHrLocations(configOverride),
  };
};
useGetHrLocations.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<LocationParameter[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrLocations.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetHrLocationsId = (
  /** A UUID string identifying this Location. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<LocationParameter>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrLocationsId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetHrLocationsId.info = (
  /** A UUID string identifying this Location. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getHrLocationsId.key, id] as QueryKey,
    fun: () =>
      getHrLocationsId(
        id,

        configOverride,
      ),
  };
};
useGetHrLocationsId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this Location. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<LocationParameter>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrLocationsId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetHrPersonnel = (
  queryParams?: GetHrPersonnelQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedPersonListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrPersonnel.info(queryParams, configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetHrPersonnel.info = (
  queryParams?: GetHrPersonnelQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getHrPersonnel.key, queryParams] as QueryKey,
    fun: () =>
      getHrPersonnel(
        queryParams,

        configOverride,
      ),
  };
};
useGetHrPersonnel.prefetch = (
  client: QueryClient,
  queryParams?: GetHrPersonnelQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedPersonListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrPersonnel.info(queryParams, configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetHrPersonnelId = (
  /** A UUID string identifying this Person. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Person>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrPersonnelId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetHrPersonnelId.info = (
  /** A UUID string identifying this Person. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getHrPersonnelId.key, id] as QueryKey,
    fun: () =>
      getHrPersonnelId(
        id,

        configOverride,
      ),
  };
};
useGetHrPersonnelId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this Person. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Person>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrPersonnelId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetHrPersonnelIdHistory = (
  /** A UUID string identifying this Person. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Person>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrPersonnelIdHistory.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetHrPersonnelIdHistory.info = (
  /** A UUID string identifying this Person. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getHrPersonnelIdHistory.key, id] as QueryKey,
    fun: () =>
      getHrPersonnelIdHistory(
        id,

        configOverride,
      ),
  };
};
useGetHrPersonnelIdHistory.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this Person. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Person>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrPersonnelIdHistory.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetHrPersonnelPermissions = (
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrPersonnelPermissions.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetHrPersonnelPermissions.info = (configOverride?: AxiosRequestConfig) => {
  return {
    key: [getHrPersonnelPermissions.key] as QueryKey,
    fun: () => getHrPersonnelPermissions(configOverride),
  };
};
useGetHrPersonnelPermissions.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrPersonnelPermissions.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetHrPositions = (
  queryParams?: GetHrPositionsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<MainPosition[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrPositions.info(queryParams, configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetHrPositions.info = (
  queryParams?: GetHrPositionsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getHrPositions.key, queryParams] as QueryKey,
    fun: () =>
      getHrPositions(
        queryParams,

        configOverride,
      ),
  };
};
useGetHrPositions.prefetch = (
  client: QueryClient,
  queryParams?: GetHrPositionsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<MainPosition[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrPositions.info(queryParams, configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetHrPositionsId = (
  /** A UUID string identifying this Main Position. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<MainPosition>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrPositionsId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetHrPositionsId.info = (
  /** A UUID string identifying this Main Position. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getHrPositionsId.key, id] as QueryKey,
    fun: () =>
      getHrPositionsId(
        id,

        configOverride,
      ),
  };
};
useGetHrPositionsId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this Main Position. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<MainPosition>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrPositionsId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetHrProfessions = (
  options?: SwaggerTypescriptUseQueryOptions<Profession[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrProfessions.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetHrProfessions.info = (configOverride?: AxiosRequestConfig) => {
  return {
    key: [getHrProfessions.key] as QueryKey,
    fun: () => getHrProfessions(configOverride),
  };
};
useGetHrProfessions.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Profession[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrProfessions.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetHrProfessionsId = (
  /** A UUID string identifying this Profession. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Profession>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrProfessionsId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetHrProfessionsId.info = (
  /** A UUID string identifying this Profession. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getHrProfessionsId.key, id] as QueryKey,
    fun: () =>
      getHrProfessionsId(
        id,

        configOverride,
      ),
  };
};
useGetHrProfessionsId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this Profession. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Profession>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrProfessionsId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetHrQuitReasons = (
  options?: SwaggerTypescriptUseQueryOptions<QuitReason[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrQuitReasons.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetHrQuitReasons.info = (configOverride?: AxiosRequestConfig) => {
  return {
    key: [getHrQuitReasons.key] as QueryKey,
    fun: () => getHrQuitReasons(configOverride),
  };
};
useGetHrQuitReasons.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<QuitReason[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrQuitReasons.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetHrQuitReasonsId = (
  /** A UUID string identifying this Quit Reason. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<QuitReason>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrQuitReasonsId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetHrQuitReasonsId.info = (
  /** A UUID string identifying this Quit Reason. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getHrQuitReasonsId.key, id] as QueryKey,
    fun: () =>
      getHrQuitReasonsId(
        id,

        configOverride,
      ),
  };
};
useGetHrQuitReasonsId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this Quit Reason. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<QuitReason>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrQuitReasonsId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetHrQuitRecords = (
  options?: SwaggerTypescriptUseQueryOptions<QuitRecord[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrQuitRecords.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetHrQuitRecords.info = (configOverride?: AxiosRequestConfig) => {
  return {
    key: [getHrQuitRecords.key] as QueryKey,
    fun: () => getHrQuitRecords(configOverride),
  };
};
useGetHrQuitRecords.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<QuitRecord[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrQuitRecords.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetHrQuitRecordsId = (
  /** A UUID string identifying this Quit Record. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<QuitRecord>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrQuitRecordsId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetHrQuitRecordsId.info = (
  /** A UUID string identifying this Quit Record. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getHrQuitRecordsId.key, id] as QueryKey,
    fun: () =>
      getHrQuitRecordsId(
        id,

        configOverride,
      ),
  };
};
useGetHrQuitRecordsId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this Quit Record. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<QuitRecord>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrQuitRecordsId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetHrSalaries = (
  queryParams?: GetHrSalariesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedSalaryList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrSalaries.info(queryParams, configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetHrSalaries.info = (
  queryParams?: GetHrSalariesQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getHrSalaries.key, queryParams] as QueryKey,
    fun: () =>
      getHrSalaries(
        queryParams,

        configOverride,
      ),
  };
};
useGetHrSalaries.prefetch = (
  client: QueryClient,
  queryParams?: GetHrSalariesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedSalaryList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrSalaries.info(queryParams, configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetHrSalariesId = (
  /** A UUID string identifying this Salary. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Salary>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrSalariesId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetHrSalariesId.info = (
  /** A UUID string identifying this Salary. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getHrSalariesId.key, id] as QueryKey,
    fun: () =>
      getHrSalariesId(
        id,

        configOverride,
      ),
  };
};
useGetHrSalariesId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this Salary. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Salary>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrSalariesId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetHrSalariesIdHistory = (
  /** A UUID string identifying this Salary. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Salary>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrSalariesIdHistory.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetHrSalariesIdHistory.info = (
  /** A UUID string identifying this Salary. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getHrSalariesIdHistory.key, id] as QueryKey,
    fun: () =>
      getHrSalariesIdHistory(
        id,

        configOverride,
      ),
  };
};
useGetHrSalariesIdHistory.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this Salary. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Salary>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrSalariesIdHistory.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetHrSalariesPermissions = (
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrSalariesPermissions.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetHrSalariesPermissions.info = (configOverride?: AxiosRequestConfig) => {
  return {
    key: [getHrSalariesPermissions.key] as QueryKey,
    fun: () => getHrSalariesPermissions(configOverride),
  };
};
useGetHrSalariesPermissions.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrSalariesPermissions.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetHrSalaryPermissions = (
  queryParams?: GetHrSalaryPermissionsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<ProjectSalaryPermission[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrSalaryPermissions.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetHrSalaryPermissions.info = (
  queryParams?: GetHrSalaryPermissionsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getHrSalaryPermissions.key, queryParams] as QueryKey,
    fun: () =>
      getHrSalaryPermissions(
        queryParams,

        configOverride,
      ),
  };
};
useGetHrSalaryPermissions.prefetch = (
  client: QueryClient,
  queryParams?: GetHrSalaryPermissionsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<ProjectSalaryPermission[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrSalaryPermissions.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetHrSalaryPermissionsId = (
  /** A unique integer value identifying this Project Salary Permission. */
  id: number,
  options?: SwaggerTypescriptUseQueryOptions<ProjectSalaryPermission>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrSalaryPermissionsId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetHrSalaryPermissionsId.info = (
  /** A unique integer value identifying this Project Salary Permission. */
  id: number,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getHrSalaryPermissionsId.key, id] as QueryKey,
    fun: () =>
      getHrSalaryPermissionsId(
        id,

        configOverride,
      ),
  };
};
useGetHrSalaryPermissionsId.prefetch = (
  client: QueryClient,

  /** A unique integer value identifying this Project Salary Permission. */
  id: number,
  options?: SwaggerTypescriptUseQueryOptions<ProjectSalaryPermission>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetHrSalaryPermissionsId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementAdvancePayments = (
  options?: SwaggerTypescriptUseQueryOptions<OrderAdvancePayment[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementAdvancePayments.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementAdvancePayments.info = (
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProcurementAdvancePayments.key] as QueryKey,
    fun: () => getProcurementAdvancePayments(configOverride),
  };
};
useGetProcurementAdvancePayments.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<OrderAdvancePayment[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementAdvancePayments.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementAdvancePaymentsId = (
  /** A UUID string identifying this order advance payment. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<OrderAdvancePayment>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementAdvancePaymentsId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementAdvancePaymentsId.info = (
  /** A UUID string identifying this order advance payment. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProcurementAdvancePaymentsId.key, id] as QueryKey,
    fun: () =>
      getProcurementAdvancePaymentsId(
        id,

        configOverride,
      ),
  };
};
useGetProcurementAdvancePaymentsId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this order advance payment. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<OrderAdvancePayment>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementAdvancePaymentsId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementAdvancePaymentsPermissions = (
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetProcurementAdvancePaymentsPermissions.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementAdvancePaymentsPermissions.info = (
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProcurementAdvancePaymentsPermissions.key] as QueryKey,
    fun: () => getProcurementAdvancePaymentsPermissions(configOverride),
  };
};
useGetProcurementAdvancePaymentsPermissions.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetProcurementAdvancePaymentsPermissions.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementApprovedOrderItems = (
  queryParams?: GetProcurementApprovedOrderItemsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedApprovedOrderItemList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementApprovedOrderItems.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementApprovedOrderItems.info = (
  queryParams?: GetProcurementApprovedOrderItemsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProcurementApprovedOrderItems.key, queryParams] as QueryKey,
    fun: () =>
      getProcurementApprovedOrderItems(
        queryParams,

        configOverride,
      ),
  };
};
useGetProcurementApprovedOrderItems.prefetch = (
  client: QueryClient,
  queryParams?: GetProcurementApprovedOrderItemsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedApprovedOrderItemList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementApprovedOrderItems.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementApprovedOrderItemsPermissions = (
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetProcurementApprovedOrderItemsPermissions.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementApprovedOrderItemsPermissions.info = (
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProcurementApprovedOrderItemsPermissions.key] as QueryKey,
    fun: () => getProcurementApprovedOrderItemsPermissions(configOverride),
  };
};
useGetProcurementApprovedOrderItemsPermissions.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetProcurementApprovedOrderItemsPermissions.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementApprovedRequestItems = (
  queryParams?: GetProcurementApprovedRequestItemsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedApprovedRequestItemList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementApprovedRequestItems.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementApprovedRequestItems.info = (
  queryParams?: GetProcurementApprovedRequestItemsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProcurementApprovedRequestItems.key, queryParams] as QueryKey,
    fun: () =>
      getProcurementApprovedRequestItems(
        queryParams,

        configOverride,
      ),
  };
};
useGetProcurementApprovedRequestItems.prefetch = (
  client: QueryClient,
  queryParams?: GetProcurementApprovedRequestItemsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedApprovedRequestItemList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementApprovedRequestItems.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementApprovedRequestItemsPermissions = (
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetProcurementApprovedRequestItemsPermissions.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementApprovedRequestItemsPermissions.info = (
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProcurementApprovedRequestItemsPermissions.key] as QueryKey,
    fun: () => getProcurementApprovedRequestItemsPermissions(configOverride),
  };
};
useGetProcurementApprovedRequestItemsPermissions.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetProcurementApprovedRequestItemsPermissions.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementInvoiceAdvanceBalanceCounter__slug = (
  counter__slug: string,
  queryParams: GetProcurementInvoiceAdvanceBalanceCounter__slugQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<InvoiceAdvanceBalance>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementInvoiceAdvanceBalanceCounter__slug.info(
    counter__slug,

    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementInvoiceAdvanceBalanceCounter__slug.info = (
  counter__slug: string,
  queryParams: GetProcurementInvoiceAdvanceBalanceCounter__slugQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [
      getProcurementInvoiceAdvanceBalanceCounter__slug.key,
      counter__slug,

      queryParams,
    ] as QueryKey,
    fun: () =>
      getProcurementInvoiceAdvanceBalanceCounter__slug(
        counter__slug,

        queryParams,

        configOverride,
      ),
  };
};
useGetProcurementInvoiceAdvanceBalanceCounter__slug.prefetch = (
  client: QueryClient,
  counter__slug: string,
  queryParams: GetProcurementInvoiceAdvanceBalanceCounter__slugQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<InvoiceAdvanceBalance>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementInvoiceAdvanceBalanceCounter__slug.info(
    counter__slug,

    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementInvoiceItems = (
  queryParams?: GetProcurementInvoiceItemsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<InvoiceItemList[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementInvoiceItems.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementInvoiceItems.info = (
  queryParams?: GetProcurementInvoiceItemsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProcurementInvoiceItems.key, queryParams] as QueryKey,
    fun: () =>
      getProcurementInvoiceItems(
        queryParams,

        configOverride,
      ),
  };
};
useGetProcurementInvoiceItems.prefetch = (
  client: QueryClient,
  queryParams?: GetProcurementInvoiceItemsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<InvoiceItemList[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementInvoiceItems.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementInvoiceItemsPermissions = (
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetProcurementInvoiceItemsPermissions.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementInvoiceItemsPermissions.info = (
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProcurementInvoiceItemsPermissions.key] as QueryKey,
    fun: () => getProcurementInvoiceItemsPermissions(configOverride),
  };
};
useGetProcurementInvoiceItemsPermissions.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetProcurementInvoiceItemsPermissions.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementInvoices = (
  queryParams?: GetProcurementInvoicesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedInvoiceListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementInvoices.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementInvoices.info = (
  queryParams?: GetProcurementInvoicesQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProcurementInvoices.key, queryParams] as QueryKey,
    fun: () =>
      getProcurementInvoices(
        queryParams,

        configOverride,
      ),
  };
};
useGetProcurementInvoices.prefetch = (
  client: QueryClient,
  queryParams?: GetProcurementInvoicesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedInvoiceListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementInvoices.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementInvoicesCounter__slug = (
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Invoice>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementInvoicesCounter__slug.info(
    counter__slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementInvoicesCounter__slug.info = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProcurementInvoicesCounter__slug.key, counter__slug] as QueryKey,
    fun: () =>
      getProcurementInvoicesCounter__slug(
        counter__slug,

        configOverride,
      ),
  };
};
useGetProcurementInvoicesCounter__slug.prefetch = (
  client: QueryClient,
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Invoice>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementInvoicesCounter__slug.info(
    counter__slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementInvoicesCounter__slugApprovalHistory = (
  counter__slug: string,
  queryParams?: GetProcurementInvoicesCounter__slugApprovalHistoryQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedApprovalHistoryList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetProcurementInvoicesCounter__slugApprovalHistory.info(
      counter__slug,

      queryParams,
      configOverride,
    );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementInvoicesCounter__slugApprovalHistory.info = (
  counter__slug: string,
  queryParams?: GetProcurementInvoicesCounter__slugApprovalHistoryQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [
      getProcurementInvoicesCounter__slugApprovalHistory.key,
      counter__slug,

      queryParams,
    ] as QueryKey,
    fun: () =>
      getProcurementInvoicesCounter__slugApprovalHistory(
        counter__slug,

        queryParams,

        configOverride,
      ),
  };
};
useGetProcurementInvoicesCounter__slugApprovalHistory.prefetch = (
  client: QueryClient,
  counter__slug: string,
  queryParams?: GetProcurementInvoicesCounter__slugApprovalHistoryQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedApprovalHistoryList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetProcurementInvoicesCounter__slugApprovalHistory.info(
      counter__slug,

      queryParams,
      configOverride,
    );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementInvoicesCounter__slugAttachments = (
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Invoice>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementInvoicesCounter__slugAttachments.info(
    counter__slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementInvoicesCounter__slugAttachments.info = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [
      getProcurementInvoicesCounter__slugAttachments.key,
      counter__slug,
    ] as QueryKey,
    fun: () =>
      getProcurementInvoicesCounter__slugAttachments(
        counter__slug,

        configOverride,
      ),
  };
};
useGetProcurementInvoicesCounter__slugAttachments.prefetch = (
  client: QueryClient,
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Invoice>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementInvoicesCounter__slugAttachments.info(
    counter__slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementInvoicesCounter__slugHistory = (
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Invoice>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementInvoicesCounter__slugHistory.info(
    counter__slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementInvoicesCounter__slugHistory.info = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [
      getProcurementInvoicesCounter__slugHistory.key,
      counter__slug,
    ] as QueryKey,
    fun: () =>
      getProcurementInvoicesCounter__slugHistory(
        counter__slug,

        configOverride,
      ),
  };
};
useGetProcurementInvoicesCounter__slugHistory.prefetch = (
  client: QueryClient,
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Invoice>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementInvoicesCounter__slugHistory.info(
    counter__slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementInvoicesPermissions = (
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetProcurementInvoicesPermissions.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementInvoicesPermissions.info = (
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProcurementInvoicesPermissions.key] as QueryKey,
    fun: () => getProcurementInvoicesPermissions(configOverride),
  };
};
useGetProcurementInvoicesPermissions.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetProcurementInvoicesPermissions.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementInvoicesStates = (
  queryParams?: GetProcurementInvoicesStatesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<State[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementInvoicesStates.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementInvoicesStates.info = (
  queryParams?: GetProcurementInvoicesStatesQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProcurementInvoicesStates.key, queryParams] as QueryKey,
    fun: () =>
      getProcurementInvoicesStates(
        queryParams,

        configOverride,
      ),
  };
};
useGetProcurementInvoicesStates.prefetch = (
  client: QueryClient,
  queryParams?: GetProcurementInvoicesStatesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<State[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementInvoicesStates.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementOrders = (
  queryParams?: GetProcurementOrdersQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedOrderListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementOrders.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementOrders.info = (
  queryParams?: GetProcurementOrdersQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProcurementOrders.key, queryParams] as QueryKey,
    fun: () =>
      getProcurementOrders(
        queryParams,

        configOverride,
      ),
  };
};
useGetProcurementOrders.prefetch = (
  client: QueryClient,
  queryParams?: GetProcurementOrdersQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedOrderListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementOrders.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementOrdersCounter__slug = (
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Order>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementOrdersCounter__slug.info(
    counter__slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementOrdersCounter__slug.info = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProcurementOrdersCounter__slug.key, counter__slug] as QueryKey,
    fun: () =>
      getProcurementOrdersCounter__slug(
        counter__slug,

        configOverride,
      ),
  };
};
useGetProcurementOrdersCounter__slug.prefetch = (
  client: QueryClient,
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Order>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementOrdersCounter__slug.info(
    counter__slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementOrdersCounter__slugApprovalHistory = (
  counter__slug: string,
  queryParams?: GetProcurementOrdersCounter__slugApprovalHistoryQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedApprovalHistoryList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementOrdersCounter__slugApprovalHistory.info(
    counter__slug,

    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementOrdersCounter__slugApprovalHistory.info = (
  counter__slug: string,
  queryParams?: GetProcurementOrdersCounter__slugApprovalHistoryQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [
      getProcurementOrdersCounter__slugApprovalHistory.key,
      counter__slug,

      queryParams,
    ] as QueryKey,
    fun: () =>
      getProcurementOrdersCounter__slugApprovalHistory(
        counter__slug,

        queryParams,

        configOverride,
      ),
  };
};
useGetProcurementOrdersCounter__slugApprovalHistory.prefetch = (
  client: QueryClient,
  counter__slug: string,
  queryParams?: GetProcurementOrdersCounter__slugApprovalHistoryQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedApprovalHistoryList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementOrdersCounter__slugApprovalHistory.info(
    counter__slug,

    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementOrdersCounter__slugAttachments = (
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Order>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementOrdersCounter__slugAttachments.info(
    counter__slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementOrdersCounter__slugAttachments.info = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [
      getProcurementOrdersCounter__slugAttachments.key,
      counter__slug,
    ] as QueryKey,
    fun: () =>
      getProcurementOrdersCounter__slugAttachments(
        counter__slug,

        configOverride,
      ),
  };
};
useGetProcurementOrdersCounter__slugAttachments.prefetch = (
  client: QueryClient,
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Order>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementOrdersCounter__slugAttachments.info(
    counter__slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementOrdersCounter__slugHistory = (
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Order>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementOrdersCounter__slugHistory.info(
    counter__slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementOrdersCounter__slugHistory.info = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [
      getProcurementOrdersCounter__slugHistory.key,
      counter__slug,
    ] as QueryKey,
    fun: () =>
      getProcurementOrdersCounter__slugHistory(
        counter__slug,

        configOverride,
      ),
  };
};
useGetProcurementOrdersCounter__slugHistory.prefetch = (
  client: QueryClient,
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Order>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementOrdersCounter__slugHistory.info(
    counter__slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementOrdersPermissions = (
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementOrdersPermissions.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementOrdersPermissions.info = (
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProcurementOrdersPermissions.key] as QueryKey,
    fun: () => getProcurementOrdersPermissions(configOverride),
  };
};
useGetProcurementOrdersPermissions.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementOrdersPermissions.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementOrdersStates = (
  queryParams?: GetProcurementOrdersStatesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<State[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementOrdersStates.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementOrdersStates.info = (
  queryParams?: GetProcurementOrdersStatesQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProcurementOrdersStates.key, queryParams] as QueryKey,
    fun: () =>
      getProcurementOrdersStates(
        queryParams,

        configOverride,
      ),
  };
};
useGetProcurementOrdersStates.prefetch = (
  client: QueryClient,
  queryParams?: GetProcurementOrdersStatesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<State[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementOrdersStates.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementRequestTypes = (
  queryParams?: GetProcurementRequestTypesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<RequestType[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementRequestTypes.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementRequestTypes.info = (
  queryParams?: GetProcurementRequestTypesQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProcurementRequestTypes.key, queryParams] as QueryKey,
    fun: () =>
      getProcurementRequestTypes(
        queryParams,

        configOverride,
      ),
  };
};
useGetProcurementRequestTypes.prefetch = (
  client: QueryClient,
  queryParams?: GetProcurementRequestTypesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<RequestType[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementRequestTypes.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementRequestTypesId = (
  /** A UUID string identifying this request type. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<RequestType>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementRequestTypesId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementRequestTypesId.info = (
  /** A UUID string identifying this request type. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProcurementRequestTypesId.key, id] as QueryKey,
    fun: () =>
      getProcurementRequestTypesId(
        id,

        configOverride,
      ),
  };
};
useGetProcurementRequestTypesId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this request type. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<RequestType>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementRequestTypesId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementRequests = (
  queryParams?: GetProcurementRequestsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedRequestListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementRequests.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementRequests.info = (
  queryParams?: GetProcurementRequestsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProcurementRequests.key, queryParams] as QueryKey,
    fun: () =>
      getProcurementRequests(
        queryParams,

        configOverride,
      ),
  };
};
useGetProcurementRequests.prefetch = (
  client: QueryClient,
  queryParams?: GetProcurementRequestsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedRequestListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementRequests.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementRequestsCounter__slug = (
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Request>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementRequestsCounter__slug.info(
    counter__slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementRequestsCounter__slug.info = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProcurementRequestsCounter__slug.key, counter__slug] as QueryKey,
    fun: () =>
      getProcurementRequestsCounter__slug(
        counter__slug,

        configOverride,
      ),
  };
};
useGetProcurementRequestsCounter__slug.prefetch = (
  client: QueryClient,
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Request>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementRequestsCounter__slug.info(
    counter__slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementRequestsCounter__slugApprovalHistory = (
  counter__slug: string,
  queryParams?: GetProcurementRequestsCounter__slugApprovalHistoryQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedApprovalHistoryList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetProcurementRequestsCounter__slugApprovalHistory.info(
      counter__slug,

      queryParams,
      configOverride,
    );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementRequestsCounter__slugApprovalHistory.info = (
  counter__slug: string,
  queryParams?: GetProcurementRequestsCounter__slugApprovalHistoryQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [
      getProcurementRequestsCounter__slugApprovalHistory.key,
      counter__slug,

      queryParams,
    ] as QueryKey,
    fun: () =>
      getProcurementRequestsCounter__slugApprovalHistory(
        counter__slug,

        queryParams,

        configOverride,
      ),
  };
};
useGetProcurementRequestsCounter__slugApprovalHistory.prefetch = (
  client: QueryClient,
  counter__slug: string,
  queryParams?: GetProcurementRequestsCounter__slugApprovalHistoryQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedApprovalHistoryList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetProcurementRequestsCounter__slugApprovalHistory.info(
      counter__slug,

      queryParams,
      configOverride,
    );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementRequestsCounter__slugAttachments = (
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Request>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementRequestsCounter__slugAttachments.info(
    counter__slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementRequestsCounter__slugAttachments.info = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [
      getProcurementRequestsCounter__slugAttachments.key,
      counter__slug,
    ] as QueryKey,
    fun: () =>
      getProcurementRequestsCounter__slugAttachments(
        counter__slug,

        configOverride,
      ),
  };
};
useGetProcurementRequestsCounter__slugAttachments.prefetch = (
  client: QueryClient,
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Request>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementRequestsCounter__slugAttachments.info(
    counter__slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementRequestsCounter__slugHistory = (
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Request>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementRequestsCounter__slugHistory.info(
    counter__slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementRequestsCounter__slugHistory.info = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [
      getProcurementRequestsCounter__slugHistory.key,
      counter__slug,
    ] as QueryKey,
    fun: () =>
      getProcurementRequestsCounter__slugHistory(
        counter__slug,

        configOverride,
      ),
  };
};
useGetProcurementRequestsCounter__slugHistory.prefetch = (
  client: QueryClient,
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Request>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementRequestsCounter__slugHistory.info(
    counter__slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementRequestsPermissions = (
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetProcurementRequestsPermissions.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementRequestsPermissions.info = (
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProcurementRequestsPermissions.key] as QueryKey,
    fun: () => getProcurementRequestsPermissions(configOverride),
  };
};
useGetProcurementRequestsPermissions.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetProcurementRequestsPermissions.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementRequestsStates = (
  queryParams?: GetProcurementRequestsStatesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<State[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementRequestsStates.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementRequestsStates.info = (
  queryParams?: GetProcurementRequestsStatesQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProcurementRequestsStates.key, queryParams] as QueryKey,
    fun: () =>
      getProcurementRequestsStates(
        queryParams,

        configOverride,
      ),
  };
};
useGetProcurementRequestsStates.prefetch = (
  client: QueryClient,
  queryParams?: GetProcurementRequestsStatesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<State[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementRequestsStates.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementSpecialInvoiceItems = (
  queryParams?: GetProcurementSpecialInvoiceItemsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<SpecialInvoiceItemList[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementSpecialInvoiceItems.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementSpecialInvoiceItems.info = (
  queryParams?: GetProcurementSpecialInvoiceItemsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProcurementSpecialInvoiceItems.key, queryParams] as QueryKey,
    fun: () =>
      getProcurementSpecialInvoiceItems(
        queryParams,

        configOverride,
      ),
  };
};
useGetProcurementSpecialInvoiceItems.prefetch = (
  client: QueryClient,
  queryParams?: GetProcurementSpecialInvoiceItemsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<SpecialInvoiceItemList[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementSpecialInvoiceItems.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementSpecialInvoiceItemsPermissions = (
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetProcurementSpecialInvoiceItemsPermissions.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementSpecialInvoiceItemsPermissions.info = (
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProcurementSpecialInvoiceItemsPermissions.key] as QueryKey,
    fun: () => getProcurementSpecialInvoiceItemsPermissions(configOverride),
  };
};
useGetProcurementSpecialInvoiceItemsPermissions.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetProcurementSpecialInvoiceItemsPermissions.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementSpecialInvoiceTypes = (
  queryParams?: GetProcurementSpecialInvoiceTypesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<SpecialInvoiceType[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementSpecialInvoiceTypes.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementSpecialInvoiceTypes.info = (
  queryParams?: GetProcurementSpecialInvoiceTypesQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProcurementSpecialInvoiceTypes.key, queryParams] as QueryKey,
    fun: () =>
      getProcurementSpecialInvoiceTypes(
        queryParams,

        configOverride,
      ),
  };
};
useGetProcurementSpecialInvoiceTypes.prefetch = (
  client: QueryClient,
  queryParams?: GetProcurementSpecialInvoiceTypesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<SpecialInvoiceType[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementSpecialInvoiceTypes.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementSpecialInvoiceTypesId = (
  /** A UUID string identifying this special invoice type. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<SpecialInvoiceType>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementSpecialInvoiceTypesId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementSpecialInvoiceTypesId.info = (
  /** A UUID string identifying this special invoice type. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProcurementSpecialInvoiceTypesId.key, id] as QueryKey,
    fun: () =>
      getProcurementSpecialInvoiceTypesId(
        id,

        configOverride,
      ),
  };
};
useGetProcurementSpecialInvoiceTypesId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this special invoice type. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<SpecialInvoiceType>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementSpecialInvoiceTypesId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementSpecialInvoices = (
  queryParams?: GetProcurementSpecialInvoicesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedSpecialInvoiceListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementSpecialInvoices.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementSpecialInvoices.info = (
  queryParams?: GetProcurementSpecialInvoicesQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProcurementSpecialInvoices.key, queryParams] as QueryKey,
    fun: () =>
      getProcurementSpecialInvoices(
        queryParams,

        configOverride,
      ),
  };
};
useGetProcurementSpecialInvoices.prefetch = (
  client: QueryClient,
  queryParams?: GetProcurementSpecialInvoicesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedSpecialInvoiceListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementSpecialInvoices.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementSpecialInvoicesCounter__slug = (
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<SpecialInvoice>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementSpecialInvoicesCounter__slug.info(
    counter__slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementSpecialInvoicesCounter__slug.info = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [
      getProcurementSpecialInvoicesCounter__slug.key,
      counter__slug,
    ] as QueryKey,
    fun: () =>
      getProcurementSpecialInvoicesCounter__slug(
        counter__slug,

        configOverride,
      ),
  };
};
useGetProcurementSpecialInvoicesCounter__slug.prefetch = (
  client: QueryClient,
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<SpecialInvoice>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementSpecialInvoicesCounter__slug.info(
    counter__slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementSpecialInvoicesCounter__slugApprovalHistory = (
  counter__slug: string,
  queryParams?: GetProcurementSpecialInvoicesCounter__slugApprovalHistoryQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedApprovalHistoryList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetProcurementSpecialInvoicesCounter__slugApprovalHistory.info(
      counter__slug,

      queryParams,
      configOverride,
    );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementSpecialInvoicesCounter__slugApprovalHistory.info = (
  counter__slug: string,
  queryParams?: GetProcurementSpecialInvoicesCounter__slugApprovalHistoryQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [
      getProcurementSpecialInvoicesCounter__slugApprovalHistory.key,
      counter__slug,

      queryParams,
    ] as QueryKey,
    fun: () =>
      getProcurementSpecialInvoicesCounter__slugApprovalHistory(
        counter__slug,

        queryParams,

        configOverride,
      ),
  };
};
useGetProcurementSpecialInvoicesCounter__slugApprovalHistory.prefetch = (
  client: QueryClient,
  counter__slug: string,
  queryParams?: GetProcurementSpecialInvoicesCounter__slugApprovalHistoryQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedApprovalHistoryList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetProcurementSpecialInvoicesCounter__slugApprovalHistory.info(
      counter__slug,

      queryParams,
      configOverride,
    );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementSpecialInvoicesCounter__slugAttachments = (
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<SpecialInvoice>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetProcurementSpecialInvoicesCounter__slugAttachments.info(
      counter__slug,

      configOverride,
    );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementSpecialInvoicesCounter__slugAttachments.info = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [
      getProcurementSpecialInvoicesCounter__slugAttachments.key,
      counter__slug,
    ] as QueryKey,
    fun: () =>
      getProcurementSpecialInvoicesCounter__slugAttachments(
        counter__slug,

        configOverride,
      ),
  };
};
useGetProcurementSpecialInvoicesCounter__slugAttachments.prefetch = (
  client: QueryClient,
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<SpecialInvoice>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetProcurementSpecialInvoicesCounter__slugAttachments.info(
      counter__slug,

      configOverride,
    );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementSpecialInvoicesCounter__slugHistory = (
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<SpecialInvoice>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetProcurementSpecialInvoicesCounter__slugHistory.info(
      counter__slug,

      configOverride,
    );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementSpecialInvoicesCounter__slugHistory.info = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [
      getProcurementSpecialInvoicesCounter__slugHistory.key,
      counter__slug,
    ] as QueryKey,
    fun: () =>
      getProcurementSpecialInvoicesCounter__slugHistory(
        counter__slug,

        configOverride,
      ),
  };
};
useGetProcurementSpecialInvoicesCounter__slugHistory.prefetch = (
  client: QueryClient,
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<SpecialInvoice>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetProcurementSpecialInvoicesCounter__slugHistory.info(
      counter__slug,

      configOverride,
    );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementSpecialInvoicesPermissions = (
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetProcurementSpecialInvoicesPermissions.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementSpecialInvoicesPermissions.info = (
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProcurementSpecialInvoicesPermissions.key] as QueryKey,
    fun: () => getProcurementSpecialInvoicesPermissions(configOverride),
  };
};
useGetProcurementSpecialInvoicesPermissions.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetProcurementSpecialInvoicesPermissions.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProcurementSpecialInvoicesStates = (
  queryParams?: GetProcurementSpecialInvoicesStatesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<State[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementSpecialInvoicesStates.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProcurementSpecialInvoicesStates.info = (
  queryParams?: GetProcurementSpecialInvoicesStatesQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProcurementSpecialInvoicesStates.key, queryParams] as QueryKey,
    fun: () =>
      getProcurementSpecialInvoicesStates(
        queryParams,

        configOverride,
      ),
  };
};
useGetProcurementSpecialInvoicesStates.prefetch = (
  client: QueryClient,
  queryParams?: GetProcurementSpecialInvoicesStatesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<State[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProcurementSpecialInvoicesStates.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProfilesAvatar = (
  options?: SwaggerTypescriptUseQueryOptions<Avatar[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProfilesAvatar.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProfilesAvatar.info = (configOverride?: AxiosRequestConfig) => {
  return {
    key: [getProfilesAvatar.key] as QueryKey,
    fun: () => getProfilesAvatar(configOverride),
  };
};
useGetProfilesAvatar.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Avatar[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProfilesAvatar.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProfilesAvatarId = (
  /** A UUID string identifying this profile. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Avatar>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProfilesAvatarId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProfilesAvatarId.info = (
  /** A UUID string identifying this profile. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProfilesAvatarId.key, id] as QueryKey,
    fun: () =>
      getProfilesAvatarId(
        id,

        configOverride,
      ),
  };
};
useGetProfilesAvatarId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this profile. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Avatar>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProfilesAvatarId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProfilesUsers = (
  options?: SwaggerTypescriptUseQueryOptions<UserProfile[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProfilesUsers.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProfilesUsers.info = (configOverride?: AxiosRequestConfig) => {
  return {
    key: [getProfilesUsers.key] as QueryKey,
    fun: () => getProfilesUsers(configOverride),
  };
};
useGetProfilesUsers.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<UserProfile[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProfilesUsers.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProjectsAccountingtypes = (
  options?: SwaggerTypescriptUseQueryOptions<AccountingType[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsAccountingtypes.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProjectsAccountingtypes.info = (configOverride?: AxiosRequestConfig) => {
  return {
    key: [getProjectsAccountingtypes.key] as QueryKey,
    fun: () => getProjectsAccountingtypes(configOverride),
  };
};
useGetProjectsAccountingtypes.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<AccountingType[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsAccountingtypes.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProjectsAccountingtypesId = (
  /** A UUID string identifying this accounting type. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<AccountingType>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsAccountingtypesId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProjectsAccountingtypesId.info = (
  /** A UUID string identifying this accounting type. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProjectsAccountingtypesId.key, id] as QueryKey,
    fun: () =>
      getProjectsAccountingtypesId(
        id,

        configOverride,
      ),
  };
};
useGetProjectsAccountingtypesId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this accounting type. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<AccountingType>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsAccountingtypesId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProjectsCities = (
  queryParams?: GetProjectsCitiesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<City[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsCities.info(queryParams, configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProjectsCities.info = (
  queryParams?: GetProjectsCitiesQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProjectsCities.key, queryParams] as QueryKey,
    fun: () =>
      getProjectsCities(
        queryParams,

        configOverride,
      ),
  };
};
useGetProjectsCities.prefetch = (
  client: QueryClient,
  queryParams?: GetProjectsCitiesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<City[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsCities.info(queryParams, configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProjectsCitiesId = (
  /** A UUID string identifying this city. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<City>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsCitiesId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProjectsCitiesId.info = (
  /** A UUID string identifying this city. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProjectsCitiesId.key, id] as QueryKey,
    fun: () =>
      getProjectsCitiesId(
        id,

        configOverride,
      ),
  };
};
useGetProjectsCitiesId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this city. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<City>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsCitiesId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProjectsCompanies = (
  queryParams?: GetProjectsCompaniesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedCompanyList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsCompanies.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProjectsCompanies.info = (
  queryParams?: GetProjectsCompaniesQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProjectsCompanies.key, queryParams] as QueryKey,
    fun: () =>
      getProjectsCompanies(
        queryParams,

        configOverride,
      ),
  };
};
useGetProjectsCompanies.prefetch = (
  client: QueryClient,
  queryParams?: GetProjectsCompaniesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedCompanyList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsCompanies.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProjectsCompaniesAvailable = (
  queryParams?: GetProjectsCompaniesAvailableQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<CompanyAvailable[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsCompaniesAvailable.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProjectsCompaniesAvailable.info = (
  queryParams?: GetProjectsCompaniesAvailableQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProjectsCompaniesAvailable.key, queryParams] as QueryKey,
    fun: () =>
      getProjectsCompaniesAvailable(
        queryParams,

        configOverride,
      ),
  };
};
useGetProjectsCompaniesAvailable.prefetch = (
  client: QueryClient,
  queryParams?: GetProjectsCompaniesAvailableQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<CompanyAvailable[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsCompaniesAvailable.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProjectsCompaniesPermissions = (
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsCompaniesPermissions.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProjectsCompaniesPermissions.info = (
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProjectsCompaniesPermissions.key] as QueryKey,
    fun: () => getProjectsCompaniesPermissions(configOverride),
  };
};
useGetProjectsCompaniesPermissions.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsCompaniesPermissions.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProjectsCompaniesSlug = (
  slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Company>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsCompaniesSlug.info(
    slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProjectsCompaniesSlug.info = (
  slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProjectsCompaniesSlug.key, slug] as QueryKey,
    fun: () =>
      getProjectsCompaniesSlug(
        slug,

        configOverride,
      ),
  };
};
useGetProjectsCompaniesSlug.prefetch = (
  client: QueryClient,
  slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Company>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsCompaniesSlug.info(
    slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProjectsCompaniesSlugHistory = (
  slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Company>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsCompaniesSlugHistory.info(
    slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProjectsCompaniesSlugHistory.info = (
  slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProjectsCompaniesSlugHistory.key, slug] as QueryKey,
    fun: () =>
      getProjectsCompaniesSlugHistory(
        slug,

        configOverride,
      ),
  };
};
useGetProjectsCompaniesSlugHistory.prefetch = (
  client: QueryClient,
  slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Company>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsCompaniesSlugHistory.info(
    slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProjectsCountries = (
  queryParams?: GetProjectsCountriesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Country[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsCountries.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProjectsCountries.info = (
  queryParams?: GetProjectsCountriesQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProjectsCountries.key, queryParams] as QueryKey,
    fun: () =>
      getProjectsCountries(
        queryParams,

        configOverride,
      ),
  };
};
useGetProjectsCountries.prefetch = (
  client: QueryClient,
  queryParams?: GetProjectsCountriesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Country[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsCountries.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProjectsCountriesId = (
  /** A UUID string identifying this country. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Country>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsCountriesId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProjectsCountriesId.info = (
  /** A UUID string identifying this country. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProjectsCountriesId.key, id] as QueryKey,
    fun: () =>
      getProjectsCountriesId(
        id,

        configOverride,
      ),
  };
};
useGetProjectsCountriesId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this country. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Country>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsCountriesId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProjectsDistricts = (
  queryParams?: GetProjectsDistrictsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<District[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsDistricts.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProjectsDistricts.info = (
  queryParams?: GetProjectsDistrictsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProjectsDistricts.key, queryParams] as QueryKey,
    fun: () =>
      getProjectsDistricts(
        queryParams,

        configOverride,
      ),
  };
};
useGetProjectsDistricts.prefetch = (
  client: QueryClient,
  queryParams?: GetProjectsDistrictsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<District[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsDistricts.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProjectsDistrictsId = (
  /** A UUID string identifying this district. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<District>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsDistrictsId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProjectsDistrictsId.info = (
  /** A UUID string identifying this district. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProjectsDistrictsId.key, id] as QueryKey,
    fun: () =>
      getProjectsDistrictsId(
        id,

        configOverride,
      ),
  };
};
useGetProjectsDistrictsId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this district. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<District>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsDistrictsId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProjectsProjects = (
  queryParams?: GetProjectsProjectsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedProjectListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsProjects.info(queryParams, configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProjectsProjects.info = (
  queryParams?: GetProjectsProjectsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProjectsProjects.key, queryParams] as QueryKey,
    fun: () =>
      getProjectsProjects(
        queryParams,

        configOverride,
      ),
  };
};
useGetProjectsProjects.prefetch = (
  client: QueryClient,
  queryParams?: GetProjectsProjectsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedProjectListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsProjects.info(queryParams, configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProjectsProjectsAvailable = (
  queryParams?: GetProjectsProjectsAvailableQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<ProjectAvailable[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsProjectsAvailable.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProjectsProjectsAvailable.info = (
  queryParams?: GetProjectsProjectsAvailableQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProjectsProjectsAvailable.key, queryParams] as QueryKey,
    fun: () =>
      getProjectsProjectsAvailable(
        queryParams,

        configOverride,
      ),
  };
};
useGetProjectsProjectsAvailable.prefetch = (
  client: QueryClient,
  queryParams?: GetProjectsProjectsAvailableQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<ProjectAvailable[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsProjectsAvailable.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProjectsProjectsPermissions = (
  queryParams?: GetProjectsProjectsPermissionsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsProjectsPermissions.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProjectsProjectsPermissions.info = (
  queryParams?: GetProjectsProjectsPermissionsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProjectsProjectsPermissions.key, queryParams] as QueryKey,
    fun: () =>
      getProjectsProjectsPermissions(
        queryParams,

        configOverride,
      ),
  };
};
useGetProjectsProjectsPermissions.prefetch = (
  client: QueryClient,
  queryParams?: GetProjectsProjectsPermissionsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsProjectsPermissions.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProjectsProjectsSlug = (
  slug: string,
  queryParams?: GetProjectsProjectsSlugQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Project>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsProjectsSlug.info(
    slug,

    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProjectsProjectsSlug.info = (
  slug: string,
  queryParams?: GetProjectsProjectsSlugQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProjectsProjectsSlug.key, slug, queryParams] as QueryKey,
    fun: () =>
      getProjectsProjectsSlug(
        slug,

        queryParams,

        configOverride,
      ),
  };
};
useGetProjectsProjectsSlug.prefetch = (
  client: QueryClient,
  slug: string,
  queryParams?: GetProjectsProjectsSlugQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Project>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsProjectsSlug.info(
    slug,

    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProjectsProjectsSlugHistory = (
  slug: string,
  queryParams?: GetProjectsProjectsSlugHistoryQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Project>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsProjectsSlugHistory.info(
    slug,

    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProjectsProjectsSlugHistory.info = (
  slug: string,
  queryParams?: GetProjectsProjectsSlugHistoryQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProjectsProjectsSlugHistory.key, slug, queryParams] as QueryKey,
    fun: () =>
      getProjectsProjectsSlugHistory(
        slug,

        queryParams,

        configOverride,
      ),
  };
};
useGetProjectsProjectsSlugHistory.prefetch = (
  client: QueryClient,
  slug: string,
  queryParams?: GetProjectsProjectsSlugHistoryQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Project>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsProjectsSlugHistory.info(
    slug,

    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProjectsProjectsSlugResponsibilities = (
  slug: string,
  queryParams?: GetProjectsProjectsSlugResponsibilitiesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Project>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsProjectsSlugResponsibilities.info(
    slug,

    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProjectsProjectsSlugResponsibilities.info = (
  slug: string,
  queryParams?: GetProjectsProjectsSlugResponsibilitiesQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [
      getProjectsProjectsSlugResponsibilities.key,
      slug,

      queryParams,
    ] as QueryKey,
    fun: () =>
      getProjectsProjectsSlugResponsibilities(
        slug,

        queryParams,

        configOverride,
      ),
  };
};
useGetProjectsProjectsSlugResponsibilities.prefetch = (
  client: QueryClient,
  slug: string,
  queryParams?: GetProjectsProjectsSlugResponsibilitiesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Project>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsProjectsSlugResponsibilities.info(
    slug,

    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProjectsProjecttypes = (
  options?: SwaggerTypescriptUseQueryOptions<ProjectTypeParam[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsProjecttypes.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProjectsProjecttypes.info = (configOverride?: AxiosRequestConfig) => {
  return {
    key: [getProjectsProjecttypes.key] as QueryKey,
    fun: () => getProjectsProjecttypes(configOverride),
  };
};
useGetProjectsProjecttypes.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<ProjectTypeParam[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsProjecttypes.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProjectsProjecttypesId = (
  /** A UUID string identifying this project type. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<ProjectTypeParam>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsProjecttypesId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProjectsProjecttypesId.info = (
  /** A UUID string identifying this project type. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProjectsProjecttypesId.key, id] as QueryKey,
    fun: () =>
      getProjectsProjecttypesId(
        id,

        configOverride,
      ),
  };
};
useGetProjectsProjecttypesId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this project type. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<ProjectTypeParam>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsProjecttypesId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProjectsResponsibles = (
  options?: SwaggerTypescriptUseQueryOptions<Responsible[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsResponsibles.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProjectsResponsibles.info = (configOverride?: AxiosRequestConfig) => {
  return {
    key: [getProjectsResponsibles.key] as QueryKey,
    fun: () => getProjectsResponsibles(configOverride),
  };
};
useGetProjectsResponsibles.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Responsible[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsResponsibles.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProjectsResponsiblesId = (
  /** A UUID string identifying this responsible. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Responsible>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsResponsiblesId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProjectsResponsiblesId.info = (
  /** A UUID string identifying this responsible. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProjectsResponsiblesId.key, id] as QueryKey,
    fun: () =>
      getProjectsResponsiblesId(
        id,

        configOverride,
      ),
  };
};
useGetProjectsResponsiblesId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this responsible. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Responsible>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsResponsiblesId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProjectsResponsibletypes = (
  options?: SwaggerTypescriptUseQueryOptions<ResponsibleTypeParam[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsResponsibletypes.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProjectsResponsibletypes.info = (configOverride?: AxiosRequestConfig) => {
  return {
    key: [getProjectsResponsibletypes.key] as QueryKey,
    fun: () => getProjectsResponsibletypes(configOverride),
  };
};
useGetProjectsResponsibletypes.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<ResponsibleTypeParam[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsResponsibletypes.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetProjectsResponsibletypesId = (
  /** A UUID string identifying this responsible type. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<ResponsibleTypeParam>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsResponsibletypesId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetProjectsResponsibletypesId.info = (
  /** A UUID string identifying this responsible type. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getProjectsResponsibletypesId.key, id] as QueryKey,
    fun: () =>
      getProjectsResponsibletypesId(
        id,

        configOverride,
      ),
  };
};
useGetProjectsResponsibletypesId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this responsible type. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<ResponsibleTypeParam>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetProjectsResponsibletypesId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetRatesRates = (
  queryParams: GetRatesRatesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Rate[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetRatesRates.info(queryParams, configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetRatesRates.info = (
  queryParams: GetRatesRatesQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getRatesRates.key, queryParams] as QueryKey,
    fun: () =>
      getRatesRates(
        queryParams,

        configOverride,
      ),
  };
};
useGetRatesRates.prefetch = (
  client: QueryClient,
  queryParams: GetRatesRatesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Rate[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetRatesRates.info(queryParams, configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetRatesRatesId = (
  /** A unique integer value identifying this rate. */
  id: number,
  options?: SwaggerTypescriptUseQueryOptions<Rate>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetRatesRatesId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetRatesRatesId.info = (
  /** A unique integer value identifying this rate. */
  id: number,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getRatesRatesId.key, id] as QueryKey,
    fun: () =>
      getRatesRatesId(
        id,

        configOverride,
      ),
  };
};
useGetRatesRatesId.prefetch = (
  client: QueryClient,

  /** A unique integer value identifying this rate. */
  id: number,
  options?: SwaggerTypescriptUseQueryOptions<Rate>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetRatesRatesId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsContractCategories = (
  queryParams?: GetSubcontractsContractCategoriesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<ContractCategory[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsContractCategories.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsContractCategories.info = (
  queryParams?: GetSubcontractsContractCategoriesQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSubcontractsContractCategories.key, queryParams] as QueryKey,
    fun: () =>
      getSubcontractsContractCategories(
        queryParams,

        configOverride,
      ),
  };
};
useGetSubcontractsContractCategories.prefetch = (
  client: QueryClient,
  queryParams?: GetSubcontractsContractCategoriesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<ContractCategory[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsContractCategories.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsContractCategoriesId = (
  /** A UUID string identifying this contract category. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<ContractCategory>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsContractCategoriesId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsContractCategoriesId.info = (
  /** A UUID string identifying this contract category. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSubcontractsContractCategoriesId.key, id] as QueryKey,
    fun: () =>
      getSubcontractsContractCategoriesId(
        id,

        configOverride,
      ),
  };
};
useGetSubcontractsContractCategoriesId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this contract category. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<ContractCategory>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsContractCategoriesId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsContractCollateralReason = (
  queryParams?: GetSubcontractsContractCollateralReasonQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<ContractCollateralReason[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsContractCollateralReason.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsContractCollateralReason.info = (
  queryParams?: GetSubcontractsContractCollateralReasonQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSubcontractsContractCollateralReason.key, queryParams] as QueryKey,
    fun: () =>
      getSubcontractsContractCollateralReason(
        queryParams,

        configOverride,
      ),
  };
};
useGetSubcontractsContractCollateralReason.prefetch = (
  client: QueryClient,
  queryParams?: GetSubcontractsContractCollateralReasonQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<ContractCollateralReason[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsContractCollateralReason.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsContractCollateralReasonId = (
  /** A UUID string identifying this contract collateral reason. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<ContractCollateralReason>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsContractCollateralReasonId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsContractCollateralReasonId.info = (
  /** A UUID string identifying this contract collateral reason. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSubcontractsContractCollateralReasonId.key, id] as QueryKey,
    fun: () =>
      getSubcontractsContractCollateralReasonId(
        id,

        configOverride,
      ),
  };
};
useGetSubcontractsContractCollateralReasonId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this contract collateral reason. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<ContractCollateralReason>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsContractCollateralReasonId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsContractCollateralStatus = (
  queryParams?: GetSubcontractsContractCollateralStatusQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<ContractCollateralStatus[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsContractCollateralStatus.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsContractCollateralStatus.info = (
  queryParams?: GetSubcontractsContractCollateralStatusQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSubcontractsContractCollateralStatus.key, queryParams] as QueryKey,
    fun: () =>
      getSubcontractsContractCollateralStatus(
        queryParams,

        configOverride,
      ),
  };
};
useGetSubcontractsContractCollateralStatus.prefetch = (
  client: QueryClient,
  queryParams?: GetSubcontractsContractCollateralStatusQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<ContractCollateralStatus[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsContractCollateralStatus.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsContractCollateralStatusId = (
  /** A UUID string identifying this contract collateral status. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<ContractCollateralStatus>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsContractCollateralStatusId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsContractCollateralStatusId.info = (
  /** A UUID string identifying this contract collateral status. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSubcontractsContractCollateralStatusId.key, id] as QueryKey,
    fun: () =>
      getSubcontractsContractCollateralStatusId(
        id,

        configOverride,
      ),
  };
};
useGetSubcontractsContractCollateralStatusId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this contract collateral status. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<ContractCollateralStatus>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsContractCollateralStatusId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsContractCollateralTypes = (
  queryParams?: GetSubcontractsContractCollateralTypesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<ContractCollateralType[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsContractCollateralTypes.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsContractCollateralTypes.info = (
  queryParams?: GetSubcontractsContractCollateralTypesQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSubcontractsContractCollateralTypes.key, queryParams] as QueryKey,
    fun: () =>
      getSubcontractsContractCollateralTypes(
        queryParams,

        configOverride,
      ),
  };
};
useGetSubcontractsContractCollateralTypes.prefetch = (
  client: QueryClient,
  queryParams?: GetSubcontractsContractCollateralTypesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<ContractCollateralType[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsContractCollateralTypes.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsContractCollateralTypesId = (
  /** A UUID string identifying this contract collateral type. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<ContractCollateralType>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsContractCollateralTypesId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsContractCollateralTypesId.info = (
  /** A UUID string identifying this contract collateral type. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSubcontractsContractCollateralTypesId.key, id] as QueryKey,
    fun: () =>
      getSubcontractsContractCollateralTypesId(
        id,

        configOverride,
      ),
  };
};
useGetSubcontractsContractCollateralTypesId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this contract collateral type. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<ContractCollateralType>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsContractCollateralTypesId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsContractCollaterals = (
  queryParams?: GetSubcontractsContractCollateralsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedContractCollateralListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsContractCollaterals.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsContractCollaterals.info = (
  queryParams?: GetSubcontractsContractCollateralsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSubcontractsContractCollaterals.key, queryParams] as QueryKey,
    fun: () =>
      getSubcontractsContractCollaterals(
        queryParams,

        configOverride,
      ),
  };
};
useGetSubcontractsContractCollaterals.prefetch = (
  client: QueryClient,
  queryParams?: GetSubcontractsContractCollateralsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedContractCollateralListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsContractCollaterals.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsContractCollateralsPermissions = (
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetSubcontractsContractCollateralsPermissions.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsContractCollateralsPermissions.info = (
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSubcontractsContractCollateralsPermissions.key] as QueryKey,
    fun: () => getSubcontractsContractCollateralsPermissions(configOverride),
  };
};
useGetSubcontractsContractCollateralsPermissions.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetSubcontractsContractCollateralsPermissions.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsContracts = (
  queryParams?: GetSubcontractsContractsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedContractListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsContracts.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsContracts.info = (
  queryParams?: GetSubcontractsContractsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSubcontractsContracts.key, queryParams] as QueryKey,
    fun: () =>
      getSubcontractsContracts(
        queryParams,

        configOverride,
      ),
  };
};
useGetSubcontractsContracts.prefetch = (
  client: QueryClient,
  queryParams?: GetSubcontractsContractsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedContractListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsContracts.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsContractsCounter__slug = (
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Contract>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsContractsCounter__slug.info(
    counter__slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsContractsCounter__slug.info = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSubcontractsContractsCounter__slug.key, counter__slug] as QueryKey,
    fun: () =>
      getSubcontractsContractsCounter__slug(
        counter__slug,

        configOverride,
      ),
  };
};
useGetSubcontractsContractsCounter__slug.prefetch = (
  client: QueryClient,
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Contract>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsContractsCounter__slug.info(
    counter__slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsContractsCounter__slugApprovalHistory = (
  counter__slug: string,
  queryParams?: GetSubcontractsContractsCounter__slugApprovalHistoryQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedApprovalHistoryList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetSubcontractsContractsCounter__slugApprovalHistory.info(
      counter__slug,

      queryParams,
      configOverride,
    );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsContractsCounter__slugApprovalHistory.info = (
  counter__slug: string,
  queryParams?: GetSubcontractsContractsCounter__slugApprovalHistoryQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [
      getSubcontractsContractsCounter__slugApprovalHistory.key,
      counter__slug,

      queryParams,
    ] as QueryKey,
    fun: () =>
      getSubcontractsContractsCounter__slugApprovalHistory(
        counter__slug,

        queryParams,

        configOverride,
      ),
  };
};
useGetSubcontractsContractsCounter__slugApprovalHistory.prefetch = (
  client: QueryClient,
  counter__slug: string,
  queryParams?: GetSubcontractsContractsCounter__slugApprovalHistoryQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedApprovalHistoryList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetSubcontractsContractsCounter__slugApprovalHistory.info(
      counter__slug,

      queryParams,
      configOverride,
    );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsContractsCounter__slugAttachments = (
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Contract>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsContractsCounter__slugAttachments.info(
    counter__slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsContractsCounter__slugAttachments.info = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [
      getSubcontractsContractsCounter__slugAttachments.key,
      counter__slug,
    ] as QueryKey,
    fun: () =>
      getSubcontractsContractsCounter__slugAttachments(
        counter__slug,

        configOverride,
      ),
  };
};
useGetSubcontractsContractsCounter__slugAttachments.prefetch = (
  client: QueryClient,
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Contract>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsContractsCounter__slugAttachments.info(
    counter__slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsContractsCounter__slugCopy_contract = (
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Contract>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetSubcontractsContractsCounter__slugCopy_contract.info(
      counter__slug,

      configOverride,
    );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsContractsCounter__slugCopy_contract.info = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [
      getSubcontractsContractsCounter__slugCopy_contract.key,
      counter__slug,
    ] as QueryKey,
    fun: () =>
      getSubcontractsContractsCounter__slugCopy_contract(
        counter__slug,

        configOverride,
      ),
  };
};
useGetSubcontractsContractsCounter__slugCopy_contract.prefetch = (
  client: QueryClient,
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Contract>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetSubcontractsContractsCounter__slugCopy_contract.info(
      counter__slug,

      configOverride,
    );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsContractsCounter__slugCreate_progress = (
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Progress>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetSubcontractsContractsCounter__slugCreate_progress.info(
      counter__slug,

      configOverride,
    );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsContractsCounter__slugCreate_progress.info = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [
      getSubcontractsContractsCounter__slugCreate_progress.key,
      counter__slug,
    ] as QueryKey,
    fun: () =>
      getSubcontractsContractsCounter__slugCreate_progress(
        counter__slug,

        configOverride,
      ),
  };
};
useGetSubcontractsContractsCounter__slugCreate_progress.prefetch = (
  client: QueryClient,
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Progress>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetSubcontractsContractsCounter__slugCreate_progress.info(
      counter__slug,

      configOverride,
    );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsContractsCounter__slugDeductionReturnType = (
  counter__slug: string,
  type: string,
  options?: SwaggerTypescriptUseQueryOptions<DeductionReturn>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetSubcontractsContractsCounter__slugDeductionReturnType.info(
      counter__slug,
      type,

      configOverride,
    );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsContractsCounter__slugDeductionReturnType.info = (
  counter__slug: string,
  type: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [
      getSubcontractsContractsCounter__slugDeductionReturnType.key,
      counter__slug,
      type,
    ] as QueryKey,
    fun: () =>
      getSubcontractsContractsCounter__slugDeductionReturnType(
        counter__slug,
        type,

        configOverride,
      ),
  };
};
useGetSubcontractsContractsCounter__slugDeductionReturnType.prefetch = (
  client: QueryClient,
  counter__slug: string,
  type: string,
  options?: SwaggerTypescriptUseQueryOptions<DeductionReturn>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetSubcontractsContractsCounter__slugDeductionReturnType.info(
      counter__slug,
      type,

      configOverride,
    );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsContractsCounter__slugHistory = (
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Contract>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsContractsCounter__slugHistory.info(
    counter__slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsContractsCounter__slugHistory.info = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [
      getSubcontractsContractsCounter__slugHistory.key,
      counter__slug,
    ] as QueryKey,
    fun: () =>
      getSubcontractsContractsCounter__slugHistory(
        counter__slug,

        configOverride,
      ),
  };
};
useGetSubcontractsContractsCounter__slugHistory.prefetch = (
  client: QueryClient,
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Contract>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsContractsCounter__slugHistory.info(
    counter__slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsContractsPermissions = (
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetSubcontractsContractsPermissions.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsContractsPermissions.info = (
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSubcontractsContractsPermissions.key] as QueryKey,
    fun: () => getSubcontractsContractsPermissions(configOverride),
  };
};
useGetSubcontractsContractsPermissions.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetSubcontractsContractsPermissions.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsContractsStates = (
  queryParams?: GetSubcontractsContractsStatesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<State[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsContractsStates.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsContractsStates.info = (
  queryParams?: GetSubcontractsContractsStatesQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSubcontractsContractsStates.key, queryParams] as QueryKey,
    fun: () =>
      getSubcontractsContractsStates(
        queryParams,

        configOverride,
      ),
  };
};
useGetSubcontractsContractsStates.prefetch = (
  client: QueryClient,
  queryParams?: GetSubcontractsContractsStatesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<State[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsContractsStates.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsDeductionReturns = (
  queryParams?: GetSubcontractsDeductionReturnsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedDeductionReturnListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsDeductionReturns.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsDeductionReturns.info = (
  queryParams?: GetSubcontractsDeductionReturnsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSubcontractsDeductionReturns.key, queryParams] as QueryKey,
    fun: () =>
      getSubcontractsDeductionReturns(
        queryParams,

        configOverride,
      ),
  };
};
useGetSubcontractsDeductionReturns.prefetch = (
  client: QueryClient,
  queryParams?: GetSubcontractsDeductionReturnsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedDeductionReturnListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsDeductionReturns.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsDeductionReturnsCounter__slug = (
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<DeductionReturn>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsDeductionReturnsCounter__slug.info(
    counter__slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsDeductionReturnsCounter__slug.info = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [
      getSubcontractsDeductionReturnsCounter__slug.key,
      counter__slug,
    ] as QueryKey,
    fun: () =>
      getSubcontractsDeductionReturnsCounter__slug(
        counter__slug,

        configOverride,
      ),
  };
};
useGetSubcontractsDeductionReturnsCounter__slug.prefetch = (
  client: QueryClient,
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<DeductionReturn>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsDeductionReturnsCounter__slug.info(
    counter__slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsDeductionReturnsCounter__slugApprovalHistory = (
  counter__slug: string,
  queryParams?: GetSubcontractsDeductionReturnsCounter__slugApprovalHistoryQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedApprovalHistoryList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetSubcontractsDeductionReturnsCounter__slugApprovalHistory.info(
      counter__slug,

      queryParams,
      configOverride,
    );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsDeductionReturnsCounter__slugApprovalHistory.info = (
  counter__slug: string,
  queryParams?: GetSubcontractsDeductionReturnsCounter__slugApprovalHistoryQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [
      getSubcontractsDeductionReturnsCounter__slugApprovalHistory.key,
      counter__slug,

      queryParams,
    ] as QueryKey,
    fun: () =>
      getSubcontractsDeductionReturnsCounter__slugApprovalHistory(
        counter__slug,

        queryParams,

        configOverride,
      ),
  };
};
useGetSubcontractsDeductionReturnsCounter__slugApprovalHistory.prefetch = (
  client: QueryClient,
  counter__slug: string,
  queryParams?: GetSubcontractsDeductionReturnsCounter__slugApprovalHistoryQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedApprovalHistoryList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetSubcontractsDeductionReturnsCounter__slugApprovalHistory.info(
      counter__slug,

      queryParams,
      configOverride,
    );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsDeductionReturnsCounter__slugAttachments = (
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<DeductionReturn>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetSubcontractsDeductionReturnsCounter__slugAttachments.info(
      counter__slug,

      configOverride,
    );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsDeductionReturnsCounter__slugAttachments.info = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [
      getSubcontractsDeductionReturnsCounter__slugAttachments.key,
      counter__slug,
    ] as QueryKey,
    fun: () =>
      getSubcontractsDeductionReturnsCounter__slugAttachments(
        counter__slug,

        configOverride,
      ),
  };
};
useGetSubcontractsDeductionReturnsCounter__slugAttachments.prefetch = (
  client: QueryClient,
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<DeductionReturn>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetSubcontractsDeductionReturnsCounter__slugAttachments.info(
      counter__slug,

      configOverride,
    );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsDeductionReturnsCounter__slugHistory = (
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<DeductionReturn>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetSubcontractsDeductionReturnsCounter__slugHistory.info(
      counter__slug,

      configOverride,
    );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsDeductionReturnsCounter__slugHistory.info = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [
      getSubcontractsDeductionReturnsCounter__slugHistory.key,
      counter__slug,
    ] as QueryKey,
    fun: () =>
      getSubcontractsDeductionReturnsCounter__slugHistory(
        counter__slug,

        configOverride,
      ),
  };
};
useGetSubcontractsDeductionReturnsCounter__slugHistory.prefetch = (
  client: QueryClient,
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<DeductionReturn>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetSubcontractsDeductionReturnsCounter__slugHistory.info(
      counter__slug,

      configOverride,
    );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsDeductionReturnsPermissions = (
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetSubcontractsDeductionReturnsPermissions.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsDeductionReturnsPermissions.info = (
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSubcontractsDeductionReturnsPermissions.key] as QueryKey,
    fun: () => getSubcontractsDeductionReturnsPermissions(configOverride),
  };
};
useGetSubcontractsDeductionReturnsPermissions.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetSubcontractsDeductionReturnsPermissions.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsDeductionReturnsStates = (
  queryParams?: GetSubcontractsDeductionReturnsStatesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<State[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsDeductionReturnsStates.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsDeductionReturnsStates.info = (
  queryParams?: GetSubcontractsDeductionReturnsStatesQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSubcontractsDeductionReturnsStates.key, queryParams] as QueryKey,
    fun: () =>
      getSubcontractsDeductionReturnsStates(
        queryParams,

        configOverride,
      ),
  };
};
useGetSubcontractsDeductionReturnsStates.prefetch = (
  client: QueryClient,
  queryParams?: GetSubcontractsDeductionReturnsStatesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<State[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsDeductionReturnsStates.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsProgressAdditionTypes = (
  queryParams?: GetSubcontractsProgressAdditionTypesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<ProgressAdditionType[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsProgressAdditionTypes.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsProgressAdditionTypes.info = (
  queryParams?: GetSubcontractsProgressAdditionTypesQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSubcontractsProgressAdditionTypes.key, queryParams] as QueryKey,
    fun: () =>
      getSubcontractsProgressAdditionTypes(
        queryParams,

        configOverride,
      ),
  };
};
useGetSubcontractsProgressAdditionTypes.prefetch = (
  client: QueryClient,
  queryParams?: GetSubcontractsProgressAdditionTypesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<ProgressAdditionType[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsProgressAdditionTypes.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsProgressAdditionTypesSlug = (
  slug: string,
  options?: SwaggerTypescriptUseQueryOptions<ProgressAdditionType>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsProgressAdditionTypesSlug.info(
    slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsProgressAdditionTypesSlug.info = (
  slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSubcontractsProgressAdditionTypesSlug.key, slug] as QueryKey,
    fun: () =>
      getSubcontractsProgressAdditionTypesSlug(
        slug,

        configOverride,
      ),
  };
};
useGetSubcontractsProgressAdditionTypesSlug.prefetch = (
  client: QueryClient,
  slug: string,
  options?: SwaggerTypescriptUseQueryOptions<ProgressAdditionType>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsProgressAdditionTypesSlug.info(
    slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsProgressDeductionTypes = (
  queryParams?: GetSubcontractsProgressDeductionTypesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<ProgressDeductionType[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsProgressDeductionTypes.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsProgressDeductionTypes.info = (
  queryParams?: GetSubcontractsProgressDeductionTypesQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSubcontractsProgressDeductionTypes.key, queryParams] as QueryKey,
    fun: () =>
      getSubcontractsProgressDeductionTypes(
        queryParams,

        configOverride,
      ),
  };
};
useGetSubcontractsProgressDeductionTypes.prefetch = (
  client: QueryClient,
  queryParams?: GetSubcontractsProgressDeductionTypesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<ProgressDeductionType[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsProgressDeductionTypes.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsProgressDeductionTypesSlug = (
  slug: string,
  options?: SwaggerTypescriptUseQueryOptions<ProgressDeductionType>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsProgressDeductionTypesSlug.info(
    slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsProgressDeductionTypesSlug.info = (
  slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSubcontractsProgressDeductionTypesSlug.key, slug] as QueryKey,
    fun: () =>
      getSubcontractsProgressDeductionTypesSlug(
        slug,

        configOverride,
      ),
  };
};
useGetSubcontractsProgressDeductionTypesSlug.prefetch = (
  client: QueryClient,
  slug: string,
  options?: SwaggerTypescriptUseQueryOptions<ProgressDeductionType>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsProgressDeductionTypesSlug.info(
    slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsProgressItems = (
  queryParams?: GetSubcontractsProgressItemsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<ProgressItemList[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsProgressItems.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsProgressItems.info = (
  queryParams?: GetSubcontractsProgressItemsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSubcontractsProgressItems.key, queryParams] as QueryKey,
    fun: () =>
      getSubcontractsProgressItems(
        queryParams,

        configOverride,
      ),
  };
};
useGetSubcontractsProgressItems.prefetch = (
  client: QueryClient,
  queryParams?: GetSubcontractsProgressItemsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<ProgressItemList[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsProgressItems.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsProgressItemsPermissions = (
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetSubcontractsProgressItemsPermissions.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsProgressItemsPermissions.info = (
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSubcontractsProgressItemsPermissions.key] as QueryKey,
    fun: () => getSubcontractsProgressItemsPermissions(configOverride),
  };
};
useGetSubcontractsProgressItemsPermissions.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetSubcontractsProgressItemsPermissions.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsProgresses = (
  queryParams?: GetSubcontractsProgressesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedProgressListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsProgresses.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsProgresses.info = (
  queryParams?: GetSubcontractsProgressesQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSubcontractsProgresses.key, queryParams] as QueryKey,
    fun: () =>
      getSubcontractsProgresses(
        queryParams,

        configOverride,
      ),
  };
};
useGetSubcontractsProgresses.prefetch = (
  client: QueryClient,
  queryParams?: GetSubcontractsProgressesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedProgressListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsProgresses.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsProgressesCounter__slug = (
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Progress>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsProgressesCounter__slug.info(
    counter__slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsProgressesCounter__slug.info = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [
      getSubcontractsProgressesCounter__slug.key,
      counter__slug,
    ] as QueryKey,
    fun: () =>
      getSubcontractsProgressesCounter__slug(
        counter__slug,

        configOverride,
      ),
  };
};
useGetSubcontractsProgressesCounter__slug.prefetch = (
  client: QueryClient,
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Progress>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsProgressesCounter__slug.info(
    counter__slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsProgressesCounter__slugApprovalHistory = (
  counter__slug: string,
  queryParams?: GetSubcontractsProgressesCounter__slugApprovalHistoryQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedApprovalHistoryList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetSubcontractsProgressesCounter__slugApprovalHistory.info(
      counter__slug,

      queryParams,
      configOverride,
    );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsProgressesCounter__slugApprovalHistory.info = (
  counter__slug: string,
  queryParams?: GetSubcontractsProgressesCounter__slugApprovalHistoryQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [
      getSubcontractsProgressesCounter__slugApprovalHistory.key,
      counter__slug,

      queryParams,
    ] as QueryKey,
    fun: () =>
      getSubcontractsProgressesCounter__slugApprovalHistory(
        counter__slug,

        queryParams,

        configOverride,
      ),
  };
};
useGetSubcontractsProgressesCounter__slugApprovalHistory.prefetch = (
  client: QueryClient,
  counter__slug: string,
  queryParams?: GetSubcontractsProgressesCounter__slugApprovalHistoryQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedApprovalHistoryList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetSubcontractsProgressesCounter__slugApprovalHistory.info(
      counter__slug,

      queryParams,
      configOverride,
    );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsProgressesCounter__slugAttachments = (
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Progress>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetSubcontractsProgressesCounter__slugAttachments.info(
      counter__slug,

      configOverride,
    );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsProgressesCounter__slugAttachments.info = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [
      getSubcontractsProgressesCounter__slugAttachments.key,
      counter__slug,
    ] as QueryKey,
    fun: () =>
      getSubcontractsProgressesCounter__slugAttachments(
        counter__slug,

        configOverride,
      ),
  };
};
useGetSubcontractsProgressesCounter__slugAttachments.prefetch = (
  client: QueryClient,
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Progress>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetSubcontractsProgressesCounter__slugAttachments.info(
      counter__slug,

      configOverride,
    );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsProgressesCounter__slugHistory = (
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Progress>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsProgressesCounter__slugHistory.info(
    counter__slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsProgressesCounter__slugHistory.info = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [
      getSubcontractsProgressesCounter__slugHistory.key,
      counter__slug,
    ] as QueryKey,
    fun: () =>
      getSubcontractsProgressesCounter__slugHistory(
        counter__slug,

        configOverride,
      ),
  };
};
useGetSubcontractsProgressesCounter__slugHistory.prefetch = (
  client: QueryClient,
  counter__slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Progress>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsProgressesCounter__slugHistory.info(
    counter__slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsProgressesPermissions = (
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetSubcontractsProgressesPermissions.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsProgressesPermissions.info = (
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSubcontractsProgressesPermissions.key] as QueryKey,
    fun: () => getSubcontractsProgressesPermissions(configOverride),
  };
};
useGetSubcontractsProgressesPermissions.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetSubcontractsProgressesPermissions.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsProgressesStates = (
  queryParams?: GetSubcontractsProgressesStatesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<State[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsProgressesStates.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsProgressesStates.info = (
  queryParams?: GetSubcontractsProgressesStatesQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSubcontractsProgressesStates.key, queryParams] as QueryKey,
    fun: () =>
      getSubcontractsProgressesStates(
        queryParams,

        configOverride,
      ),
  };
};
useGetSubcontractsProgressesStates.prefetch = (
  client: QueryClient,
  queryParams?: GetSubcontractsProgressesStatesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<State[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsProgressesStates.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsRevisions = (
  queryParams?: GetSubcontractsRevisionsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedRevisionList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsRevisions.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsRevisions.info = (
  queryParams?: GetSubcontractsRevisionsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSubcontractsRevisions.key, queryParams] as QueryKey,
    fun: () =>
      getSubcontractsRevisions(
        queryParams,

        configOverride,
      ),
  };
};
useGetSubcontractsRevisions.prefetch = (
  client: QueryClient,
  queryParams?: GetSubcontractsRevisionsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedRevisionList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsRevisions.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsRevisionsId = (
  /** A UUID string identifying this contract revision. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Revision>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsRevisionsId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsRevisionsId.info = (
  /** A UUID string identifying this contract revision. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSubcontractsRevisionsId.key, id] as QueryKey,
    fun: () =>
      getSubcontractsRevisionsId(
        id,

        configOverride,
      ),
  };
};
useGetSubcontractsRevisionsId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this contract revision. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Revision>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSubcontractsRevisionsId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSubcontractsRevisionsPermissions = (
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetSubcontractsRevisionsPermissions.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSubcontractsRevisionsPermissions.info = (
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSubcontractsRevisionsPermissions.key] as QueryKey,
    fun: () => getSubcontractsRevisionsPermissions(configOverride),
  };
};
useGetSubcontractsRevisionsPermissions.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetSubcontractsRevisionsPermissions.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSuppliersAccountingCodes = (
  queryParams?: GetSuppliersAccountingCodesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<SupplierAccountingCode[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersAccountingCodes.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSuppliersAccountingCodes.info = (
  queryParams?: GetSuppliersAccountingCodesQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSuppliersAccountingCodes.key, queryParams] as QueryKey,
    fun: () =>
      getSuppliersAccountingCodes(
        queryParams,

        configOverride,
      ),
  };
};
useGetSuppliersAccountingCodes.prefetch = (
  client: QueryClient,
  queryParams?: GetSuppliersAccountingCodesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<SupplierAccountingCode[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersAccountingCodes.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSuppliersAccountingCodesId = (
  /** A UUID string identifying this supplier accounting code. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<SupplierAccountingCode>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersAccountingCodesId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSuppliersAccountingCodesId.info = (
  /** A UUID string identifying this supplier accounting code. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSuppliersAccountingCodesId.key, id] as QueryKey,
    fun: () =>
      getSuppliersAccountingCodesId(
        id,

        configOverride,
      ),
  };
};
useGetSuppliersAccountingCodesId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this supplier accounting code. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<SupplierAccountingCode>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersAccountingCodesId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSuppliersAdvanceBalancesSlug = (
  slug: string,
  queryParams: GetSuppliersAdvanceBalancesSlugQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<InvoiceAdvanceBalance>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersAdvanceBalancesSlug.info(
    slug,

    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSuppliersAdvanceBalancesSlug.info = (
  slug: string,
  queryParams: GetSuppliersAdvanceBalancesSlugQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSuppliersAdvanceBalancesSlug.key, slug, queryParams] as QueryKey,
    fun: () =>
      getSuppliersAdvanceBalancesSlug(
        slug,

        queryParams,

        configOverride,
      ),
  };
};
useGetSuppliersAdvanceBalancesSlug.prefetch = (
  client: QueryClient,
  slug: string,
  queryParams: GetSuppliersAdvanceBalancesSlugQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<InvoiceAdvanceBalance>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersAdvanceBalancesSlug.info(
    slug,

    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSuppliersBankAccounts = (
  queryParams?: GetSuppliersBankAccountsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<SupplierBankAccount[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersBankAccounts.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSuppliersBankAccounts.info = (
  queryParams?: GetSuppliersBankAccountsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSuppliersBankAccounts.key, queryParams] as QueryKey,
    fun: () =>
      getSuppliersBankAccounts(
        queryParams,

        configOverride,
      ),
  };
};
useGetSuppliersBankAccounts.prefetch = (
  client: QueryClient,
  queryParams?: GetSuppliersBankAccountsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<SupplierBankAccount[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersBankAccounts.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSuppliersBankAccountsId = (
  /** A UUID string identifying this supplier bank account. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<SupplierBankAccount>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersBankAccountsId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSuppliersBankAccountsId.info = (
  /** A UUID string identifying this supplier bank account. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSuppliersBankAccountsId.key, id] as QueryKey,
    fun: () =>
      getSuppliersBankAccountsId(
        id,

        configOverride,
      ),
  };
};
useGetSuppliersBankAccountsId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this supplier bank account. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<SupplierBankAccount>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersBankAccountsId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSuppliersContacts = (
  queryParams?: GetSuppliersContactsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Contact[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersContacts.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSuppliersContacts.info = (
  queryParams?: GetSuppliersContactsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSuppliersContacts.key, queryParams] as QueryKey,
    fun: () =>
      getSuppliersContacts(
        queryParams,

        configOverride,
      ),
  };
};
useGetSuppliersContacts.prefetch = (
  client: QueryClient,
  queryParams?: GetSuppliersContactsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Contact[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersContacts.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSuppliersContactsId = (
  /** A UUID string identifying this supplier contact. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Contact>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersContactsId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSuppliersContactsId.info = (
  /** A UUID string identifying this supplier contact. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSuppliersContactsId.key, id] as QueryKey,
    fun: () =>
      getSuppliersContactsId(
        id,

        configOverride,
      ),
  };
};
useGetSuppliersContactsId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this supplier contact. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Contact>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersContactsId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSuppliersContactsPermissions = (
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersContactsPermissions.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSuppliersContactsPermissions.info = (
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSuppliersContactsPermissions.key] as QueryKey,
    fun: () => getSuppliersContactsPermissions(configOverride),
  };
};
useGetSuppliersContactsPermissions.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersContactsPermissions.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSuppliersReviewAnswers = (
  queryParams?: GetSuppliersReviewAnswersQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Answer[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersReviewAnswers.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSuppliersReviewAnswers.info = (
  queryParams?: GetSuppliersReviewAnswersQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSuppliersReviewAnswers.key, queryParams] as QueryKey,
    fun: () =>
      getSuppliersReviewAnswers(
        queryParams,

        configOverride,
      ),
  };
};
useGetSuppliersReviewAnswers.prefetch = (
  client: QueryClient,
  queryParams?: GetSuppliersReviewAnswersQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Answer[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersReviewAnswers.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSuppliersReviewAnswersId = (
  /** A UUID string identifying this answer. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Answer>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersReviewAnswersId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSuppliersReviewAnswersId.info = (
  /** A UUID string identifying this answer. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSuppliersReviewAnswersId.key, id] as QueryKey,
    fun: () =>
      getSuppliersReviewAnswersId(
        id,

        configOverride,
      ),
  };
};
useGetSuppliersReviewAnswersId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this answer. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Answer>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersReviewAnswersId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSuppliersReviewForms = (
  queryParams?: GetSuppliersReviewFormsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedReviewsListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersReviewForms.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSuppliersReviewForms.info = (
  queryParams?: GetSuppliersReviewFormsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSuppliersReviewForms.key, queryParams] as QueryKey,
    fun: () =>
      getSuppliersReviewForms(
        queryParams,

        configOverride,
      ),
  };
};
useGetSuppliersReviewForms.prefetch = (
  client: QueryClient,
  queryParams?: GetSuppliersReviewFormsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedReviewsListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersReviewForms.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSuppliersReviewFormsPermissions = (
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetSuppliersReviewFormsPermissions.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSuppliersReviewFormsPermissions.info = (
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSuppliersReviewFormsPermissions.key] as QueryKey,
    fun: () => getSuppliersReviewFormsPermissions(configOverride),
  };
};
useGetSuppliersReviewFormsPermissions.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetSuppliersReviewFormsPermissions.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSuppliersReviewFormsSlug = (
  slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Review>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersReviewFormsSlug.info(
    slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSuppliersReviewFormsSlug.info = (
  slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSuppliersReviewFormsSlug.key, slug] as QueryKey,
    fun: () =>
      getSuppliersReviewFormsSlug(
        slug,

        configOverride,
      ),
  };
};
useGetSuppliersReviewFormsSlug.prefetch = (
  client: QueryClient,
  slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Review>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersReviewFormsSlug.info(
    slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSuppliersReviewFormsSlugHistory = (
  slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Review>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersReviewFormsSlugHistory.info(
    slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSuppliersReviewFormsSlugHistory.info = (
  slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSuppliersReviewFormsSlugHistory.key, slug] as QueryKey,
    fun: () =>
      getSuppliersReviewFormsSlugHistory(
        slug,

        configOverride,
      ),
  };
};
useGetSuppliersReviewFormsSlugHistory.prefetch = (
  client: QueryClient,
  slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Review>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersReviewFormsSlugHistory.info(
    slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSuppliersReviewQuestions = (
  queryParams?: GetSuppliersReviewQuestionsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<ReviewQuestion[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersReviewQuestions.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSuppliersReviewQuestions.info = (
  queryParams?: GetSuppliersReviewQuestionsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSuppliersReviewQuestions.key, queryParams] as QueryKey,
    fun: () =>
      getSuppliersReviewQuestions(
        queryParams,

        configOverride,
      ),
  };
};
useGetSuppliersReviewQuestions.prefetch = (
  client: QueryClient,
  queryParams?: GetSuppliersReviewQuestionsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<ReviewQuestion[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersReviewQuestions.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSuppliersReviewQuestionsId = (
  /** A UUID string identifying this review question. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<ReviewQuestion>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersReviewQuestionsId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSuppliersReviewQuestionsId.info = (
  /** A UUID string identifying this review question. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSuppliersReviewQuestionsId.key, id] as QueryKey,
    fun: () =>
      getSuppliersReviewQuestionsId(
        id,

        configOverride,
      ),
  };
};
useGetSuppliersReviewQuestionsId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this review question. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<ReviewQuestion>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersReviewQuestionsId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSuppliersReviewTemplates = (
  queryParams?: GetSuppliersReviewTemplatesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<ReviewTemplateList[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersReviewTemplates.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSuppliersReviewTemplates.info = (
  queryParams?: GetSuppliersReviewTemplatesQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSuppliersReviewTemplates.key, queryParams] as QueryKey,
    fun: () =>
      getSuppliersReviewTemplates(
        queryParams,

        configOverride,
      ),
  };
};
useGetSuppliersReviewTemplates.prefetch = (
  client: QueryClient,
  queryParams?: GetSuppliersReviewTemplatesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<ReviewTemplateList[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersReviewTemplates.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSuppliersReviewTemplatesPermissions = (
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetSuppliersReviewTemplatesPermissions.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSuppliersReviewTemplatesPermissions.info = (
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSuppliersReviewTemplatesPermissions.key] as QueryKey,
    fun: () => getSuppliersReviewTemplatesPermissions(configOverride),
  };
};
useGetSuppliersReviewTemplatesPermissions.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetSuppliersReviewTemplatesPermissions.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSuppliersReviewTemplatesSlug = (
  slug: string,
  options?: SwaggerTypescriptUseQueryOptions<ReviewTemplate>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersReviewTemplatesSlug.info(
    slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSuppliersReviewTemplatesSlug.info = (
  slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSuppliersReviewTemplatesSlug.key, slug] as QueryKey,
    fun: () =>
      getSuppliersReviewTemplatesSlug(
        slug,

        configOverride,
      ),
  };
};
useGetSuppliersReviewTemplatesSlug.prefetch = (
  client: QueryClient,
  slug: string,
  options?: SwaggerTypescriptUseQueryOptions<ReviewTemplate>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersReviewTemplatesSlug.info(
    slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSuppliersReviewTemplatesSlugHistory = (
  slug: string,
  options?: SwaggerTypescriptUseQueryOptions<ReviewTemplate>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersReviewTemplatesSlugHistory.info(
    slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSuppliersReviewTemplatesSlugHistory.info = (
  slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSuppliersReviewTemplatesSlugHistory.key, slug] as QueryKey,
    fun: () =>
      getSuppliersReviewTemplatesSlugHistory(
        slug,

        configOverride,
      ),
  };
};
useGetSuppliersReviewTemplatesSlugHistory.prefetch = (
  client: QueryClient,
  slug: string,
  options?: SwaggerTypescriptUseQueryOptions<ReviewTemplate>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersReviewTemplatesSlugHistory.info(
    slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSuppliersSupplierActivityTypes = (
  queryParams?: GetSuppliersSupplierActivityTypesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<ActivityType[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersSupplierActivityTypes.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSuppliersSupplierActivityTypes.info = (
  queryParams?: GetSuppliersSupplierActivityTypesQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSuppliersSupplierActivityTypes.key, queryParams] as QueryKey,
    fun: () =>
      getSuppliersSupplierActivityTypes(
        queryParams,

        configOverride,
      ),
  };
};
useGetSuppliersSupplierActivityTypes.prefetch = (
  client: QueryClient,
  queryParams?: GetSuppliersSupplierActivityTypesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<ActivityType[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersSupplierActivityTypes.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSuppliersSupplierActivityTypesId = (
  /** A UUID string identifying this supplier activity type. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<ActivityType>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersSupplierActivityTypesId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSuppliersSupplierActivityTypesId.info = (
  /** A UUID string identifying this supplier activity type. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSuppliersSupplierActivityTypesId.key, id] as QueryKey,
    fun: () =>
      getSuppliersSupplierActivityTypesId(
        id,

        configOverride,
      ),
  };
};
useGetSuppliersSupplierActivityTypesId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this supplier activity type. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<ActivityType>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersSupplierActivityTypesId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSuppliersSupplierBranches = (
  queryParams?: GetSuppliersSupplierBranchesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Branch[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersSupplierBranches.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSuppliersSupplierBranches.info = (
  queryParams?: GetSuppliersSupplierBranchesQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSuppliersSupplierBranches.key, queryParams] as QueryKey,
    fun: () =>
      getSuppliersSupplierBranches(
        queryParams,

        configOverride,
      ),
  };
};
useGetSuppliersSupplierBranches.prefetch = (
  client: QueryClient,
  queryParams?: GetSuppliersSupplierBranchesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Branch[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersSupplierBranches.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSuppliersSupplierBranchesId = (
  /** A UUID string identifying this supplier branch. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Branch>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersSupplierBranchesId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSuppliersSupplierBranchesId.info = (
  /** A UUID string identifying this supplier branch. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSuppliersSupplierBranchesId.key, id] as QueryKey,
    fun: () =>
      getSuppliersSupplierBranchesId(
        id,

        configOverride,
      ),
  };
};
useGetSuppliersSupplierBranchesId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this supplier branch. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Branch>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersSupplierBranchesId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSuppliersSupplierTypes = (
  queryParams?: GetSuppliersSupplierTypesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<SupplierType[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersSupplierTypes.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSuppliersSupplierTypes.info = (
  queryParams?: GetSuppliersSupplierTypesQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSuppliersSupplierTypes.key, queryParams] as QueryKey,
    fun: () =>
      getSuppliersSupplierTypes(
        queryParams,

        configOverride,
      ),
  };
};
useGetSuppliersSupplierTypes.prefetch = (
  client: QueryClient,
  queryParams?: GetSuppliersSupplierTypesQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<SupplierType[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersSupplierTypes.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSuppliersSupplierTypesId = (
  /** A UUID string identifying this supplier type. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<SupplierType>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersSupplierTypesId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSuppliersSupplierTypesId.info = (
  /** A UUID string identifying this supplier type. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSuppliersSupplierTypesId.key, id] as QueryKey,
    fun: () =>
      getSuppliersSupplierTypesId(
        id,

        configOverride,
      ),
  };
};
useGetSuppliersSupplierTypesId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this supplier type. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<SupplierType>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersSupplierTypesId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSuppliersSuppliers = (
  queryParams?: GetSuppliersSuppliersQueryParams,
  options?: UseInfiniteQueryOptions<
    SwaggerResponse<PaginatedSupplierList>,
    RequestError | Error
  >,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersSuppliers.info(
    queryParams,
    configOverride,
  );
  const {
    data: { pages } = {},
    data,
    ...rest
  } = useInfiniteQuery({
    queryKey: key,
    queryFn: ({ pageParam }) =>
      fun({
        offset: pageParam,
      }),
    initialPageParam: 1,
    getNextPageParam: (_lastPage, allPages) => allPages.length + 1,
    ...(options as any),
  });

  const list = useMemo(() => paginationFlattenData(pages), [pages]);
  const total = getTotal(pages);

  const hasMore = useHasMore(pages, list, queryParams);

  return { ...rest, data, list, hasMore, total };
};
useGetSuppliersSuppliers.info = (
  queryParams?: GetSuppliersSuppliersQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSuppliersSuppliers.key, queryParams] as QueryKey,
    fun: (_param?: Partial<GetSuppliersSuppliersQueryParams>) =>
      getSuppliersSuppliers(
        {
          ..._param,
          ...queryParams,
        },

        configOverride,
      ),
  };
};
useGetSuppliersSuppliers.prefetch = (
  client: QueryClient,
  queryParams?: GetSuppliersSuppliersQueryParams,
  options?: UseInfiniteQueryOptions<
    SwaggerResponse<PaginatedSupplierList>,
    RequestError | Error
  >,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersSuppliers.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSuppliersSuppliersAutocomplete = (
  queryParams?: GetSuppliersSuppliersAutocompleteQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<SupplierAutocomplete[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersSuppliersAutocomplete.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSuppliersSuppliersAutocomplete.info = (
  queryParams?: GetSuppliersSuppliersAutocompleteQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSuppliersSuppliersAutocomplete.key, queryParams] as QueryKey,
    fun: () =>
      getSuppliersSuppliersAutocomplete(
        queryParams,

        configOverride,
      ),
  };
};
useGetSuppliersSuppliersAutocomplete.prefetch = (
  client: QueryClient,
  queryParams?: GetSuppliersSuppliersAutocompleteQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<SupplierAutocomplete[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersSuppliersAutocomplete.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSuppliersSuppliersPermissions = (
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersSuppliersPermissions.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSuppliersSuppliersPermissions.info = (
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSuppliersSuppliersPermissions.key] as QueryKey,
    fun: () => getSuppliersSuppliersPermissions(configOverride),
  };
};
useGetSuppliersSuppliersPermissions.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersSuppliersPermissions.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSuppliersSuppliersSlug = (
  slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Supplier>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersSuppliersSlug.info(
    slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSuppliersSuppliersSlug.info = (
  slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSuppliersSuppliersSlug.key, slug] as QueryKey,
    fun: () =>
      getSuppliersSuppliersSlug(
        slug,

        configOverride,
      ),
  };
};
useGetSuppliersSuppliersSlug.prefetch = (
  client: QueryClient,
  slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Supplier>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersSuppliersSlug.info(
    slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetSuppliersSuppliersSlugHistory = (
  slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Supplier>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersSuppliersSlugHistory.info(
    slug,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetSuppliersSuppliersSlugHistory.info = (
  slug: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getSuppliersSuppliersSlugHistory.key, slug] as QueryKey,
    fun: () =>
      getSuppliersSuppliersSlugHistory(
        slug,

        configOverride,
      ),
  };
};
useGetSuppliersSuppliersSlugHistory.prefetch = (
  client: QueryClient,
  slug: string,
  options?: SwaggerTypescriptUseQueryOptions<Supplier>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetSuppliersSuppliersSlugHistory.info(
    slug,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetWarehouseProducts = (
  queryParams: GetWarehouseProductsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedProductListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetWarehouseProducts.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetWarehouseProducts.info = (
  queryParams: GetWarehouseProductsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getWarehouseProducts.key, queryParams] as QueryKey,
    fun: () =>
      getWarehouseProducts(
        queryParams,

        configOverride,
      ),
  };
};
useGetWarehouseProducts.prefetch = (
  client: QueryClient,
  queryParams: GetWarehouseProductsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedProductListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetWarehouseProducts.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetWarehouseProductsId = (
  /** A UUID string identifying this product. */
  id: string,
  queryParams: GetWarehouseProductsIdQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Product>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetWarehouseProductsId.info(
    id,

    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetWarehouseProductsId.info = (
  /** A UUID string identifying this product. */
  id: string,
  queryParams: GetWarehouseProductsIdQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getWarehouseProductsId.key, id, queryParams] as QueryKey,
    fun: () =>
      getWarehouseProductsId(
        id,

        queryParams,

        configOverride,
      ),
  };
};
useGetWarehouseProductsId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this product. */
  id: string,
  queryParams: GetWarehouseProductsIdQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Product>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetWarehouseProductsId.info(
    id,

    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetWarehouseProductsIdAttachments = (
  /** A UUID string identifying this product. */
  id: string,
  queryParams: GetWarehouseProductsIdAttachmentsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Product>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetWarehouseProductsIdAttachments.info(
    id,

    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetWarehouseProductsIdAttachments.info = (
  /** A UUID string identifying this product. */
  id: string,
  queryParams: GetWarehouseProductsIdAttachmentsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getWarehouseProductsIdAttachments.key, id, queryParams] as QueryKey,
    fun: () =>
      getWarehouseProductsIdAttachments(
        id,

        queryParams,

        configOverride,
      ),
  };
};
useGetWarehouseProductsIdAttachments.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this product. */
  id: string,
  queryParams: GetWarehouseProductsIdAttachmentsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Product>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetWarehouseProductsIdAttachments.info(
    id,

    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetWarehouseProductsIdHistory = (
  /** A UUID string identifying this product. */
  id: string,
  queryParams: GetWarehouseProductsIdHistoryQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Product>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetWarehouseProductsIdHistory.info(
    id,

    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetWarehouseProductsIdHistory.info = (
  /** A UUID string identifying this product. */
  id: string,
  queryParams: GetWarehouseProductsIdHistoryQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getWarehouseProductsIdHistory.key, id, queryParams] as QueryKey,
    fun: () =>
      getWarehouseProductsIdHistory(
        id,

        queryParams,

        configOverride,
      ),
  };
};
useGetWarehouseProductsIdHistory.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this product. */
  id: string,
  queryParams: GetWarehouseProductsIdHistoryQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Product>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetWarehouseProductsIdHistory.info(
    id,

    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetWarehouseProductsIdTransactions = (
  /** A UUID string identifying this transaction. */
  id: string,
  queryParams: GetWarehouseProductsIdTransactionsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedTransactionListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetWarehouseProductsIdTransactions.info(
    id,

    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetWarehouseProductsIdTransactions.info = (
  /** A UUID string identifying this transaction. */
  id: string,
  queryParams: GetWarehouseProductsIdTransactionsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getWarehouseProductsIdTransactions.key, id, queryParams] as QueryKey,
    fun: () =>
      getWarehouseProductsIdTransactions(
        id,

        queryParams,

        configOverride,
      ),
  };
};
useGetWarehouseProductsIdTransactions.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this transaction. */
  id: string,
  queryParams: GetWarehouseProductsIdTransactionsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<PaginatedTransactionListList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetWarehouseProductsIdTransactions.info(
    id,

    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetWarehouseProductsPermissions = (
  queryParams: GetWarehouseProductsPermissionsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetWarehouseProductsPermissions.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetWarehouseProductsPermissions.info = (
  queryParams: GetWarehouseProductsPermissionsQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getWarehouseProductsPermissions.key, queryParams] as QueryKey,
    fun: () =>
      getWarehouseProductsPermissions(
        queryParams,

        configOverride,
      ),
  };
};
useGetWarehouseProductsPermissions.prefetch = (
  client: QueryClient,
  queryParams: GetWarehouseProductsPermissionsQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetWarehouseProductsPermissions.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetWarehouseTransactions = (
  options?: SwaggerTypescriptUseQueryOptions<TransactionList[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetWarehouseTransactions.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetWarehouseTransactions.info = (configOverride?: AxiosRequestConfig) => {
  return {
    key: [getWarehouseTransactions.key] as QueryKey,
    fun: () => getWarehouseTransactions(configOverride),
  };
};
useGetWarehouseTransactions.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<TransactionList[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetWarehouseTransactions.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetWarehouseTransactionsId = (
  /** A UUID string identifying this transaction. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<TransactionList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetWarehouseTransactionsId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetWarehouseTransactionsId.info = (
  /** A UUID string identifying this transaction. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getWarehouseTransactionsId.key, id] as QueryKey,
    fun: () =>
      getWarehouseTransactionsId(
        id,

        configOverride,
      ),
  };
};
useGetWarehouseTransactionsId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this transaction. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<TransactionList>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetWarehouseTransactionsId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetWarehouseTransactionsPermissions = (
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetWarehouseTransactionsPermissions.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetWarehouseTransactionsPermissions.info = (
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getWarehouseTransactionsPermissions.key] as QueryKey,
    fun: () => getWarehouseTransactionsPermissions(configOverride),
  };
};
useGetWarehouseTransactionsPermissions.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetWarehouseTransactionsPermissions.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetWarehouseWarehouses = (
  queryParams?: GetWarehouseWarehousesQueryParams,
  options?: UseInfiniteQueryOptions<
    SwaggerResponse<PaginatedWarehouseList>,
    RequestError | Error
  >,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetWarehouseWarehouses.info(
    queryParams,
    configOverride,
  );
  const {
    data: { pages } = {},
    data,
    ...rest
  } = useInfiniteQuery({
    queryKey: key,
    queryFn: ({ pageParam }) =>
      fun({
        offset: pageParam,
      }),
    initialPageParam: 1,
    getNextPageParam: (_lastPage, allPages) => allPages.length + 1,
    ...(options as any),
  });

  const list = useMemo(() => paginationFlattenData(pages), [pages]);
  const total = getTotal(pages);

  const hasMore = useHasMore(pages, list, queryParams);

  return { ...rest, data, list, hasMore, total };
};
useGetWarehouseWarehouses.info = (
  queryParams?: GetWarehouseWarehousesQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getWarehouseWarehouses.key, queryParams] as QueryKey,
    fun: (_param?: Partial<GetWarehouseWarehousesQueryParams>) =>
      getWarehouseWarehouses(
        {
          ..._param,
          ...queryParams,
        },

        configOverride,
      ),
  };
};
useGetWarehouseWarehouses.prefetch = (
  client: QueryClient,
  queryParams?: GetWarehouseWarehousesQueryParams,
  options?: UseInfiniteQueryOptions<
    SwaggerResponse<PaginatedWarehouseList>,
    RequestError | Error
  >,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetWarehouseWarehouses.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetWarehouseWarehousesAvailable = (
  queryParams?: GetWarehouseWarehousesAvailableQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Warehouse[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetWarehouseWarehousesAvailable.info(
    queryParams,
    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetWarehouseWarehousesAvailable.info = (
  queryParams?: GetWarehouseWarehousesAvailableQueryParams,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getWarehouseWarehousesAvailable.key, queryParams] as QueryKey,
    fun: () =>
      getWarehouseWarehousesAvailable(
        queryParams,

        configOverride,
      ),
  };
};
useGetWarehouseWarehousesAvailable.prefetch = (
  client: QueryClient,
  queryParams?: GetWarehouseWarehousesAvailableQueryParams,
  options?: SwaggerTypescriptUseQueryOptions<Warehouse[]>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetWarehouseWarehousesAvailable.info(
    queryParams,
    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetWarehouseWarehousesId = (
  /** A UUID string identifying this warehouse. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Warehouse>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetWarehouseWarehousesId.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetWarehouseWarehousesId.info = (
  /** A UUID string identifying this warehouse. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getWarehouseWarehousesId.key, id] as QueryKey,
    fun: () =>
      getWarehouseWarehousesId(
        id,

        configOverride,
      ),
  };
};
useGetWarehouseWarehousesId.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this warehouse. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Warehouse>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetWarehouseWarehousesId.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetWarehouseWarehousesIdHistory = (
  /** A UUID string identifying this warehouse. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Warehouse>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetWarehouseWarehousesIdHistory.info(
    id,

    configOverride,
  );
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetWarehouseWarehousesIdHistory.info = (
  /** A UUID string identifying this warehouse. */
  id: string,
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getWarehouseWarehousesIdHistory.key, id] as QueryKey,
    fun: () =>
      getWarehouseWarehousesIdHistory(
        id,

        configOverride,
      ),
  };
};
useGetWarehouseWarehousesIdHistory.prefetch = (
  client: QueryClient,

  /** A UUID string identifying this warehouse. */
  id: string,
  options?: SwaggerTypescriptUseQueryOptions<Warehouse>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } = useGetWarehouseWarehousesIdHistory.info(
    id,

    configOverride,
  );

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const useGetWarehouseWarehousesPermissions = (
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetWarehouseWarehousesPermissions.info(configOverride);
  return useQuery({
    queryKey: key,
    queryFn: fun,
    ...options,
  });
};
useGetWarehouseWarehousesPermissions.info = (
  configOverride?: AxiosRequestConfig,
) => {
  return {
    key: [getWarehouseWarehousesPermissions.key] as QueryKey,
    fun: () => getWarehouseWarehousesPermissions(configOverride),
  };
};
useGetWarehouseWarehousesPermissions.prefetch = (
  client: QueryClient,
  options?: SwaggerTypescriptUseQueryOptions<Permissions>,
  configOverride?: AxiosRequestConfig,
) => {
  const { key, fun } =
    useGetWarehouseWarehousesPermissions.info(configOverride);

  return client.getQueryData(key)
    ? Promise.resolve()
    : client.prefetchQuery({
        queryKey: key,
        queryFn: () => fun(),
        ...options,
      });
};
export const usePatchAuthGroupsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    GroupMember,
    {
      /** A unique integer value identifying this group. */
      id: number;
      requestBody: PatchedGroupMemberRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchAuthGroupsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchAuthUser = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    CustomUserDetails,
    { requestBody: PatchedCustomUserDetailsRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return patchAuthUser(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchAuthUserGroupsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    UserGroup,
    {
      /** A unique integer value identifying this user. */
      id: number;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return patchAuthUserGroupsId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchCodesActivitiesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Activity,
    {
      /** A UUID string identifying this Activity. */
      id: string;
      requestBody: PatchedActivityRequest;
      queryParams?: PatchCodesActivitiesIdQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { id, requestBody, queryParams, configOverride } = _o || {};

      return patchCodesActivitiesId(
        id,
        requestBody,
        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchCodesActivityAccountCodesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    SupplierAccountingCode,
    {
      /** A UUID string identifying this accounting code. */
      id: string;
      requestBody: PatchedSupplierAccountingCodeRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchCodesActivityAccountCodesId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchCodesResourcesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Resource,
    {
      /** A UUID string identifying this Resource. */
      id: string;
      requestBody: PatchedResourceRequest;
      queryParams?: PatchCodesResourcesIdQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { id, requestBody, queryParams, configOverride } = _o || {};

      return patchCodesResourcesId(
        id,
        requestBody,
        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchCodesWbsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    WBS,
    {
      /** A UUID string identifying this WBS. */
      id: string;
      requestBody: PatchedWBSRequest;
      queryParams?: PatchCodesWbsIdQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { id, requestBody, queryParams, configOverride } = _o || {};

      return patchCodesWbsId(id, requestBody, queryParams, configOverride);
    },
    ...options,
  });
};

export const usePatchCommonBankNamesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    BankName,
    {
      /** A UUID string identifying this Bank Name. */
      id: string;
      requestBody: PatchedBankNameRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchCommonBankNamesId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchCommonCurrenciesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Currency,
    {
      /** A UUID string identifying this Currency. */
      id: string;
      requestBody: PatchedCurrencyRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchCommonCurrenciesId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchCommonPackagingMethodsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    PackagingMethod,
    {
      /** A UUID string identifying this Packaging Method. */
      id: string;
      requestBody: PatchedPackagingMethodRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchCommonPackagingMethodsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchCommonPaymentMethodsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    PaymentMethod,
    {
      /** A UUID string identifying this Payment Method. */
      id: string;
      requestBody: PatchedPaymentMethodRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchCommonPaymentMethodsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchCommonResourceUnitsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    ResourceUnit,
    {
      /** A UUID string identifying this Resource Unit. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return patchCommonResourceUnitsId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchCommonTaxParametersId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    TaxParameter,
    {
      /** A UUID string identifying this Tax Parameter. */
      id: string;
      requestBody: PatchedTaxParameterRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchCommonTaxParametersId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchCommonVatWitholdingsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Vatwitholding,
    {
      /** A UUID string identifying this Vat Witholding. */
      id: string;
      requestBody: PatchedVatwitholdingRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchCommonVatWitholdingsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchFinanceAccountsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Account,
    {
      /** A UUID string identifying this account. */
      id: string;
      requestBody: PatchedAccountRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchFinanceAccountsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchFinanceBankAccountsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    BankAccount,
    {
      /** A UUID string identifying this bank account. */
      id: string;
      requestBody: PatchedBankAccountRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchFinanceBankAccountsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchFinanceCashAccountsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    CashAccount,
    {
      /** A UUID string identifying this cash account. */
      id: string;
      requestBody: PatchedCashAccountRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchFinanceCashAccountsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchFinanceExpensesCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Expense,
    { counter__slug: string; requestBody: PatchedExpenseRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,
        requestBody,

        configOverride,
      } = _o || {};

      return patchFinanceExpensesCounter__slug(
        counter__slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchFinanceIncomeInvoiceCategoriesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    IncomeInvoiceCategory,
    {
      /** A UUID string identifying this income invoice category. */
      id: string;
      requestBody: PatchedIncomeInvoiceCategoryRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchFinanceIncomeInvoiceCategoriesId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchFinanceIncomeInvoicesCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    IncomeInvoice,
    { counter__slug: string; requestBody: PatchedIncomeInvoiceRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,
        requestBody,

        configOverride,
      } = _o || {};

      return patchFinanceIncomeInvoicesCounter__slug(
        counter__slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchFinancePaymentBondsCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    PaymentBond,
    { counter__slug: string; requestBody: PatchedPaymentBondRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,
        requestBody,

        configOverride,
      } = _o || {};

      return patchFinancePaymentBondsCounter__slug(
        counter__slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchFinancePaymentChequesCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    PaymentCheque,
    { counter__slug: string; requestBody: PatchedPaymentChequeRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,
        requestBody,

        configOverride,
      } = _o || {};

      return patchFinancePaymentChequesCounter__slug(
        counter__slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchFinancePaymentDetailsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    PaymentDetail,
    {
      /** A UUID string identifying this Payment Detail. */
      id: string;
      requestBody: PatchedPaymentDetailRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchFinancePaymentDetailsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchFinanceRevenueBondsCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    RevenueBond,
    { counter__slug: string; requestBody: PatchedRevenueBondRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,
        requestBody,

        configOverride,
      } = _o || {};

      return patchFinanceRevenueBondsCounter__slug(
        counter__slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchFinanceRevenueChequesCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    RevenueCheque,
    { counter__slug: string; requestBody: PatchedRevenueChequeRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,
        requestBody,

        configOverride,
      } = _o || {};

      return patchFinanceRevenueChequesCounter__slug(
        counter__slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchFinanceRevenueDetailsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    RevenueDetail,
    {
      /** A UUID string identifying this Revenue Detail. */
      id: string;
      requestBody: PatchedRevenueDetailRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchFinanceRevenueDetailsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchFinanceSlipsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Slip,
    {
      /** A UUID string identifying this slip. */
      id: string;
      requestBody: PatchedSlipRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchFinanceSlipsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchFinanceSupplierAccountsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    SupplierAccount,
    {
      /** A UUID string identifying this supplier account. */
      id: string;
      requestBody: PatchedSupplierAccountRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchFinanceSupplierAccountsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchFinanceTxnsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Transaction,
    {
      /** A UUID string identifying this transaction. */
      id: string;
      requestBody: PatchedTransactionRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchFinanceTxnsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchHrCrewsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Crew,
    {
      /** A UUID string identifying this Crew. */
      id: string;
      requestBody: PatchedCrewRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchHrCrewsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchHrDepartmentsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    MainDepartment,
    {
      /** A UUID string identifying this Main Department. */
      id: string;
      requestBody: PatchedMainDepartmentRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchHrDepartmentsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchHrLocationsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    LocationParameter,
    {
      /** A UUID string identifying this Location. */
      id: string;
      requestBody: PatchedLocationParameterRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchHrLocationsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchHrPersonnelId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Person,
    {
      /** A UUID string identifying this Person. */
      id: string;
      requestBody: PatchedPersonRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchHrPersonnelId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchHrPositionsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    MainPosition,
    {
      /** A UUID string identifying this Main Position. */
      id: string;
      requestBody: PatchedMainPositionRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchHrPositionsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchHrProfessionsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Profession,
    {
      /** A UUID string identifying this Profession. */
      id: string;
      requestBody: PatchedProfessionRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchHrProfessionsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchHrQuitReasonsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    QuitReason,
    {
      /** A UUID string identifying this Quit Reason. */
      id: string;
      requestBody: PatchedQuitReasonRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchHrQuitReasonsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchHrQuitRecordsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    QuitRecord,
    {
      /** A UUID string identifying this Quit Record. */
      id: string;
      requestBody: PatchedQuitRecordRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchHrQuitRecordsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchHrSalariesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Salary,
    {
      /** A UUID string identifying this Salary. */
      id: string;
      requestBody: PatchedSalaryRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchHrSalariesId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchHrSalaryPermissionsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    ProjectSalaryPermission,
    {
      /** A unique integer value identifying this Project Salary Permission. */
      id: number;
      requestBody: PatchedProjectSalaryPermissionRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchHrSalaryPermissionsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchProcurementAdvancePaymentsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    OrderAdvancePayment,
    {
      /** A UUID string identifying this order advance payment. */
      id: string;
      requestBody: PatchedOrderAdvancePaymentRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchProcurementAdvancePaymentsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchProcurementInvoicesCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Invoice,
    { counter__slug: string; requestBody: PatchedInvoiceRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,
        requestBody,

        configOverride,
      } = _o || {};

      return patchProcurementInvoicesCounter__slug(
        counter__slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchProcurementOrdersCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Order,
    { counter__slug: string; requestBody: PatchedOrderRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,
        requestBody,

        configOverride,
      } = _o || {};

      return patchProcurementOrdersCounter__slug(
        counter__slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchProcurementRequestTypesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    RequestType,
    {
      /** A UUID string identifying this request type. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return patchProcurementRequestTypesId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchProcurementRequestsCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Request,
    { counter__slug: string; requestBody: PatchedRequestRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,
        requestBody,

        configOverride,
      } = _o || {};

      return patchProcurementRequestsCounter__slug(
        counter__slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchProcurementSpecialInvoiceTypesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    SpecialInvoiceType,
    {
      /** A UUID string identifying this special invoice type. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return patchProcurementSpecialInvoiceTypesId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchProcurementSpecialInvoicesCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    SpecialInvoice,
    { counter__slug: string; requestBody: PatchedSpecialInvoiceRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,
        requestBody,

        configOverride,
      } = _o || {};

      return patchProcurementSpecialInvoicesCounter__slug(
        counter__slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchProjectsAccountingtypesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    AccountingType,
    {
      /** A UUID string identifying this accounting type. */
      id: string;
      requestBody: PatchedAccountingTypeRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchProjectsAccountingtypesId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchProjectsCitiesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    City,
    {
      /** A UUID string identifying this city. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return patchProjectsCitiesId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchProjectsCompaniesSlug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Company,
    { slug: string; requestBody: PatchedCompanyRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        slug,
        requestBody,

        configOverride,
      } = _o || {};

      return patchProjectsCompaniesSlug(
        slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchProjectsCountriesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Country,
    {
      /** A UUID string identifying this country. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return patchProjectsCountriesId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchProjectsDistrictsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    District,
    {
      /** A UUID string identifying this district. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return patchProjectsDistrictsId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchProjectsProjectsSlug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Project,
    {
      slug: string;
      requestBody: PatchedProjectRequest;
      queryParams?: PatchProjectsProjectsSlugQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { slug, requestBody, queryParams, configOverride } = _o || {};

      return patchProjectsProjectsSlug(
        slug,
        requestBody,
        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchProjectsProjecttypesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    ProjectTypeParam,
    {
      /** A UUID string identifying this project type. */
      id: string;
      requestBody: PatchedProjectTypeParamRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchProjectsProjecttypesId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchProjectsResponsiblesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Responsible,
    {
      /** A UUID string identifying this responsible. */
      id: string;
      requestBody: PatchedResponsibleRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchProjectsResponsiblesId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchProjectsResponsibletypesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    ResponsibleTypeParam,
    {
      /** A UUID string identifying this responsible type. */
      id: string;
      requestBody: PatchedResponsibleTypeParamRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchProjectsResponsibletypesId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchRatesRatesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Rate,
    {
      /** A unique integer value identifying this rate. */
      id: number;
      requestBody: PatchedRateRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchRatesRatesId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchSubcontractsContractCategoriesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    ContractCategory,
    {
      /** A UUID string identifying this contract category. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return patchSubcontractsContractCategoriesId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchSubcontractsContractCollateralReasonId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    ContractCollateralReason,
    {
      /** A UUID string identifying this contract collateral reason. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return patchSubcontractsContractCollateralReasonId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchSubcontractsContractCollateralStatusId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    ContractCollateralStatus,
    {
      /** A UUID string identifying this contract collateral status. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return patchSubcontractsContractCollateralStatusId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchSubcontractsContractCollateralTypesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    ContractCollateralType,
    {
      /** A UUID string identifying this contract collateral type. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return patchSubcontractsContractCollateralTypesId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchSubcontractsContractsCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Contract,
    { counter__slug: string; requestBody: PatchedContractRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,
        requestBody,

        configOverride,
      } = _o || {};

      return patchSubcontractsContractsCounter__slug(
        counter__slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchSubcontractsDeductionReturnsCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    DeductionReturn,
    { counter__slug: string; requestBody: PatchedDeductionReturnRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,
        requestBody,

        configOverride,
      } = _o || {};

      return patchSubcontractsDeductionReturnsCounter__slug(
        counter__slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchSubcontractsProgressesCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Progress,
    { counter__slug: string; requestBody: PatchedProgressRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,
        requestBody,

        configOverride,
      } = _o || {};

      return patchSubcontractsProgressesCounter__slug(
        counter__slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchSubcontractsRevisionsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Revision,
    {
      /** A UUID string identifying this contract revision. */
      id: string;
      requestBody: PatchedRevisionRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchSubcontractsRevisionsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchSuppliersAccountingCodesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    SupplierAccountingCode,
    {
      /** A UUID string identifying this supplier accounting code. */
      id: string;
      requestBody: PatchedSupplierAccountingCodeRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchSuppliersAccountingCodesId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchSuppliersBankAccountsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    SupplierBankAccount,
    {
      /** A UUID string identifying this supplier bank account. */
      id: string;
      requestBody: PatchedSupplierBankAccountRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchSuppliersBankAccountsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchSuppliersContactsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Contact,
    {
      /** A UUID string identifying this supplier contact. */
      id: string;
      requestBody: PatchedContactRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchSuppliersContactsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchSuppliersReviewAnswersId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Answer,
    {
      /** A UUID string identifying this answer. */
      id: string;
      requestBody: PatchedAnswerRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchSuppliersReviewAnswersId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchSuppliersReviewFormsSlug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Review,
    { slug: string; requestBody: PatchedReviewRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        slug,
        requestBody,

        configOverride,
      } = _o || {};

      return patchSuppliersReviewFormsSlug(
        slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchSuppliersReviewQuestionsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    ReviewQuestion,
    {
      /** A UUID string identifying this review question. */
      id: string;
      requestBody: PatchedReviewQuestionRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchSuppliersReviewQuestionsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchSuppliersReviewTemplatesSlug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    ReviewTemplate,
    { slug: string; requestBody: PatchedReviewTemplateRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        slug,
        requestBody,

        configOverride,
      } = _o || {};

      return patchSuppliersReviewTemplatesSlug(
        slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchSuppliersSupplierActivityTypesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    ActivityType,
    {
      /** A UUID string identifying this supplier activity type. */
      id: string;
      requestBody: PatchedActivityTypeRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchSuppliersSupplierActivityTypesId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchSuppliersSupplierBranchesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Branch,
    {
      /** A UUID string identifying this supplier branch. */
      id: string;
      requestBody: PatchedBranchRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchSuppliersSupplierBranchesId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchSuppliersSupplierTypesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    SupplierType,
    {
      /** A UUID string identifying this supplier type. */
      id: string;
      requestBody: PatchedSupplierTypeRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchSuppliersSupplierTypesId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchSuppliersSuppliersSlug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Supplier,
    { slug: string; requestBody: PatchedSupplierRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        slug,
        requestBody,

        configOverride,
      } = _o || {};

      return patchSuppliersSuppliersSlug(
        slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchWarehouseProductsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Product,
    {
      /** A UUID string identifying this product. */
      id: string;
      requestBody: PatchedProductCreateRequest;
      queryParams: PatchWarehouseProductsIdQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { id, requestBody, queryParams, configOverride } = _o || {};

      return patchWarehouseProductsId(
        id,
        requestBody,
        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchWarehouseTransactionsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    TransactionList,
    {
      /** A UUID string identifying this transaction. */
      id: string;
      requestBody: PatchedTransactionListCreateRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchWarehouseTransactionsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePatchWarehouseWarehousesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Warehouse,
    {
      /** A UUID string identifying this warehouse. */
      id: string;
      requestBody: PatchedWarehouseRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return patchWarehouseWarehousesId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostAuthGroups = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: GroupMemberRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postAuthGroups(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostAuthUserGroups = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptionsVoid<any, TExtra>,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { configOverride } = _o || {};

      return postAuthUserGroups(configOverride);
    },
    ...options,
  });
};

export const usePostCodesActivitiesAdd_root = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Activity,
    {
      requestBody: ActivityRequest;
      queryParams?: PostCodesActivitiesAdd_rootQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { requestBody, queryParams, configOverride } = _o || {};

      return postCodesActivitiesAdd_root(
        requestBody,
        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const usePostCodesActivitiesIdAdd_child = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Activity,
    {
      /** A UUID string identifying this Activity. */
      id: string;
      requestBody: ActivityRequest;
      queryParams?: PostCodesActivitiesIdAdd_childQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { id, requestBody, queryParams, configOverride } = _o || {};

      return postCodesActivitiesIdAdd_child(
        id,
        requestBody,
        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const usePostCodesActivitiesIdAdd_sibling = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Activity,
    {
      /** A UUID string identifying this Activity. */
      id: string;
      requestBody: ActivityRequest;
      queryParams?: PostCodesActivitiesIdAdd_siblingQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { id, requestBody, queryParams, configOverride } = _o || {};

      return postCodesActivitiesIdAdd_sibling(
        id,
        requestBody,
        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const usePostCodesActivitiesIdMove_under = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Activity,
    {
      /** A UUID string identifying this Activity. */
      id: string;
      requestBody: ActivityRequest;
      queryParams?: PostCodesActivitiesIdMove_underQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { id, requestBody, queryParams, configOverride } = _o || {};

      return postCodesActivitiesIdMove_under(
        id,
        requestBody,
        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const usePostCodesActivityAccountCodes = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: SupplierAccountingCodeRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postCodesActivityAccountCodes(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostCodesResourcesAdd_root = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Resource,
    {
      requestBody: ResourceRequest;
      queryParams?: PostCodesResourcesAdd_rootQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { requestBody, queryParams, configOverride } = _o || {};

      return postCodesResourcesAdd_root(
        requestBody,
        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const usePostCodesResourcesIdAdd_child = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Resource,
    {
      /** A UUID string identifying this Resource. */
      id: string;
      requestBody: ResourceRequest;
      queryParams?: PostCodesResourcesIdAdd_childQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { id, requestBody, queryParams, configOverride } = _o || {};

      return postCodesResourcesIdAdd_child(
        id,
        requestBody,
        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const usePostCodesResourcesIdAdd_sibling = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Resource,
    {
      /** A UUID string identifying this Resource. */
      id: string;
      requestBody: ResourceRequest;
      queryParams?: PostCodesResourcesIdAdd_siblingQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { id, requestBody, queryParams, configOverride } = _o || {};

      return postCodesResourcesIdAdd_sibling(
        id,
        requestBody,
        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const usePostCodesResourcesIdMove_under = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Resource,
    {
      /** A UUID string identifying this Resource. */
      id: string;
      requestBody: ResourceRequest;
      queryParams?: PostCodesResourcesIdMove_underQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { id, requestBody, queryParams, configOverride } = _o || {};

      return postCodesResourcesIdMove_under(
        id,
        requestBody,
        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const usePostCodesWbsAdd_root = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    WBS,
    { requestBody: WBSRequest; queryParams?: PostCodesWbsAdd_rootQueryParams },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { requestBody, queryParams, configOverride } = _o || {};

      return postCodesWbsAdd_root(requestBody, queryParams, configOverride);
    },
    ...options,
  });
};

export const usePostCodesWbsIdAdd_child = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    WBS,
    {
      /** A UUID string identifying this WBS. */
      id: string;
      requestBody: WBSRequest;
      queryParams?: PostCodesWbsIdAdd_childQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { id, requestBody, queryParams, configOverride } = _o || {};

      return postCodesWbsIdAdd_child(
        id,
        requestBody,
        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const usePostCodesWbsIdAdd_sibling = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    WBS,
    {
      /** A UUID string identifying this WBS. */
      id: string;
      requestBody: WBSRequest;
      queryParams?: PostCodesWbsIdAdd_siblingQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { id, requestBody, queryParams, configOverride } = _o || {};

      return postCodesWbsIdAdd_sibling(
        id,
        requestBody,
        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const usePostCodesWbsIdMove_under = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    WBS,
    {
      /** A UUID string identifying this WBS. */
      id: string;
      requestBody: WBSRequest;
      queryParams?: PostCodesWbsIdMove_underQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { id, requestBody, queryParams, configOverride } = _o || {};

      return postCodesWbsIdMove_under(
        id,
        requestBody,
        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const usePostCommonBankNames = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: BankNameRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postCommonBankNames(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostCommonCurrencies = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: CurrencyRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postCommonCurrencies(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostCommonPackagingMethods = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: PackagingMethodRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postCommonPackagingMethods(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostCommonPaymentMethods = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: PaymentMethodRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postCommonPaymentMethods(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostCommonResourceUnits = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptionsVoid<any, TExtra>,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { configOverride } = _o || {};

      return postCommonResourceUnits(configOverride);
    },
    ...options,
  });
};

export const usePostCommonTaxParameters = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: TaxParameterRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postCommonTaxParameters(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostCommonVatWitholdings = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: VatwitholdingRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postCommonVatWitholdings(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostFinanceAccounts = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: AccountRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postFinanceAccounts(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostFinanceBankAccounts = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: BankAccountRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postFinanceBankAccounts(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostFinanceCashAccounts = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: CashAccountRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postFinanceCashAccounts(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostFinanceExpenses = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: ExpenseRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postFinanceExpenses(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostFinanceIncomeInvoiceCategories = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: IncomeInvoiceCategoryRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postFinanceIncomeInvoiceCategories(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostFinanceIncomeInvoices = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: IncomeInvoiceRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postFinanceIncomeInvoices(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostFinanceIncomeInvoicesAdd_attachment = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    IncomeInvoice,
    { requestBody: IncomeInvoiceRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postFinanceIncomeInvoicesAdd_attachment(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostFinanceIncomeInvoicesApprovals = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    PaginatedTransitionList,
    {
      requestBody: IncomeInvoiceRequest;
      queryParams?: PostFinanceIncomeInvoicesApprovalsQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { requestBody, queryParams, configOverride } = _o || {};

      return postFinanceIncomeInvoicesApprovals(
        requestBody,
        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const usePostFinanceIncomeInvoicesApprove = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    IncomeInvoice,
    { requestBody: ApproveSerializerForIncomeInvoiceRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postFinanceIncomeInvoicesApprove(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostFinancePaymentBonds = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: PaymentBondRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postFinancePaymentBonds(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostFinancePaymentCheques = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: PaymentChequeRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postFinancePaymentCheques(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostFinancePaymentDetailsIdDelete = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    PaymentDetailDelete,
    {
      /** A UUID string identifying this Payment Detail. */
      id: string;
      requestBody: PaymentDetailDeleteRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return postFinancePaymentDetailsIdDelete(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostFinancePaymentDetailsRealize = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    PaymentDetailRealize,
    { requestBody: PaymentDetailRealizeRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postFinancePaymentDetailsRealize(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostFinancePlannedPaymentsPay_by_bond = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    PayByBond,
    {
      requestBody: PayByBondRequest;
      queryParams?: PostFinancePlannedPaymentsPay_by_bondQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { requestBody, queryParams, configOverride } = _o || {};

      return postFinancePlannedPaymentsPay_by_bond(
        requestBody,
        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const usePostFinancePlannedPaymentsPay_by_cheque = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    PayByCheque,
    {
      requestBody: PayByChequeRequest;
      queryParams?: PostFinancePlannedPaymentsPay_by_chequeQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { requestBody, queryParams, configOverride } = _o || {};

      return postFinancePlannedPaymentsPay_by_cheque(
        requestBody,
        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const usePostFinancePlannedPaymentsPay_by_filter = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    PayByFilter,
    {
      requestBody: PayByFilterRequest;
      queryParams?: PostFinancePlannedPaymentsPay_by_filterQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { requestBody, queryParams, configOverride } = _o || {};

      return postFinancePlannedPaymentsPay_by_filter(
        requestBody,
        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const usePostFinancePlannedPaymentsPay_selected = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    PaySelected,
    { requestBody: PaySelectedRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postFinancePlannedPaymentsPay_selected(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostFinancePlannedRevenuePay_by_bond = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    PayByBond,
    {
      requestBody: PayByBondRequest;
      queryParams?: PostFinancePlannedRevenuePay_by_bondQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { requestBody, queryParams, configOverride } = _o || {};

      return postFinancePlannedRevenuePay_by_bond(
        requestBody,
        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const usePostFinancePlannedRevenuePay_by_cheque = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    PayByCheque,
    {
      requestBody: PayByChequeRequest;
      queryParams?: PostFinancePlannedRevenuePay_by_chequeQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { requestBody, queryParams, configOverride } = _o || {};

      return postFinancePlannedRevenuePay_by_cheque(
        requestBody,
        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const usePostFinancePlannedRevenuePay_by_filter = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    PayByFilter,
    {
      requestBody: PayByFilterRequest;
      queryParams?: PostFinancePlannedRevenuePay_by_filterQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { requestBody, queryParams, configOverride } = _o || {};

      return postFinancePlannedRevenuePay_by_filter(
        requestBody,
        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const usePostFinancePlannedRevenuePay_selected = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    PaySelected,
    { requestBody: PaySelectedRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postFinancePlannedRevenuePay_selected(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostFinanceRevenueBonds = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: RevenueBondRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postFinanceRevenueBonds(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostFinanceRevenueCheques = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: RevenueChequeRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postFinanceRevenueCheques(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostFinanceRevenueDetailsIdDelete = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    RevenueDetailDelete,
    {
      /** A UUID string identifying this Revenue Detail. */
      id: string;
      requestBody: RevenueDetailDeleteRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return postFinanceRevenueDetailsIdDelete(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostFinanceRevenueDetailsRealize = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    RevenueDetailRealize,
    { requestBody: RevenueDetailRealizeRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postFinanceRevenueDetailsRealize(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostFinanceSlips = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: SlipRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postFinanceSlips(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostFinanceSupplierAccounts = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: SupplierAccountRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postFinanceSupplierAccounts(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostFinanceTxns = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: TransactionRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postFinanceTxns(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostHrCrews = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: CrewRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postHrCrews(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostHrDepartments = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: MainDepartmentRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postHrDepartments(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostHrLocations = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: LocationParameterRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postHrLocations(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostHrPersonnel = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: PersonRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postHrPersonnel(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostHrPositions = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: MainPositionRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postHrPositions(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostHrProfessions = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: ProfessionRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postHrProfessions(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostHrQuitReasons = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: QuitReasonRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postHrQuitReasons(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostHrQuitRecords = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: QuitRecordRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postHrQuitRecords(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostHrSalaries = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: SalaryRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postHrSalaries(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostHrSalaryPermissions = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: ProjectSalaryPermissionRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postHrSalaryPermissions(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostProcurementAdvancePayments = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: OrderAdvancePaymentRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postProcurementAdvancePayments(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostProcurementApprovedOrderItemsCancel = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    ApprovedOrderItem,
    { requestBody: CancellableRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postProcurementApprovedOrderItemsCancel(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostProcurementApprovedOrderItemsUncancel = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    ApprovedOrderItem,
    { requestBody: UnCancellableRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postProcurementApprovedOrderItemsUncancel(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostProcurementApprovedRequestItemsCancel = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    ApprovedRequestItem,
    { requestBody: CancellableRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postProcurementApprovedRequestItemsCancel(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostProcurementApprovedRequestItemsCreateOfferComparison = <
  TExtra,
>(
  options?: SwaggerTypescriptUseMutationOptions<
    OfferComparisonResponse,
    { requestBody: OfferComparisonRequestRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postProcurementApprovedRequestItemsCreateOfferComparison(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostProcurementApprovedRequestItemsUncancel = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    ApprovedRequestItem,
    { requestBody: UnCancellableRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postProcurementApprovedRequestItemsUncancel(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostProcurementInvoices = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: InvoiceRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postProcurementInvoices(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostProcurementInvoicesAdd_attachment = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Invoice,
    { requestBody: InvoiceRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postProcurementInvoicesAdd_attachment(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostProcurementInvoicesApprovals = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    PaginatedTransitionList,
    {
      requestBody: InvoiceRequest;
      queryParams?: PostProcurementInvoicesApprovalsQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { requestBody, queryParams, configOverride } = _o || {};

      return postProcurementInvoicesApprovals(
        requestBody,
        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const usePostProcurementInvoicesApprove = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Invoice,
    { requestBody: ApproveSerializerForInvoiceRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postProcurementInvoicesApprove(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostProcurementInvoicesPrepare = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Invoice,
    { requestBody: InvoicePrepareRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postProcurementInvoicesPrepare(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostProcurementOrders = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: OrderRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postProcurementOrders(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostProcurementOrdersAdd_attachment = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Order,
    { requestBody: OrderRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postProcurementOrdersAdd_attachment(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostProcurementOrdersApprovals = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    PaginatedTransitionList,
    {
      requestBody: OrderRequest;
      queryParams?: PostProcurementOrdersApprovalsQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { requestBody, queryParams, configOverride } = _o || {};

      return postProcurementOrdersApprovals(
        requestBody,
        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const usePostProcurementOrdersApprove = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Order,
    { requestBody: ApproveSerializerForOrderRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postProcurementOrdersApprove(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostProcurementOrdersPrepare = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Order,
    { requestBody: OrderPrepareRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postProcurementOrdersPrepare(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostProcurementRequestTypes = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptionsVoid<any, TExtra>,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { configOverride } = _o || {};

      return postProcurementRequestTypes(configOverride);
    },
    ...options,
  });
};

export const usePostProcurementRequests = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: RequestRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postProcurementRequests(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostProcurementRequestsAdd_attachment = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Request,
    { requestBody: RequestRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postProcurementRequestsAdd_attachment(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostProcurementRequestsApprovals = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    PaginatedTransitionList,
    {
      requestBody: RequestRequest;
      queryParams?: PostProcurementRequestsApprovalsQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { requestBody, queryParams, configOverride } = _o || {};

      return postProcurementRequestsApprovals(
        requestBody,
        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const usePostProcurementRequestsApprove = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Request,
    { requestBody: ApproveSerializerForRequestRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postProcurementRequestsApprove(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostProcurementSpecialInvoiceTypes = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptionsVoid<any, TExtra>,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { configOverride } = _o || {};

      return postProcurementSpecialInvoiceTypes(configOverride);
    },
    ...options,
  });
};

export const usePostProcurementSpecialInvoices = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: SpecialInvoiceRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postProcurementSpecialInvoices(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostProcurementSpecialInvoicesAdd_attachment = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    SpecialInvoice,
    { requestBody: SpecialInvoiceRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postProcurementSpecialInvoicesAdd_attachment(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostProcurementSpecialInvoicesApprovals = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    PaginatedTransitionList,
    {
      requestBody: SpecialInvoiceRequest;
      queryParams?: PostProcurementSpecialInvoicesApprovalsQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { requestBody, queryParams, configOverride } = _o || {};

      return postProcurementSpecialInvoicesApprovals(
        requestBody,
        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const usePostProcurementSpecialInvoicesApprove = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    SpecialInvoice,
    { requestBody: ApproveSerializerForSpecialInvoiceRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postProcurementSpecialInvoicesApprove(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostProfilesAvatar = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: AvatarRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postProfilesAvatar(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostProfilesNotifications = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: NotificationRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postProfilesNotifications(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostProjectsAccountingtypes = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: AccountingTypeRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postProjectsAccountingtypes(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostProjectsCities = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptionsVoid<any, TExtra>,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { configOverride } = _o || {};

      return postProjectsCities(configOverride);
    },
    ...options,
  });
};

export const usePostProjectsCompanies = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: CompanyRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postProjectsCompanies(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostProjectsCompaniesSlugValidateOfferComparisonApiKey = <
  TExtra,
>(
  options?: SwaggerTypescriptUseMutationOptions<
    ValidateOfferComparisonApiKeyResponse,
    { slug: string; requestBody: ValidateOfferComparisonApiKeyRequestRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        slug,
        requestBody,

        configOverride,
      } = _o || {};

      return postProjectsCompaniesSlugValidateOfferComparisonApiKey(
        slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostProjectsCountries = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptionsVoid<any, TExtra>,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { configOverride } = _o || {};

      return postProjectsCountries(configOverride);
    },
    ...options,
  });
};

export const usePostProjectsDistricts = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptionsVoid<any, TExtra>,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { configOverride } = _o || {};

      return postProjectsDistricts(configOverride);
    },
    ...options,
  });
};

export const usePostProjectsProjects = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      requestBody: ProjectRequest;
      queryParams?: PostProjectsProjectsQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { requestBody, queryParams, configOverride } = _o || {};

      return postProjectsProjects(requestBody, queryParams, configOverride);
    },
    ...options,
  });
};

export const usePostProjectsProjecttypes = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: ProjectTypeParamRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postProjectsProjecttypes(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostProjectsResponsibles = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: ResponsibleRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postProjectsResponsibles(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostProjectsResponsibletypes = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: ResponsibleTypeParamRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postProjectsResponsibletypes(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostRatesRates = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: RateRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postRatesRates(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostSubcontractsContractCategories = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptionsVoid<any, TExtra>,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { configOverride } = _o || {};

      return postSubcontractsContractCategories(configOverride);
    },
    ...options,
  });
};

export const usePostSubcontractsContractCollateralReason = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptionsVoid<any, TExtra>,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { configOverride } = _o || {};

      return postSubcontractsContractCollateralReason(configOverride);
    },
    ...options,
  });
};

export const usePostSubcontractsContractCollateralStatus = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptionsVoid<any, TExtra>,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { configOverride } = _o || {};

      return postSubcontractsContractCollateralStatus(configOverride);
    },
    ...options,
  });
};

export const usePostSubcontractsContractCollateralTypes = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptionsVoid<any, TExtra>,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { configOverride } = _o || {};

      return postSubcontractsContractCollateralTypes(configOverride);
    },
    ...options,
  });
};

export const usePostSubcontractsContracts = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: ContractCreateRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postSubcontractsContracts(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostSubcontractsContractsAdd_attachment = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Contract,
    { requestBody: ContractRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postSubcontractsContractsAdd_attachment(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostSubcontractsContractsApprovals = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    PaginatedTransitionList,
    {
      requestBody: ContractRequest;
      queryParams?: PostSubcontractsContractsApprovalsQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { requestBody, queryParams, configOverride } = _o || {};

      return postSubcontractsContractsApprovals(
        requestBody,
        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const usePostSubcontractsContractsApprove = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Contract,
    { requestBody: ApproveSerializerForContractRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postSubcontractsContractsApprove(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostSubcontractsContractsCounter__slugCreate_revision = <
  TExtra,
>(
  options?: SwaggerTypescriptUseMutationOptions<
    Contract,
    { counter__slug: string; requestBody: CreateRevisionRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,
        requestBody,

        configOverride,
      } = _o || {};

      return postSubcontractsContractsCounter__slugCreate_revision(
        counter__slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostSubcontractsDeductionReturns = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: DeductionReturnRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postSubcontractsDeductionReturns(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostSubcontractsDeductionReturnsAdd_attachment = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    DeductionReturn,
    { requestBody: DeductionReturnRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postSubcontractsDeductionReturnsAdd_attachment(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostSubcontractsDeductionReturnsApprovals = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    PaginatedTransitionList,
    {
      requestBody: DeductionReturnRequest;
      queryParams?: PostSubcontractsDeductionReturnsApprovalsQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { requestBody, queryParams, configOverride } = _o || {};

      return postSubcontractsDeductionReturnsApprovals(
        requestBody,
        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const usePostSubcontractsDeductionReturnsApprove = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    DeductionReturn,
    { requestBody: ApproveSerializerForDeductionReturnRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postSubcontractsDeductionReturnsApprove(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostSubcontractsProgresses = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: ProgressRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postSubcontractsProgresses(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostSubcontractsProgressesAdd_attachment = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Progress,
    { requestBody: ProgressRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postSubcontractsProgressesAdd_attachment(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostSubcontractsProgressesApprovals = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    PaginatedTransitionList,
    {
      requestBody: ProgressRequest;
      queryParams?: PostSubcontractsProgressesApprovalsQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { requestBody, queryParams, configOverride } = _o || {};

      return postSubcontractsProgressesApprovals(
        requestBody,
        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const usePostSubcontractsProgressesApprove = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Progress,
    { requestBody: ApproveSerializerForProgressRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postSubcontractsProgressesApprove(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostSubcontractsRevisions = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: RevisionRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postSubcontractsRevisions(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostSuppliersAccountingCodes = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: SupplierAccountingCodeRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postSuppliersAccountingCodes(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostSuppliersBankAccounts = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: SupplierBankAccountRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postSuppliersBankAccounts(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostSuppliersContacts = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: ContactRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postSuppliersContacts(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostSuppliersReviewAnswers = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: AnswerRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postSuppliersReviewAnswers(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostSuppliersReviewForms = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: ReviewRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postSuppliersReviewForms(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostSuppliersReviewQuestions = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: ReviewQuestionRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postSuppliersReviewQuestions(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostSuppliersReviewTemplates = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: ReviewTemplateRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postSuppliersReviewTemplates(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostSuppliersSupplierActivityTypes = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: ActivityTypeRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postSuppliersSupplierActivityTypes(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostSuppliersSupplierBranches = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: BranchRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postSuppliersSupplierBranches(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostSuppliersSupplierTypes = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: SupplierTypeRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postSuppliersSupplierTypes(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostSuppliersSuppliers = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: SupplierRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postSuppliersSuppliers(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostWarehouseProducts = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    {
      requestBody: ProductCreateRequest;
      queryParams: PostWarehouseProductsQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { requestBody, queryParams, configOverride } = _o || {};

      return postWarehouseProducts(requestBody, queryParams, configOverride);
    },
    ...options,
  });
};

export const usePostWarehouseProductsAdd_attachment = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Product,
    {
      requestBody: ProductCreateRequest;
      queryParams: PostWarehouseProductsAdd_attachmentQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { requestBody, queryParams, configOverride } = _o || {};

      return postWarehouseProductsAdd_attachment(
        requestBody,
        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const usePostWarehouseProductsDeliver_products = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Product,
    {
      requestBody: ProductDeliveryListCreateRequest;
      queryParams: PostWarehouseProductsDeliver_productsQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { requestBody, queryParams, configOverride } = _o || {};

      return postWarehouseProductsDeliver_products(
        requestBody,
        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const usePostWarehouseTransactions = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: TransactionListCreateRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postWarehouseTransactions(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePostWarehouseWarehouses = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    any,
    { requestBody: WarehouseRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return postWarehouseWarehouses(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutAuthGroupsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    GroupMember,
    {
      /** A unique integer value identifying this group. */
      id: number;
      requestBody: GroupMemberRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putAuthGroupsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutAuthGroupsIdMembersUser_id = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    GroupMember,
    {
      /** A unique integer value identifying this group. */
      id: number;
      user_id: string;
      requestBody: GroupMemberRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        user_id,
        requestBody,

        configOverride,
      } = _o || {};

      return putAuthGroupsIdMembersUser_id(
        id,
        user_id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutAuthUser = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    CustomUserDetails,
    { requestBody: CustomUserDetailsRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        requestBody,

        configOverride,
      } = _o || {};

      return putAuthUser(
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutAuthUserGroupsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    UserGroup,
    {
      /** A unique integer value identifying this user. */
      id: number;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return putAuthUserGroupsId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutAuthUserGroupsIdCopy_groups_from = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    UserGroup,
    {
      /** A unique integer value identifying this user. */
      id: number;
      requestBody: InlineUserRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putAuthUserGroupsIdCopy_groups_from(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutCodesActivitiesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Activity,
    {
      /** A UUID string identifying this Activity. */
      id: string;
      requestBody: ActivityRequest;
      queryParams?: PutCodesActivitiesIdQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { id, requestBody, queryParams, configOverride } = _o || {};

      return putCodesActivitiesId(id, requestBody, queryParams, configOverride);
    },
    ...options,
  });
};

export const usePutCodesActivityAccountCodesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    SupplierAccountingCode,
    {
      /** A UUID string identifying this accounting code. */
      id: string;
      requestBody: SupplierAccountingCodeRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putCodesActivityAccountCodesId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutCodesResourcesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Resource,
    {
      /** A UUID string identifying this Resource. */
      id: string;
      requestBody: ResourceRequest;
      queryParams?: PutCodesResourcesIdQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { id, requestBody, queryParams, configOverride } = _o || {};

      return putCodesResourcesId(id, requestBody, queryParams, configOverride);
    },
    ...options,
  });
};

export const usePutCodesWbsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    WBS,
    {
      /** A UUID string identifying this WBS. */
      id: string;
      requestBody: WBSRequest;
      queryParams?: PutCodesWbsIdQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { id, requestBody, queryParams, configOverride } = _o || {};

      return putCodesWbsId(id, requestBody, queryParams, configOverride);
    },
    ...options,
  });
};

export const usePutCommonBankNamesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    BankName,
    {
      /** A UUID string identifying this Bank Name. */
      id: string;
      requestBody: BankNameRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putCommonBankNamesId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutCommonCurrenciesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Currency,
    {
      /** A UUID string identifying this Currency. */
      id: string;
      requestBody: CurrencyRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putCommonCurrenciesId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutCommonPackagingMethodsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    PackagingMethod,
    {
      /** A UUID string identifying this Packaging Method. */
      id: string;
      requestBody: PackagingMethodRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putCommonPackagingMethodsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutCommonPaymentMethodsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    PaymentMethod,
    {
      /** A UUID string identifying this Payment Method. */
      id: string;
      requestBody: PaymentMethodRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putCommonPaymentMethodsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutCommonResourceUnitsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    ResourceUnit,
    {
      /** A UUID string identifying this Resource Unit. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return putCommonResourceUnitsId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutCommonTaxParametersId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    TaxParameter,
    {
      /** A UUID string identifying this Tax Parameter. */
      id: string;
      requestBody: TaxParameterRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putCommonTaxParametersId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutCommonVatWitholdingsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Vatwitholding,
    {
      /** A UUID string identifying this Vat Witholding. */
      id: string;
      requestBody: VatwitholdingRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putCommonVatWitholdingsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutFinanceAccountsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Account,
    {
      /** A UUID string identifying this account. */
      id: string;
      requestBody: AccountRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putFinanceAccountsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutFinanceBankAccountsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    BankAccount,
    {
      /** A UUID string identifying this bank account. */
      id: string;
      requestBody: BankAccountRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putFinanceBankAccountsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutFinanceCashAccountsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    CashAccount,
    {
      /** A UUID string identifying this cash account. */
      id: string;
      requestBody: CashAccountRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putFinanceCashAccountsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutFinanceExpensesCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Expense,
    { counter__slug: string; requestBody: ExpenseRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,
        requestBody,

        configOverride,
      } = _o || {};

      return putFinanceExpensesCounter__slug(
        counter__slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutFinanceIncomeInvoiceCategoriesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    IncomeInvoiceCategory,
    {
      /** A UUID string identifying this income invoice category. */
      id: string;
      requestBody: IncomeInvoiceCategoryRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putFinanceIncomeInvoiceCategoriesId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutFinanceIncomeInvoicesCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    IncomeInvoice,
    { counter__slug: string; requestBody: IncomeInvoiceRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,
        requestBody,

        configOverride,
      } = _o || {};

      return putFinanceIncomeInvoicesCounter__slug(
        counter__slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutFinancePaymentBondsCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    PaymentBond,
    { counter__slug: string; requestBody: PaymentBondRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,
        requestBody,

        configOverride,
      } = _o || {};

      return putFinancePaymentBondsCounter__slug(
        counter__slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutFinancePaymentChequesCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    PaymentCheque,
    { counter__slug: string; requestBody: PaymentChequeRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,
        requestBody,

        configOverride,
      } = _o || {};

      return putFinancePaymentChequesCounter__slug(
        counter__slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutFinancePaymentDetailsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    PaymentDetail,
    {
      /** A UUID string identifying this Payment Detail. */
      id: string;
      requestBody: PaymentDetailRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putFinancePaymentDetailsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutFinanceRevenueBondsCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    RevenueBond,
    { counter__slug: string; requestBody: RevenueBondRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,
        requestBody,

        configOverride,
      } = _o || {};

      return putFinanceRevenueBondsCounter__slug(
        counter__slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutFinanceRevenueChequesCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    RevenueCheque,
    { counter__slug: string; requestBody: RevenueChequeRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,
        requestBody,

        configOverride,
      } = _o || {};

      return putFinanceRevenueChequesCounter__slug(
        counter__slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutFinanceRevenueDetailsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    RevenueDetail,
    {
      /** A UUID string identifying this Revenue Detail. */
      id: string;
      requestBody: RevenueDetailRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putFinanceRevenueDetailsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutFinanceSlipsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Slip,
    {
      /** A UUID string identifying this slip. */
      id: string;
      requestBody: SlipRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putFinanceSlipsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutFinanceSupplierAccountsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    SupplierAccount,
    {
      /** A UUID string identifying this supplier account. */
      id: string;
      requestBody: SupplierAccountRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putFinanceSupplierAccountsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutFinanceTxnsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Transaction,
    {
      /** A UUID string identifying this transaction. */
      id: string;
      requestBody: TransactionRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putFinanceTxnsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutHrCrewsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Crew,
    {
      /** A UUID string identifying this Crew. */
      id: string;
      requestBody: CrewRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putHrCrewsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutHrDepartmentsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    MainDepartment,
    {
      /** A UUID string identifying this Main Department. */
      id: string;
      requestBody: MainDepartmentRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putHrDepartmentsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutHrLocationsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    LocationParameter,
    {
      /** A UUID string identifying this Location. */
      id: string;
      requestBody: LocationParameterRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putHrLocationsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutHrPersonnelId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Person,
    {
      /** A UUID string identifying this Person. */
      id: string;
      requestBody: PersonRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putHrPersonnelId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutHrPositionsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    MainPosition,
    {
      /** A UUID string identifying this Main Position. */
      id: string;
      requestBody: MainPositionRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putHrPositionsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutHrProfessionsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Profession,
    {
      /** A UUID string identifying this Profession. */
      id: string;
      requestBody: ProfessionRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putHrProfessionsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutHrQuitReasonsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    QuitReason,
    {
      /** A UUID string identifying this Quit Reason. */
      id: string;
      requestBody: QuitReasonRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putHrQuitReasonsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutHrQuitRecordsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    QuitRecord,
    {
      /** A UUID string identifying this Quit Record. */
      id: string;
      requestBody: QuitRecordRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putHrQuitRecordsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutHrSalariesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Salary,
    {
      /** A UUID string identifying this Salary. */
      id: string;
      requestBody: SalaryRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putHrSalariesId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutHrSalaryPermissionsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    ProjectSalaryPermission,
    {
      /** A unique integer value identifying this Project Salary Permission. */
      id: number;
      requestBody: ProjectSalaryPermissionRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putHrSalaryPermissionsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutProcurementAdvancePaymentsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    OrderAdvancePayment,
    {
      /** A UUID string identifying this order advance payment. */
      id: string;
      requestBody: OrderAdvancePaymentRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putProcurementAdvancePaymentsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutProcurementInvoicesCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Invoice,
    { counter__slug: string; requestBody: InvoiceRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,
        requestBody,

        configOverride,
      } = _o || {};

      return putProcurementInvoicesCounter__slug(
        counter__slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutProcurementOrdersCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Order,
    { counter__slug: string; requestBody: OrderRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,
        requestBody,

        configOverride,
      } = _o || {};

      return putProcurementOrdersCounter__slug(
        counter__slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutProcurementRequestTypesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    RequestType,
    {
      /** A UUID string identifying this request type. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return putProcurementRequestTypesId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutProcurementRequestsCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Request,
    { counter__slug: string; requestBody: RequestRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,
        requestBody,

        configOverride,
      } = _o || {};

      return putProcurementRequestsCounter__slug(
        counter__slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutProcurementSpecialInvoiceTypesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    SpecialInvoiceType,
    {
      /** A UUID string identifying this special invoice type. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return putProcurementSpecialInvoiceTypesId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutProcurementSpecialInvoicesCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    SpecialInvoice,
    { counter__slug: string; requestBody: SpecialInvoiceRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,
        requestBody,

        configOverride,
      } = _o || {};

      return putProcurementSpecialInvoicesCounter__slug(
        counter__slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutProjectsAccountingtypesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    AccountingType,
    {
      /** A UUID string identifying this accounting type. */
      id: string;
      requestBody: AccountingTypeRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putProjectsAccountingtypesId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutProjectsCitiesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    City,
    {
      /** A UUID string identifying this city. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return putProjectsCitiesId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutProjectsCompaniesSlug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Company,
    { slug: string; requestBody: CompanyRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        slug,
        requestBody,

        configOverride,
      } = _o || {};

      return putProjectsCompaniesSlug(
        slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutProjectsCountriesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Country,
    {
      /** A UUID string identifying this country. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return putProjectsCountriesId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutProjectsDistrictsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    District,
    {
      /** A UUID string identifying this district. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return putProjectsDistrictsId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutProjectsProjectsSlug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Project,
    {
      slug: string;
      requestBody: ProjectRequest;
      queryParams?: PutProjectsProjectsSlugQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { slug, requestBody, queryParams, configOverride } = _o || {};

      return putProjectsProjectsSlug(
        slug,
        requestBody,
        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const usePutProjectsProjecttypesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    ProjectTypeParam,
    {
      /** A UUID string identifying this project type. */
      id: string;
      requestBody: ProjectTypeParamRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putProjectsProjecttypesId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutProjectsResponsiblesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Responsible,
    {
      /** A UUID string identifying this responsible. */
      id: string;
      requestBody: ResponsibleRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putProjectsResponsiblesId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutProjectsResponsibletypesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    ResponsibleTypeParam,
    {
      /** A UUID string identifying this responsible type. */
      id: string;
      requestBody: ResponsibleTypeParamRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putProjectsResponsibletypesId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutRatesRatesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Rate,
    {
      /** A unique integer value identifying this rate. */
      id: number;
      requestBody: RateRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putRatesRatesId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutSubcontractsContractCategoriesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    ContractCategory,
    {
      /** A UUID string identifying this contract category. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return putSubcontractsContractCategoriesId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutSubcontractsContractCollateralReasonId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    ContractCollateralReason,
    {
      /** A UUID string identifying this contract collateral reason. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return putSubcontractsContractCollateralReasonId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutSubcontractsContractCollateralStatusId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    ContractCollateralStatus,
    {
      /** A UUID string identifying this contract collateral status. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return putSubcontractsContractCollateralStatusId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutSubcontractsContractCollateralTypesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    ContractCollateralType,
    {
      /** A UUID string identifying this contract collateral type. */
      id: string;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,

        configOverride,
      } = _o || {};

      return putSubcontractsContractCollateralTypesId(
        id,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutSubcontractsContractsCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Contract,
    { counter__slug: string; requestBody: ContractRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,
        requestBody,

        configOverride,
      } = _o || {};

      return putSubcontractsContractsCounter__slug(
        counter__slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutSubcontractsDeductionReturnsCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    DeductionReturn,
    { counter__slug: string; requestBody: DeductionReturnRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,
        requestBody,

        configOverride,
      } = _o || {};

      return putSubcontractsDeductionReturnsCounter__slug(
        counter__slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutSubcontractsProgressesCounter__slug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Progress,
    { counter__slug: string; requestBody: ProgressRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        counter__slug,
        requestBody,

        configOverride,
      } = _o || {};

      return putSubcontractsProgressesCounter__slug(
        counter__slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutSubcontractsRevisionsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Revision,
    {
      /** A UUID string identifying this contract revision. */
      id: string;
      requestBody: RevisionRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putSubcontractsRevisionsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutSuppliersAccountingCodesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    SupplierAccountingCode,
    {
      /** A UUID string identifying this supplier accounting code. */
      id: string;
      requestBody: SupplierAccountingCodeRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putSuppliersAccountingCodesId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutSuppliersBankAccountsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    SupplierBankAccount,
    {
      /** A UUID string identifying this supplier bank account. */
      id: string;
      requestBody: SupplierBankAccountRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putSuppliersBankAccountsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutSuppliersContactsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Contact,
    {
      /** A UUID string identifying this supplier contact. */
      id: string;
      requestBody: ContactRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putSuppliersContactsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutSuppliersReviewAnswersId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Answer,
    {
      /** A UUID string identifying this answer. */
      id: string;
      requestBody: AnswerRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putSuppliersReviewAnswersId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutSuppliersReviewFormsSlug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Review,
    { slug: string; requestBody: ReviewRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        slug,
        requestBody,

        configOverride,
      } = _o || {};

      return putSuppliersReviewFormsSlug(
        slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutSuppliersReviewFormsSlugAnswers = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Review,
    { slug: string; requestBody: ReviewRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        slug,
        requestBody,

        configOverride,
      } = _o || {};

      return putSuppliersReviewFormsSlugAnswers(
        slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutSuppliersReviewQuestionsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    ReviewQuestion,
    {
      /** A UUID string identifying this review question. */
      id: string;
      requestBody: ReviewQuestionRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putSuppliersReviewQuestionsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutSuppliersReviewTemplatesSlug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    ReviewTemplate,
    { slug: string; requestBody: ReviewTemplateRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        slug,
        requestBody,

        configOverride,
      } = _o || {};

      return putSuppliersReviewTemplatesSlug(
        slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutSuppliersReviewTemplatesSlugQuestions = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    ReviewTemplate,
    { slug: string; requestBody: ReviewTemplateRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        slug,
        requestBody,

        configOverride,
      } = _o || {};

      return putSuppliersReviewTemplatesSlugQuestions(
        slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutSuppliersSupplierActivityTypesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    ActivityType,
    {
      /** A UUID string identifying this supplier activity type. */
      id: string;
      requestBody: ActivityTypeRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putSuppliersSupplierActivityTypesId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutSuppliersSupplierBranchesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Branch,
    {
      /** A UUID string identifying this supplier branch. */
      id: string;
      requestBody: BranchRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putSuppliersSupplierBranchesId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutSuppliersSupplierTypesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    SupplierType,
    {
      /** A UUID string identifying this supplier type. */
      id: string;
      requestBody: SupplierTypeRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putSuppliersSupplierTypesId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutSuppliersSuppliersSlug = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Supplier,
    { slug: string; requestBody: SupplierRequest },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        slug,
        requestBody,

        configOverride,
      } = _o || {};

      return putSuppliersSuppliersSlug(
        slug,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutWarehouseProductsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Product,
    {
      /** A UUID string identifying this product. */
      id: string;
      requestBody: ProductCreateRequest;
      queryParams: PutWarehouseProductsIdQueryParams;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const { id, requestBody, queryParams, configOverride } = _o || {};

      return putWarehouseProductsId(
        id,
        requestBody,
        queryParams,
        configOverride,
      );
    },
    ...options,
  });
};

export const usePutWarehouseTransactionsId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    TransactionList,
    {
      /** A UUID string identifying this transaction. */
      id: string;
      requestBody: TransactionListCreateRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putWarehouseTransactionsId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};

export const usePutWarehouseWarehousesId = <TExtra,>(
  options?: SwaggerTypescriptUseMutationOptions<
    Warehouse,
    {
      /** A UUID string identifying this warehouse. */
      id: string;
      requestBody: WarehouseRequest;
    },
    TExtra
  >,
) => {
  return useMutation({
    mutationFn: (_o) => {
      const {
        id,
        requestBody,

        configOverride,
      } = _o || {};

      return putWarehouseWarehousesId(
        id,
        requestBody,

        configOverride,
      );
    },
    ...options,
  });
};
",
  "hooksConfig.ts": "//@ts-nocheck
/**
 * AUTO_GENERATED Do not change this file directly, use config.ts file instead
 *
 * @version 6
 */

import type { SwaggerResponse } from \\"./config\\";

type GetDataType<
  T extends Array<SwaggerResponse<any>>,
  K extends string = \\"data\\" | \\"list\\",
> = T extends Array<SwaggerResponse<infer D>>
  ? D extends {
      [P in K]?: infer R1;
    }
    ? R1
    : D extends Array<any>
    ? D
    : never
  : never;

const paginationFlattenData = <T extends Array<SwaggerResponse<any>>>(
  pages?: T,
): GetDataType<T> | undefined =>
  pages?.flatMap((page) =>
    Array.isArray(page.data)
      ? page.data
      : Array.isArray(page.data?.data)
      ? page.data.data
      : Array.isArray(page.data?.list)
      ? page.data.list
      : [],
  ) as any;

const getTotal = <T extends Array<SwaggerResponse<any>>>(
  pages?: T,
): number | undefined => {
  return pages && pages[pages.length - 1]?.data?.total;
};

const getPageSize = (queryParams?: any): number | undefined => {
  const pageSize = Object.entries(queryParams || {}).find(([key, _value]) => {
    if (
      key.toLowerCase() === \\"pagesize\\" ||
      key.toLowerCase() === \\"pagenumber\\"
    ) {
      return true;
    }
    return false;
  });

  return (pageSize?.[1] || 10) as number;
};

export { paginationFlattenData, getTotal, getPageSize };
",
  "httpRequest.ts": "//@ts-nocheck
/**
 * AUTO_GENERATED Do not change this file directly, use config.ts file instead
 *
 * @version 6
 */

import axios, { AxiosRequestConfig, CancelToken } from \\"axios\\";
import { getAxiosInstance } from \\"./config\\";
import type { Security, SwaggerResponse } from \\"./config\\";

/**
 * Cancellation handled here, you can cancel request by call promise.cancel()
 *
 * @example
 *   const promise = getUsers();
 *   setTimeout(() => promise.cancel(), 30000);
 *   const { data } = await promise;
 *
 * @param getPromise
 * @returns
 */
function cancellation<T>(
  getPromise: (cancelToken: CancelToken) => Promise<T>,
): Promise<T> {
  const source = axios.CancelToken.source();
  const promise = getPromise(source.token);
  //@ts-ignore
  promise.cancel = () => {
    source.cancel(\\"request canceled\\");
  };

  return promise;
}

export const Http = {
  getRequest(
    url: string,
    queryParams: any | undefined,
    //@ts-ignore
    _requestBody: undefined,
    security: Security,
    configOverride?: AxiosRequestConfig,
  ): Promise<SwaggerResponse<any>> {
    return cancellation((cancelToken) =>
      getAxiosInstance(security).get(url, {
        cancelToken,
        params: queryParams,
        ...configOverride,
      }),
    );
  },
  postRequest(
    url: string,
    queryParams: any | undefined,
    requestBody: any | undefined,
    security: Security,
    configOverride?: AxiosRequestConfig,
  ): Promise<SwaggerResponse<any>> {
    return cancellation((cancelToken) =>
      getAxiosInstance(security).post(url, requestBody, {
        cancelToken,
        params: queryParams,
        ...configOverride,
      }),
    );
  },
  putRequest(
    url: string,
    queryParams: any | undefined,
    requestBody: any | undefined,
    security: Security,
    configOverride?: AxiosRequestConfig,
  ): Promise<SwaggerResponse<any>> {
    return cancellation((cancelToken) =>
      getAxiosInstance(security).put(url, requestBody, {
        cancelToken,
        params: queryParams,
        ...configOverride,
      }),
    );
  },
  patchRequest(
    url: string,
    queryParams: any | undefined,
    requestBody: any | undefined,
    security: Security,
    configOverride?: AxiosRequestConfig,
  ): Promise<SwaggerResponse<any>> {
    return cancellation((cancelToken) =>
      getAxiosInstance(security).patch(url, requestBody, {
        cancelToken,
        params: queryParams,
        ...configOverride,
      }),
    );
  },
  deleteRequest(
    url: string,
    queryParams: any | undefined,
    requestBody: any | undefined,
    security: Security,
    configOverride?: AxiosRequestConfig,
  ): Promise<SwaggerResponse<any>> {
    return cancellation((cancelToken) =>
      getAxiosInstance(security).delete(url, {
        data: requestBody,
        cancelToken,
        params: queryParams,
        ...configOverride,
      }),
    );
  },
};
",
  "services.ts": "//@ts-nocheck
/**
 * AUTO_GENERATED Do not change this file directly, use config.ts file instead
 *
 * @version 6
 */

import type { AxiosRequestConfig } from \\"axios\\";
import type { SwaggerResponse } from \\"./config\\";
import { Http } from \\"./httpRequest\\";
//@ts-ignore
import qs from \\"qs\\";
import type {
  GetApiSchemaQueryParams,
  GetCodesActivitiesQueryParams,
  GetCodesActivitiesIdQueryParams,
  PutCodesActivitiesIdQueryParams,
  PatchCodesActivitiesIdQueryParams,
  DeleteCodesActivitiesIdQueryParams,
  PostCodesActivitiesIdAdd_childQueryParams,
  PostCodesActivitiesIdAdd_siblingQueryParams,
  PostCodesActivitiesIdMove_underQueryParams,
  PostCodesActivitiesAdd_rootQueryParams,
  GetCodesActivitiesPermissionsQueryParams,
  GetCodesResourcesQueryParams,
  GetCodesResourcesIdQueryParams,
  PutCodesResourcesIdQueryParams,
  PatchCodesResourcesIdQueryParams,
  DeleteCodesResourcesIdQueryParams,
  PostCodesResourcesIdAdd_childQueryParams,
  PostCodesResourcesIdAdd_siblingQueryParams,
  PostCodesResourcesIdMove_underQueryParams,
  PostCodesResourcesAdd_rootQueryParams,
  GetCodesResourcesPermissionsQueryParams,
  GetCodesWbsQueryParams,
  GetCodesWbsIdQueryParams,
  PutCodesWbsIdQueryParams,
  PatchCodesWbsIdQueryParams,
  DeleteCodesWbsIdQueryParams,
  PostCodesWbsIdAdd_childQueryParams,
  PostCodesWbsIdAdd_siblingQueryParams,
  PostCodesWbsIdMove_underQueryParams,
  PostCodesWbsAdd_rootQueryParams,
  GetCodesWbsPermissionsQueryParams,
  GetCodesWbsProjectsQueryParams,
  GetFinanceAccountsQueryParams,
  GetFinanceBankAccountsQueryParams,
  GetFinanceCashAccountsQueryParams,
  GetFinanceExpensesQueryParams,
  GetFinanceIncomeInvoiceCategoriesQueryParams,
  GetFinanceIncomeInvoicesQueryParams,
  GetFinanceIncomeInvoicesCounter__slugApprovalHistoryQueryParams,
  PostFinanceIncomeInvoicesApprovalsQueryParams,
  GetFinanceIncomeInvoicesStatesQueryParams,
  GetFinanceInstrumentsQueryParams,
  GetFinancePaymentBondsQueryParams,
  GetFinancePaymentChequesQueryParams,
  GetFinancePaymentDetailsQueryParams,
  GetFinancePlannedPaymentsQueryParams,
  PostFinancePlannedPaymentsPay_by_bondQueryParams,
  PostFinancePlannedPaymentsPay_by_chequeQueryParams,
  PostFinancePlannedPaymentsPay_by_filterQueryParams,
  GetFinancePlannedRevenueQueryParams,
  PostFinancePlannedRevenuePay_by_bondQueryParams,
  PostFinancePlannedRevenuePay_by_chequeQueryParams,
  PostFinancePlannedRevenuePay_by_filterQueryParams,
  GetFinanceRevenueBondsQueryParams,
  GetFinanceRevenueChequesQueryParams,
  GetFinanceRevenueDetailsQueryParams,
  GetFinanceSlipsQueryParams,
  GetFinanceSupplierAccountsQueryParams,
  GetFinanceTxnsQueryParams,
  GetFinanceTxnsExportQueryParams,
  GetHrCrewsQueryParams,
  GetHrDepartmentsQueryParams,
  GetHrPersonnelQueryParams,
  GetHrPositionsQueryParams,
  GetHrSalariesQueryParams,
  GetHrSalaryPermissionsQueryParams,
  GetProcurementApprovedOrderItemsQueryParams,
  GetProcurementApprovedRequestItemsQueryParams,
  GetProcurementInvoiceAdvanceBalanceCounter__slugQueryParams,
  GetProcurementInvoiceItemsQueryParams,
  GetProcurementInvoicesQueryParams,
  GetProcurementInvoicesCounter__slugApprovalHistoryQueryParams,
  PostProcurementInvoicesApprovalsQueryParams,
  GetProcurementInvoicesStatesQueryParams,
  GetProcurementOrdersQueryParams,
  GetProcurementOrdersCounter__slugApprovalHistoryQueryParams,
  PostProcurementOrdersApprovalsQueryParams,
  GetProcurementOrdersStatesQueryParams,
  GetProcurementRequestTypesQueryParams,
  GetProcurementRequestsQueryParams,
  GetProcurementRequestsCounter__slugApprovalHistoryQueryParams,
  PostProcurementRequestsApprovalsQueryParams,
  GetProcurementRequestsStatesQueryParams,
  GetProcurementSpecialInvoiceItemsQueryParams,
  GetProcurementSpecialInvoiceTypesQueryParams,
  GetProcurementSpecialInvoicesQueryParams,
  GetProcurementSpecialInvoicesCounter__slugApprovalHistoryQueryParams,
  PostProcurementSpecialInvoicesApprovalsQueryParams,
  GetProcurementSpecialInvoicesStatesQueryParams,
  GetProjectsCitiesQueryParams,
  GetProjectsCompaniesQueryParams,
  GetProjectsCompaniesAvailableQueryParams,
  GetProjectsCountriesQueryParams,
  GetProjectsDistrictsQueryParams,
  GetProjectsProjectsQueryParams,
  PostProjectsProjectsQueryParams,
  GetProjectsProjectsSlugQueryParams,
  PutProjectsProjectsSlugQueryParams,
  PatchProjectsProjectsSlugQueryParams,
  DeleteProjectsProjectsSlugQueryParams,
  GetProjectsProjectsSlugHistoryQueryParams,
  GetProjectsProjectsSlugResponsibilitiesQueryParams,
  GetProjectsProjectsAvailableQueryParams,
  GetProjectsProjectsPermissionsQueryParams,
  GetRatesRatesQueryParams,
  GetSubcontractsContractCategoriesQueryParams,
  GetSubcontractsContractCollateralReasonQueryParams,
  GetSubcontractsContractCollateralStatusQueryParams,
  GetSubcontractsContractCollateralTypesQueryParams,
  GetSubcontractsContractCollateralsQueryParams,
  GetSubcontractsContractsQueryParams,
  GetSubcontractsContractsCounter__slugApprovalHistoryQueryParams,
  PostSubcontractsContractsApprovalsQueryParams,
  GetSubcontractsContractsStatesQueryParams,
  GetSubcontractsDeductionReturnsQueryParams,
  GetSubcontractsDeductionReturnsCounter__slugApprovalHistoryQueryParams,
  PostSubcontractsDeductionReturnsApprovalsQueryParams,
  GetSubcontractsDeductionReturnsStatesQueryParams,
  GetSubcontractsProgressAdditionTypesQueryParams,
  GetSubcontractsProgressDeductionTypesQueryParams,
  GetSubcontractsProgressItemsQueryParams,
  GetSubcontractsProgressesQueryParams,
  GetSubcontractsProgressesCounter__slugApprovalHistoryQueryParams,
  PostSubcontractsProgressesApprovalsQueryParams,
  GetSubcontractsProgressesStatesQueryParams,
  GetSubcontractsRevisionsQueryParams,
  GetSuppliersAccountingCodesQueryParams,
  GetSuppliersAdvanceBalancesSlugQueryParams,
  GetSuppliersBankAccountsQueryParams,
  GetSuppliersContactsQueryParams,
  GetSuppliersReviewAnswersQueryParams,
  GetSuppliersReviewFormsQueryParams,
  GetSuppliersReviewQuestionsQueryParams,
  GetSuppliersReviewTemplatesQueryParams,
  GetSuppliersSupplierActivityTypesQueryParams,
  GetSuppliersSupplierBranchesQueryParams,
  GetSuppliersSupplierTypesQueryParams,
  GetSuppliersSuppliersQueryParams,
  GetSuppliersSuppliersAutocompleteQueryParams,
  GetWarehouseProductsQueryParams,
  PostWarehouseProductsQueryParams,
  GetWarehouseProductsIdQueryParams,
  PutWarehouseProductsIdQueryParams,
  PatchWarehouseProductsIdQueryParams,
  DeleteWarehouseProductsIdQueryParams,
  GetWarehouseProductsIdAttachmentsQueryParams,
  GetWarehouseProductsIdHistoryQueryParams,
  GetWarehouseProductsIdTransactionsQueryParams,
  PostWarehouseProductsAdd_attachmentQueryParams,
  PostWarehouseProductsDeliver_productsQueryParams,
  GetWarehouseProductsPermissionsQueryParams,
  GetWarehouseWarehousesQueryParams,
  GetWarehouseWarehousesAvailableQueryParams,
  Account,
  AccountRequest,
  AccountType,
  AccountingType,
  AccountingTypeRequest,
  Activity,
  ActivityRequest,
  ActivityType,
  ActivityTypeRequest,
  Answer,
  AnswerRequest,
  ApproveSerializerForContractRequest,
  ApproveSerializerForDeductionReturnRequest,
  ApproveSerializerForIncomeInvoiceRequest,
  ApproveSerializerForInvoiceRequest,
  ApproveSerializerForOrderRequest,
  ApproveSerializerForProgressRequest,
  ApproveSerializerForRequestRequest,
  ApproveSerializerForSpecialInvoiceRequest,
  ApprovedOrderItem,
  ApprovedRequestItem,
  Attachment,
  Avatar,
  AvatarRequest,
  BankAccount,
  BankAccountRequest,
  BankName,
  BankNameRequest,
  Branch,
  BranchRequest,
  CancellableRequest,
  CashAccount,
  CashAccountRequest,
  City,
  Company,
  CompanyAvailable,
  CompanyRequest,
  ConsolidatedPermissions,
  Contact,
  ContactRequest,
  Contract,
  ContractCategory,
  ContractCollateralReason,
  ContractCollateralStatus,
  ContractCollateralType,
  ContractCreateRequest,
  ContractRequest,
  Country,
  CreateRevisionRequest,
  Crew,
  CrewRequest,
  Currency,
  CurrencyRequest,
  CustomUserDetails,
  CustomUserDetailsRequest,
  DeductionReturn,
  DeductionReturnRequest,
  District,
  Expense,
  ExpenseRequest,
  FeatureFlags,
  GroupMember,
  GroupMemberRequest,
  IncomeInvoice,
  IncomeInvoiceCategory,
  IncomeInvoiceCategoryRequest,
  IncomeInvoiceRequest,
  InlineUserRequest,
  Invoice,
  InvoiceAdvanceBalance,
  InvoiceItemList,
  InvoicePrepareRequest,
  InvoiceRequest,
  LocationParameter,
  LocationParameterRequest,
  MainDepartment,
  MainDepartmentRequest,
  MainPosition,
  MainPositionRequest,
  NotificationRequest,
  OfferComparisonRequestRequest,
  OfferComparisonResponse,
  Order,
  OrderAdvancePayment,
  OrderAdvancePaymentRequest,
  OrderPrepareRequest,
  OrderRequest,
  PackagingMethod,
  PackagingMethodRequest,
  PaginatedAccountList,
  PaginatedActivityListList,
  PaginatedApprovalHistoryList,
  PaginatedApprovedOrderItemList,
  PaginatedApprovedRequestItemList,
  PaginatedBankAccountListList,
  PaginatedCashAccountListList,
  PaginatedCompanyList,
  PaginatedContractCollateralListList,
  PaginatedContractListList,
  PaginatedCrewListList,
  PaginatedDeductionReturnListList,
  PaginatedExpenseListList,
  PaginatedIncomeInvoiceListList,
  PaginatedInstrumentListDiscoveryList,
  PaginatedInvoiceListList,
  PaginatedOrderListList,
  PaginatedPaymentBondListList,
  PaginatedPaymentChequeListList,
  PaginatedPaymentDetailList,
  PaginatedPaymentPlan2TypeDiscoveryList,
  PaginatedPersonListList,
  PaginatedProductListList,
  PaginatedProgressListList,
  PaginatedProjectListList,
  PaginatedRequestListList,
  PaginatedResourceListList,
  PaginatedRevenueBondListList,
  PaginatedRevenueChequeListList,
  PaginatedRevenueDetailList,
  PaginatedReviewsListList,
  PaginatedRevisionList,
  PaginatedSalaryList,
  PaginatedSlipList,
  PaginatedSpecialInvoiceListList,
  PaginatedSupplierAccountListList,
  PaginatedSupplierList,
  PaginatedTransactionList,
  PaginatedTransactionListList,
  PaginatedTransitionList,
  PaginatedWBSListList,
  PaginatedWarehouseList,
  PatchedAccountRequest,
  PatchedAccountingTypeRequest,
  PatchedActivityRequest,
  PatchedActivityTypeRequest,
  PatchedAnswerRequest,
  PatchedBankAccountRequest,
  PatchedBankNameRequest,
  PatchedBranchRequest,
  PatchedCashAccountRequest,
  PatchedCompanyRequest,
  PatchedContactRequest,
  PatchedContractRequest,
  PatchedCrewRequest,
  PatchedCurrencyRequest,
  PatchedCustomUserDetailsRequest,
  PatchedDeductionReturnRequest,
  PatchedExpenseRequest,
  PatchedGroupMemberRequest,
  PatchedIncomeInvoiceCategoryRequest,
  PatchedIncomeInvoiceRequest,
  PatchedInvoiceRequest,
  PatchedLocationParameterRequest,
  PatchedMainDepartmentRequest,
  PatchedMainPositionRequest,
  PatchedOrderAdvancePaymentRequest,
  PatchedOrderRequest,
  PatchedPackagingMethodRequest,
  PatchedPaymentBondRequest,
  PatchedPaymentChequeRequest,
  PatchedPaymentDetailRequest,
  PatchedPaymentMethodRequest,
  PatchedPersonRequest,
  PatchedProductCreateRequest,
  PatchedProfessionRequest,
  PatchedProgressRequest,
  PatchedProjectRequest,
  PatchedProjectSalaryPermissionRequest,
  PatchedProjectTypeParamRequest,
  PatchedQuitReasonRequest,
  PatchedQuitRecordRequest,
  PatchedRateRequest,
  PatchedRequestRequest,
  PatchedResourceRequest,
  PatchedResponsibleRequest,
  PatchedResponsibleTypeParamRequest,
  PatchedRevenueBondRequest,
  PatchedRevenueChequeRequest,
  PatchedRevenueDetailRequest,
  PatchedReviewQuestionRequest,
  PatchedReviewRequest,
  PatchedReviewTemplateRequest,
  PatchedRevisionRequest,
  PatchedSalaryRequest,
  PatchedSlipRequest,
  PatchedSpecialInvoiceRequest,
  PatchedSupplierAccountRequest,
  PatchedSupplierAccountingCodeRequest,
  PatchedSupplierBankAccountRequest,
  PatchedSupplierRequest,
  PatchedSupplierTypeRequest,
  PatchedTaxParameterRequest,
  PatchedTransactionListCreateRequest,
  PatchedTransactionRequest,
  PatchedVatwitholdingRequest,
  PatchedWBSRequest,
  PatchedWarehouseRequest,
  PayByBond,
  PayByBondRequest,
  PayByCheque,
  PayByChequeRequest,
  PayByFilter,
  PayByFilterRequest,
  PaySelected,
  PaySelectedRequest,
  PaymentBond,
  PaymentBondRequest,
  PaymentCheque,
  PaymentChequeRequest,
  PaymentDetail,
  PaymentDetailDelete,
  PaymentDetailDeleteRequest,
  PaymentDetailRealize,
  PaymentDetailRealizeRequest,
  PaymentDetailRequest,
  PaymentMethod,
  PaymentMethodRequest,
  Permissions,
  Person,
  PersonRequest,
  Product,
  ProductCreateRequest,
  ProductDeliveryListCreateRequest,
  Profession,
  ProfessionRequest,
  Progress,
  ProgressAdditionType,
  ProgressDeductionType,
  ProgressItemList,
  ProgressRequest,
  Project,
  ProjectAvailable,
  ProjectRequest,
  ProjectSalaryPermission,
  ProjectSalaryPermissionRequest,
  ProjectTypeParam,
  ProjectTypeParamRequest,
  QuitReason,
  QuitReasonRequest,
  QuitRecord,
  QuitRecordRequest,
  Rate,
  RateRequest,
  Request,
  RequestRequest,
  RequestType,
  Resource,
  ResourceRequest,
  ResourceUnit,
  Responsible,
  ResponsibleRequest,
  ResponsibleTypeParam,
  ResponsibleTypeParamRequest,
  RevenueBond,
  RevenueBondRequest,
  RevenueCheque,
  RevenueChequeRequest,
  RevenueDetail,
  RevenueDetailDelete,
  RevenueDetailDeleteRequest,
  RevenueDetailRealize,
  RevenueDetailRealizeRequest,
  RevenueDetailRequest,
  Review,
  ReviewQuestion,
  ReviewQuestionRequest,
  ReviewRequest,
  ReviewTemplate,
  ReviewTemplateList,
  ReviewTemplateRequest,
  Revision,
  RevisionRequest,
  Salary,
  SalaryRequest,
  Slip,
  SlipRequest,
  SpecialInvoice,
  SpecialInvoiceItemList,
  SpecialInvoiceRequest,
  SpecialInvoiceType,
  State,
  Supplier,
  SupplierAccount,
  SupplierAccountRequest,
  SupplierAccountingCode,
  SupplierAccountingCodeRequest,
  SupplierAutocomplete,
  SupplierBankAccount,
  SupplierBankAccountRequest,
  SupplierRequest,
  SupplierType,
  SupplierTypeRequest,
  Tax,
  TaxParameter,
  TaxParameterRequest,
  Transaction,
  TransactionList,
  TransactionListCreateRequest,
  TransactionRequest,
  TransactionType,
  UnCancellableRequest,
  UserGroup,
  UserProfile,
  ValidateOfferComparisonApiKeyRequestRequest,
  ValidateOfferComparisonApiKeyResponse,
  Vatwitholding,
  VatwitholdingRequest,
  WBS,
  WBSRequest,
  Warehouse,
  WarehouseRequest,
} from \\"./types\\";

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const __DEV__ = process.env.NODE_ENV !== \\"production\\";

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function overrideConfig(
  config?: AxiosRequestConfig,
  configOverride?: AxiosRequestConfig,
): AxiosRequestConfig {
  return {
    ...config,
    ...configOverride,
    headers: {
      ...config?.headers,
      ...configOverride?.headers,
    },
  };
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
export function template(path: string, obj: { [x: string]: any } = {}) {
  Object.keys(obj).forEach((key) => {
    const re = new RegExp(\`{\${key}}\`, \\"i\\");
    path = path.replace(re, obj[key]);
  });

  return path;
}

function isFormData(obj: any) {
  // This checks for the append method which should exist on FormData instances
  return (
    (typeof obj === \\"object\\" &&
      typeof obj.append === \\"function\\" &&
      obj[Symbol.toStringTag] === undefined) ||
    obj[Symbol.toStringTag] === \\"FormData\\"
  );
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function objToForm(requestBody: object) {
  if (isFormData(requestBody)) {
    return requestBody;
  }
  const formData = new FormData();

  Object.entries(requestBody).forEach(([key, value]) => {
    value && formData.append(key, value);
  });

  return formData;
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function objToUrlencoded(requestBody: object) {
  return qs.stringify(requestBody);
}

export const deleteAuthGroupsId = (
  /** A unique integer value identifying this group. */
  id: number,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteAuthGroupsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteAuthGroupsId.key = \\"/auth/groups/{id}/\\";

export const deleteAuthGroupsIdMembersUser_id = (
  /** A unique integer value identifying this group. */
  id: number,
  user_id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteAuthGroupsIdMembersUser_id.key, { id, user_id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteAuthGroupsIdMembersUser_id.key = \\"/auth/groups/{id}/members/{user_id}/\\";

export const deleteAuthUserGroupsId = (
  /** A unique integer value identifying this user. */
  id: number,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteAuthUserGroupsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteAuthUserGroupsId.key = \\"/auth/user/groups/{id}/\\";

export const deleteCodesActivitiesId = (
  /** A UUID string identifying this Activity. */
  id: string,
  queryParams?: DeleteCodesActivitiesIdQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteCodesActivitiesId.key, { id }),
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteCodesActivitiesId.key = \\"/codes/activities/{id}/\\";

export const deleteCodesActivityAccountCodesId = (
  /** A UUID string identifying this accounting code. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteCodesActivityAccountCodesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteCodesActivityAccountCodesId.key = \\"/codes/activity-account-codes/{id}/\\";

export const deleteCodesResourcesId = (
  /** A UUID string identifying this Resource. */
  id: string,
  queryParams?: DeleteCodesResourcesIdQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteCodesResourcesId.key, { id }),
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteCodesResourcesId.key = \\"/codes/resources/{id}/\\";

export const deleteCodesWbsId = (
  /** A UUID string identifying this WBS. */
  id: string,
  queryParams?: DeleteCodesWbsIdQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteCodesWbsId.key, { id }),
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteCodesWbsId.key = \\"/codes/wbs/{id}/\\";

export const deleteCommonAttachmentsId = (
  /** A UUID string identifying this attachment. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteCommonAttachmentsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteCommonAttachmentsId.key = \\"/common/attachments/{id}/\\";

export const deleteCommonBankNamesId = (
  /** A UUID string identifying this Bank Name. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteCommonBankNamesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteCommonBankNamesId.key = \\"/common/bank-names/{id}/\\";

export const deleteCommonCurrenciesId = (
  /** A UUID string identifying this Currency. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteCommonCurrenciesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteCommonCurrenciesId.key = \\"/common/currencies/{id}/\\";

export const deleteCommonPackagingMethodsId = (
  /** A UUID string identifying this Packaging Method. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteCommonPackagingMethodsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteCommonPackagingMethodsId.key = \\"/common/packaging-methods/{id}/\\";

export const deleteCommonPaymentMethodsId = (
  /** A UUID string identifying this Payment Method. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteCommonPaymentMethodsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteCommonPaymentMethodsId.key = \\"/common/payment-methods/{id}/\\";

export const deleteCommonResourceUnitsId = (
  /** A UUID string identifying this Resource Unit. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteCommonResourceUnitsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteCommonResourceUnitsId.key = \\"/common/resource-units/{id}/\\";

export const deleteCommonTaxParametersId = (
  /** A UUID string identifying this Tax Parameter. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteCommonTaxParametersId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteCommonTaxParametersId.key = \\"/common/tax-parameters/{id}/\\";

export const deleteCommonVatWitholdingsId = (
  /** A UUID string identifying this Vat Witholding. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteCommonVatWitholdingsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteCommonVatWitholdingsId.key = \\"/common/vat-witholdings/{id}/\\";

export const deleteFinanceAccountsId = (
  /** A UUID string identifying this account. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteFinanceAccountsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteFinanceAccountsId.key = \\"/finance/accounts/{id}/\\";

export const deleteFinanceBankAccountsId = (
  /** A UUID string identifying this bank account. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteFinanceBankAccountsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteFinanceBankAccountsId.key = \\"/finance/bank-accounts/{id}/\\";

export const deleteFinanceCashAccountsId = (
  /** A UUID string identifying this cash account. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteFinanceCashAccountsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteFinanceCashAccountsId.key = \\"/finance/cash-accounts/{id}/\\";

export const deleteFinanceExpensesCounter__slug = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteFinanceExpensesCounter__slug.key, { counter__slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteFinanceExpensesCounter__slug.key = \\"/finance/expenses/{counter__slug}/\\";

export const deleteFinanceIncomeInvoiceCategoriesId = (
  /** A UUID string identifying this income invoice category. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteFinanceIncomeInvoiceCategoriesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteFinanceIncomeInvoiceCategoriesId.key =
  \\"/finance/income-invoice-categories/{id}/\\";

export const deleteFinanceIncomeInvoicesCounter__slug = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteFinanceIncomeInvoicesCounter__slug.key, { counter__slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteFinanceIncomeInvoicesCounter__slug.key =
  \\"/finance/income-invoices/{counter__slug}/\\";

export const deleteFinancePaymentBondsCounter__slug = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteFinancePaymentBondsCounter__slug.key, { counter__slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteFinancePaymentBondsCounter__slug.key =
  \\"/finance/payment-bonds/{counter__slug}/\\";

export const deleteFinancePaymentChequesCounter__slug = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteFinancePaymentChequesCounter__slug.key, { counter__slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteFinancePaymentChequesCounter__slug.key =
  \\"/finance/payment-cheques/{counter__slug}/\\";

export const deleteFinancePaymentDetailsId = (
  /** A UUID string identifying this Payment Detail. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteFinancePaymentDetailsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteFinancePaymentDetailsId.key = \\"/finance/payment-details/{id}/\\";

export const deleteFinanceRevenueBondsCounter__slug = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteFinanceRevenueBondsCounter__slug.key, { counter__slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteFinanceRevenueBondsCounter__slug.key =
  \\"/finance/revenue-bonds/{counter__slug}/\\";

export const deleteFinanceRevenueChequesCounter__slug = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteFinanceRevenueChequesCounter__slug.key, { counter__slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteFinanceRevenueChequesCounter__slug.key =
  \\"/finance/revenue-cheques/{counter__slug}/\\";

export const deleteFinanceRevenueDetailsId = (
  /** A UUID string identifying this Revenue Detail. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteFinanceRevenueDetailsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteFinanceRevenueDetailsId.key = \\"/finance/revenue-details/{id}/\\";

export const deleteFinanceSlipsId = (
  /** A UUID string identifying this slip. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteFinanceSlipsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteFinanceSlipsId.key = \\"/finance/slips/{id}/\\";

export const deleteFinanceSupplierAccountsId = (
  /** A UUID string identifying this supplier account. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteFinanceSupplierAccountsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteFinanceSupplierAccountsId.key = \\"/finance/supplier-accounts/{id}/\\";

export const deleteFinanceTxnsId = (
  /** A UUID string identifying this transaction. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteFinanceTxnsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteFinanceTxnsId.key = \\"/finance/txns/{id}/\\";

export const deleteHrCrewsId = (
  /** A UUID string identifying this Crew. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteHrCrewsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteHrCrewsId.key = \\"/hr/crews/{id}/\\";

export const deleteHrDepartmentsId = (
  /** A UUID string identifying this Main Department. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteHrDepartmentsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteHrDepartmentsId.key = \\"/hr/departments/{id}/\\";

export const deleteHrLocationsId = (
  /** A UUID string identifying this Location. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteHrLocationsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteHrLocationsId.key = \\"/hr/locations/{id}/\\";

export const deleteHrPersonnelId = (
  /** A UUID string identifying this Person. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteHrPersonnelId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteHrPersonnelId.key = \\"/hr/personnel/{id}/\\";

export const deleteHrPositionsId = (
  /** A UUID string identifying this Main Position. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteHrPositionsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteHrPositionsId.key = \\"/hr/positions/{id}/\\";

export const deleteHrProfessionsId = (
  /** A UUID string identifying this Profession. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteHrProfessionsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteHrProfessionsId.key = \\"/hr/professions/{id}/\\";

export const deleteHrQuitReasonsId = (
  /** A UUID string identifying this Quit Reason. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteHrQuitReasonsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteHrQuitReasonsId.key = \\"/hr/quit-reasons-/{id}/\\";

export const deleteHrQuitRecordsId = (
  /** A UUID string identifying this Quit Record. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteHrQuitRecordsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteHrQuitRecordsId.key = \\"/hr/quit-records/{id}/\\";

export const deleteHrSalariesId = (
  /** A UUID string identifying this Salary. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteHrSalariesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteHrSalariesId.key = \\"/hr/salaries/{id}/\\";

export const deleteHrSalaryPermissionsId = (
  /** A unique integer value identifying this Project Salary Permission. */
  id: number,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteHrSalaryPermissionsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteHrSalaryPermissionsId.key = \\"/hr/salary-permissions/{id}/\\";

export const deleteProcurementAdvancePaymentsId = (
  /** A UUID string identifying this order advance payment. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteProcurementAdvancePaymentsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteProcurementAdvancePaymentsId.key = \\"/procurement/advance-payments/{id}/\\";

export const deleteProcurementInvoicesCounter__slug = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteProcurementInvoicesCounter__slug.key, { counter__slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteProcurementInvoicesCounter__slug.key =
  \\"/procurement/invoices/{counter__slug}/\\";

export const deleteProcurementOrdersCounter__slug = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteProcurementOrdersCounter__slug.key, { counter__slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteProcurementOrdersCounter__slug.key =
  \\"/procurement/orders/{counter__slug}/\\";

export const deleteProcurementRequestTypesId = (
  /** A UUID string identifying this request type. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteProcurementRequestTypesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteProcurementRequestTypesId.key = \\"/procurement/request-types/{id}/\\";

export const deleteProcurementRequestsCounter__slug = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteProcurementRequestsCounter__slug.key, { counter__slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteProcurementRequestsCounter__slug.key =
  \\"/procurement/requests/{counter__slug}/\\";

export const deleteProcurementSpecialInvoiceTypesId = (
  /** A UUID string identifying this special invoice type. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteProcurementSpecialInvoiceTypesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteProcurementSpecialInvoiceTypesId.key =
  \\"/procurement/special-invoice-types/{id}/\\";

export const deleteProcurementSpecialInvoicesCounter__slug = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteProcurementSpecialInvoicesCounter__slug.key, {
      counter__slug,
    }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteProcurementSpecialInvoicesCounter__slug.key =
  \\"/procurement/special-invoices/{counter__slug}/\\";

export const deleteProjectsAccountingtypesId = (
  /** A UUID string identifying this accounting type. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteProjectsAccountingtypesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteProjectsAccountingtypesId.key = \\"/projects/accountingtypes/{id}/\\";

export const deleteProjectsCitiesId = (
  /** A UUID string identifying this city. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteProjectsCitiesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteProjectsCitiesId.key = \\"/projects/cities/{id}/\\";

export const deleteProjectsCompaniesSlug = (
  slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteProjectsCompaniesSlug.key, { slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteProjectsCompaniesSlug.key = \\"/projects/companies/{slug}/\\";

export const deleteProjectsCountriesId = (
  /** A UUID string identifying this country. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteProjectsCountriesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteProjectsCountriesId.key = \\"/projects/countries/{id}/\\";

export const deleteProjectsDistrictsId = (
  /** A UUID string identifying this district. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteProjectsDistrictsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteProjectsDistrictsId.key = \\"/projects/districts/{id}/\\";

export const deleteProjectsProjectsSlug = (
  slug: string,
  queryParams?: DeleteProjectsProjectsSlugQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteProjectsProjectsSlug.key, { slug }),
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteProjectsProjectsSlug.key = \\"/projects/projects/{slug}/\\";

export const deleteProjectsProjecttypesId = (
  /** A UUID string identifying this project type. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteProjectsProjecttypesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteProjectsProjecttypesId.key = \\"/projects/projecttypes/{id}/\\";

export const deleteProjectsResponsiblesId = (
  /** A UUID string identifying this responsible. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteProjectsResponsiblesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteProjectsResponsiblesId.key = \\"/projects/responsibles/{id}/\\";

export const deleteProjectsResponsibletypesId = (
  /** A UUID string identifying this responsible type. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteProjectsResponsibletypesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteProjectsResponsibletypesId.key = \\"/projects/responsibletypes/{id}/\\";

export const deleteRatesRatesId = (
  /** A unique integer value identifying this rate. */
  id: number,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteRatesRatesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteRatesRatesId.key = \\"/rates/rates/{id}/\\";

export const deleteSubcontractsContractCategoriesId = (
  /** A UUID string identifying this contract category. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteSubcontractsContractCategoriesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteSubcontractsContractCategoriesId.key =
  \\"/subcontracts/contract-categories/{id}/\\";

export const deleteSubcontractsContractCollateralReasonId = (
  /** A UUID string identifying this contract collateral reason. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteSubcontractsContractCollateralReasonId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteSubcontractsContractCollateralReasonId.key =
  \\"/subcontracts/contract-collateral-reason/{id}/\\";

export const deleteSubcontractsContractCollateralStatusId = (
  /** A UUID string identifying this contract collateral status. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteSubcontractsContractCollateralStatusId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteSubcontractsContractCollateralStatusId.key =
  \\"/subcontracts/contract-collateral-status/{id}/\\";

export const deleteSubcontractsContractCollateralTypesId = (
  /** A UUID string identifying this contract collateral type. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteSubcontractsContractCollateralTypesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteSubcontractsContractCollateralTypesId.key =
  \\"/subcontracts/contract-collateral-types/{id}/\\";

export const deleteSubcontractsContractsCounter__slug = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteSubcontractsContractsCounter__slug.key, { counter__slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteSubcontractsContractsCounter__slug.key =
  \\"/subcontracts/contracts/{counter__slug}/\\";

export const deleteSubcontractsDeductionReturnsCounter__slug = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteSubcontractsDeductionReturnsCounter__slug.key, {
      counter__slug,
    }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteSubcontractsDeductionReturnsCounter__slug.key =
  \\"/subcontracts/deduction-returns/{counter__slug}/\\";

export const deleteSubcontractsProgressesCounter__slug = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteSubcontractsProgressesCounter__slug.key, { counter__slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteSubcontractsProgressesCounter__slug.key =
  \\"/subcontracts/progresses/{counter__slug}/\\";

export const deleteSubcontractsRevisionsId = (
  /** A UUID string identifying this contract revision. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteSubcontractsRevisionsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteSubcontractsRevisionsId.key = \\"/subcontracts/revisions/{id}/\\";

export const deleteSuppliersAccountingCodesId = (
  /** A UUID string identifying this supplier accounting code. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteSuppliersAccountingCodesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteSuppliersAccountingCodesId.key = \\"/suppliers/accounting-codes/{id}/\\";

export const deleteSuppliersBankAccountsId = (
  /** A UUID string identifying this supplier bank account. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteSuppliersBankAccountsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteSuppliersBankAccountsId.key = \\"/suppliers/bank-accounts/{id}/\\";

export const deleteSuppliersContactsId = (
  /** A UUID string identifying this supplier contact. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteSuppliersContactsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteSuppliersContactsId.key = \\"/suppliers/contacts/{id}/\\";

export const deleteSuppliersReviewAnswersId = (
  /** A UUID string identifying this answer. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteSuppliersReviewAnswersId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteSuppliersReviewAnswersId.key = \\"/suppliers/review-answers/{id}/\\";

export const deleteSuppliersReviewFormsSlug = (
  slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteSuppliersReviewFormsSlug.key, { slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteSuppliersReviewFormsSlug.key = \\"/suppliers/review-forms/{slug}/\\";

export const deleteSuppliersReviewQuestionsId = (
  /** A UUID string identifying this review question. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteSuppliersReviewQuestionsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteSuppliersReviewQuestionsId.key = \\"/suppliers/review-questions/{id}/\\";

export const deleteSuppliersReviewTemplatesSlug = (
  slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteSuppliersReviewTemplatesSlug.key, { slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteSuppliersReviewTemplatesSlug.key = \\"/suppliers/review-templates/{slug}/\\";

export const deleteSuppliersSupplierActivityTypesId = (
  /** A UUID string identifying this supplier activity type. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteSuppliersSupplierActivityTypesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteSuppliersSupplierActivityTypesId.key =
  \\"/suppliers/supplier-activity-types/{id}/\\";

export const deleteSuppliersSupplierBranchesId = (
  /** A UUID string identifying this supplier branch. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteSuppliersSupplierBranchesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteSuppliersSupplierBranchesId.key = \\"/suppliers/supplier-branches/{id}/\\";

export const deleteSuppliersSupplierTypesId = (
  /** A UUID string identifying this supplier type. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteSuppliersSupplierTypesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteSuppliersSupplierTypesId.key = \\"/suppliers/supplier-types/{id}/\\";

export const deleteSuppliersSuppliersSlug = (
  slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteSuppliersSuppliersSlug.key, { slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteSuppliersSuppliersSlug.key = \\"/suppliers/suppliers/{slug}/\\";

export const deleteWarehouseProductsId = (
  /** A UUID string identifying this product. */
  id: string,
  queryParams: DeleteWarehouseProductsIdQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteWarehouseProductsId.key, { id }),
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteWarehouseProductsId.key = \\"/warehouse/products/{id}/\\";

export const deleteWarehouseTransactionsId = (
  /** A UUID string identifying this transaction. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteWarehouseTransactionsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteWarehouseTransactionsId.key = \\"/warehouse/transactions/{id}/\\";

export const deleteWarehouseWarehousesId = (
  /** A UUID string identifying this warehouse. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.deleteRequest(
    template(deleteWarehouseWarehousesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
deleteWarehouseWarehousesId.key = \\"/warehouse/warehouses/{id}/\\";

export const getApiSchema = (
  queryParams?: GetApiSchemaQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<{ [x: string]: any }>> => {
  return Http.getRequest(
    getApiSchema.key,
    queryParams,
    undefined,
    _CONSTANT1,
    overrideConfig(_CONSTANT0, configOverride),
  );
};

/** Key is end point string without base url */
getApiSchema.key = \\"/api/schema/\\";

export const getAuthGroups = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<GroupMember[]>> => {
  return Http.getRequest(
    getAuthGroups.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getAuthGroups.key = \\"/auth/groups/\\";

export const getAuthGroupsId = (
  /** A unique integer value identifying this group. */
  id: number,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<GroupMember>> => {
  return Http.getRequest(
    template(getAuthGroupsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getAuthGroupsId.key = \\"/auth/groups/{id}/\\";

export const getAuthGroupsPermissions = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getAuthGroupsPermissions.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getAuthGroupsPermissions.key = \\"/auth/groups/permissions/\\";

export const getAuthPermissions = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ConsolidatedPermissions>> => {
  return Http.getRequest(
    getAuthPermissions.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getAuthPermissions.key = \\"/auth/permissions/\\";

export const getAuthUser = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<CustomUserDetails>> => {
  return Http.getRequest(
    getAuthUser.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getAuthUser.key = \\"/auth/user/\\";

export const getAuthUserGroups = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<UserGroup[]>> => {
  return Http.getRequest(
    getAuthUserGroups.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getAuthUserGroups.key = \\"/auth/user/groups/\\";

export const getAuthUserGroupsId = (
  /** A unique integer value identifying this user. */
  id: number,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<UserGroup>> => {
  return Http.getRequest(
    template(getAuthUserGroupsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getAuthUserGroupsId.key = \\"/auth/user/groups/{id}/\\";

export const getCodesActivities = (
  queryParams?: GetCodesActivitiesQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedActivityListList>> => {
  return Http.getRequest(
    getCodesActivities.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getCodesActivities.key = \\"/codes/activities/\\";

export const getCodesActivitiesId = (
  /** A UUID string identifying this Activity. */
  id: string,
  queryParams?: GetCodesActivitiesIdQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Activity>> => {
  return Http.getRequest(
    template(getCodesActivitiesId.key, { id }),
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getCodesActivitiesId.key = \\"/codes/activities/{id}/\\";

export const getCodesActivitiesPermissions = (
  queryParams?: GetCodesActivitiesPermissionsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getCodesActivitiesPermissions.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getCodesActivitiesPermissions.key = \\"/codes/activities/permissions/\\";

export const getCodesActivityAccountCodes = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<SupplierAccountingCode[]>> => {
  return Http.getRequest(
    getCodesActivityAccountCodes.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getCodesActivityAccountCodes.key = \\"/codes/activity-account-codes/\\";

export const getCodesActivityAccountCodesId = (
  /** A UUID string identifying this accounting code. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<SupplierAccountingCode>> => {
  return Http.getRequest(
    template(getCodesActivityAccountCodesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getCodesActivityAccountCodesId.key = \\"/codes/activity-account-codes/{id}/\\";

export const getCodesResources = (
  queryParams?: GetCodesResourcesQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedResourceListList>> => {
  return Http.getRequest(
    getCodesResources.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getCodesResources.key = \\"/codes/resources/\\";

export const getCodesResourcesId = (
  /** A UUID string identifying this Resource. */
  id: string,
  queryParams?: GetCodesResourcesIdQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Resource>> => {
  return Http.getRequest(
    template(getCodesResourcesId.key, { id }),
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getCodesResourcesId.key = \\"/codes/resources/{id}/\\";

export const getCodesResourcesPermissions = (
  queryParams?: GetCodesResourcesPermissionsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getCodesResourcesPermissions.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getCodesResourcesPermissions.key = \\"/codes/resources/permissions/\\";

export const getCodesWbs = (
  queryParams?: GetCodesWbsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedWBSListList>> => {
  return Http.getRequest(
    getCodesWbs.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getCodesWbs.key = \\"/codes/wbs/\\";

export const getCodesWbsId = (
  /** A UUID string identifying this WBS. */
  id: string,
  queryParams?: GetCodesWbsIdQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<WBS>> => {
  return Http.getRequest(
    template(getCodesWbsId.key, { id }),
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getCodesWbsId.key = \\"/codes/wbs/{id}/\\";

export const getCodesWbsPermissions = (
  queryParams?: GetCodesWbsPermissionsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getCodesWbsPermissions.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getCodesWbsPermissions.key = \\"/codes/wbs/permissions/\\";

export const getCodesWbsProjects = (
  queryParams?: GetCodesWbsProjectsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<WBS>> => {
  return Http.getRequest(
    getCodesWbsProjects.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getCodesWbsProjects.key = \\"/codes/wbs/projects/\\";

export const getCommonAttachmentsId = (
  /** A UUID string identifying this attachment. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Attachment>> => {
  return Http.getRequest(
    template(getCommonAttachmentsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getCommonAttachmentsId.key = \\"/common/attachments/{id}/\\";

export const getCommonBankNames = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<BankName[]>> => {
  return Http.getRequest(
    getCommonBankNames.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getCommonBankNames.key = \\"/common/bank-names/\\";

export const getCommonBankNamesId = (
  /** A UUID string identifying this Bank Name. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<BankName>> => {
  return Http.getRequest(
    template(getCommonBankNamesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getCommonBankNamesId.key = \\"/common/bank-names/{id}/\\";

export const getCommonCurrencies = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Currency[]>> => {
  return Http.getRequest(
    getCommonCurrencies.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getCommonCurrencies.key = \\"/common/currencies/\\";

export const getCommonCurrenciesId = (
  /** A UUID string identifying this Currency. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Currency>> => {
  return Http.getRequest(
    template(getCommonCurrenciesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getCommonCurrenciesId.key = \\"/common/currencies/{id}/\\";

export const getCommonFeatureFlags = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<FeatureFlags[]>> => {
  return Http.getRequest(
    getCommonFeatureFlags.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getCommonFeatureFlags.key = \\"/common/feature-flags/\\";

export const getCommonPackagingMethods = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PackagingMethod[]>> => {
  return Http.getRequest(
    getCommonPackagingMethods.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getCommonPackagingMethods.key = \\"/common/packaging-methods/\\";

export const getCommonPackagingMethodsId = (
  /** A UUID string identifying this Packaging Method. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PackagingMethod>> => {
  return Http.getRequest(
    template(getCommonPackagingMethodsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getCommonPackagingMethodsId.key = \\"/common/packaging-methods/{id}/\\";

export const getCommonPaymentMethods = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaymentMethod[]>> => {
  return Http.getRequest(
    getCommonPaymentMethods.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getCommonPaymentMethods.key = \\"/common/payment-methods/\\";

export const getCommonPaymentMethodsId = (
  /** A UUID string identifying this Payment Method. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaymentMethod>> => {
  return Http.getRequest(
    template(getCommonPaymentMethodsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getCommonPaymentMethodsId.key = \\"/common/payment-methods/{id}/\\";

export const getCommonResourceUnits = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ResourceUnit[]>> => {
  return Http.getRequest(
    getCommonResourceUnits.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getCommonResourceUnits.key = \\"/common/resource-units/\\";

export const getCommonResourceUnitsId = (
  /** A UUID string identifying this Resource Unit. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ResourceUnit>> => {
  return Http.getRequest(
    template(getCommonResourceUnitsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getCommonResourceUnitsId.key = \\"/common/resource-units/{id}/\\";

export const getCommonTaxParameters = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<TaxParameter[]>> => {
  return Http.getRequest(
    getCommonTaxParameters.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getCommonTaxParameters.key = \\"/common/tax-parameters/\\";

export const getCommonTaxParametersId = (
  /** A UUID string identifying this Tax Parameter. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<TaxParameter>> => {
  return Http.getRequest(
    template(getCommonTaxParametersId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getCommonTaxParametersId.key = \\"/common/tax-parameters/{id}/\\";

export const getCommonVatWitholdings = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Vatwitholding[]>> => {
  return Http.getRequest(
    getCommonVatWitholdings.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getCommonVatWitholdings.key = \\"/common/vat-witholdings/\\";

export const getCommonVatWitholdingsId = (
  /** A UUID string identifying this Vat Witholding. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Vatwitholding>> => {
  return Http.getRequest(
    template(getCommonVatWitholdingsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getCommonVatWitholdingsId.key = \\"/common/vat-witholdings/{id}/\\";

export const getFinanceAccountTypes = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<AccountType[]>> => {
  return Http.getRequest(
    getFinanceAccountTypes.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceAccountTypes.key = \\"/finance/account-types/\\";

export const getFinanceAccounts = (
  queryParams?: GetFinanceAccountsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedAccountList>> => {
  return Http.getRequest(
    getFinanceAccounts.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceAccounts.key = \\"/finance/accounts/\\";

export const getFinanceAccountsId = (
  /** A UUID string identifying this account. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Account>> => {
  return Http.getRequest(
    template(getFinanceAccountsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceAccountsId.key = \\"/finance/accounts/{id}/\\";

export const getFinanceBankAccountTypes = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<AccountType[]>> => {
  return Http.getRequest(
    getFinanceBankAccountTypes.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceBankAccountTypes.key = \\"/finance/bank-account-types/\\";

export const getFinanceBankAccounts = (
  queryParams?: GetFinanceBankAccountsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedBankAccountListList>> => {
  return Http.getRequest(
    getFinanceBankAccounts.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceBankAccounts.key = \\"/finance/bank-accounts/\\";

export const getFinanceBankAccountsId = (
  /** A UUID string identifying this bank account. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<BankAccount>> => {
  return Http.getRequest(
    template(getFinanceBankAccountsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceBankAccountsId.key = \\"/finance/bank-accounts/{id}/\\";

export const getFinanceCashAccountTypes = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<AccountType[]>> => {
  return Http.getRequest(
    getFinanceCashAccountTypes.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceCashAccountTypes.key = \\"/finance/cash-account-types/\\";

export const getFinanceCashAccounts = (
  queryParams?: GetFinanceCashAccountsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedCashAccountListList>> => {
  return Http.getRequest(
    getFinanceCashAccounts.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceCashAccounts.key = \\"/finance/cash-accounts/\\";

export const getFinanceCashAccountsId = (
  /** A UUID string identifying this cash account. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<CashAccount>> => {
  return Http.getRequest(
    template(getFinanceCashAccountsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceCashAccountsId.key = \\"/finance/cash-accounts/{id}/\\";

export const getFinanceDefaultCurrency = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Currency[]>> => {
  return Http.getRequest(
    getFinanceDefaultCurrency.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceDefaultCurrency.key = \\"/finance/default-currency/\\";

export const getFinanceDefaultCurrencyId = (
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Currency>> => {
  return Http.getRequest(
    template(getFinanceDefaultCurrencyId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceDefaultCurrencyId.key = \\"/finance/default-currency/{id}/\\";

export const getFinanceExpenseTransactionTypes = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<TransactionType[]>> => {
  return Http.getRequest(
    getFinanceExpenseTransactionTypes.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceExpenseTransactionTypes.key = \\"/finance/expense-transaction-types/\\";

export const getFinanceExpenses = (
  queryParams?: GetFinanceExpensesQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedExpenseListList>> => {
  return Http.getRequest(
    getFinanceExpenses.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceExpenses.key = \\"/finance/expenses/\\";

export const getFinanceExpensesCounter__slug = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Expense>> => {
  return Http.getRequest(
    template(getFinanceExpensesCounter__slug.key, { counter__slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceExpensesCounter__slug.key = \\"/finance/expenses/{counter__slug}/\\";

export const getFinanceExpensesCounter__slugHistory = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Expense>> => {
  return Http.getRequest(
    template(getFinanceExpensesCounter__slugHistory.key, { counter__slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceExpensesCounter__slugHistory.key =
  \\"/finance/expenses/{counter__slug}/history/\\";

export const getFinanceIncomeInvoiceCategories = (
  queryParams?: GetFinanceIncomeInvoiceCategoriesQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<IncomeInvoiceCategory[]>> => {
  return Http.getRequest(
    getFinanceIncomeInvoiceCategories.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceIncomeInvoiceCategories.key = \\"/finance/income-invoice-categories/\\";

export const getFinanceIncomeInvoiceCategoriesId = (
  /** A UUID string identifying this income invoice category. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<IncomeInvoiceCategory>> => {
  return Http.getRequest(
    template(getFinanceIncomeInvoiceCategoriesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceIncomeInvoiceCategoriesId.key =
  \\"/finance/income-invoice-categories/{id}/\\";

export const getFinanceIncomeInvoices = (
  queryParams?: GetFinanceIncomeInvoicesQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedIncomeInvoiceListList>> => {
  return Http.getRequest(
    getFinanceIncomeInvoices.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceIncomeInvoices.key = \\"/finance/income-invoices/\\";

export const getFinanceIncomeInvoicesCounter__slug = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<IncomeInvoice>> => {
  return Http.getRequest(
    template(getFinanceIncomeInvoicesCounter__slug.key, { counter__slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceIncomeInvoicesCounter__slug.key =
  \\"/finance/income-invoices/{counter__slug}/\\";

export const getFinanceIncomeInvoicesCounter__slugApprovalHistory = (
  counter__slug: string,
  queryParams?: GetFinanceIncomeInvoicesCounter__slugApprovalHistoryQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedApprovalHistoryList>> => {
  return Http.getRequest(
    template(getFinanceIncomeInvoicesCounter__slugApprovalHistory.key, {
      counter__slug,
    }),
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceIncomeInvoicesCounter__slugApprovalHistory.key =
  \\"/finance/income-invoices/{counter__slug}/approval-history/\\";

export const getFinanceIncomeInvoicesCounter__slugAttachments = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<IncomeInvoice>> => {
  return Http.getRequest(
    template(getFinanceIncomeInvoicesCounter__slugAttachments.key, {
      counter__slug,
    }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceIncomeInvoicesCounter__slugAttachments.key =
  \\"/finance/income-invoices/{counter__slug}/attachments/\\";

export const getFinanceIncomeInvoicesCounter__slugHistory = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<IncomeInvoice>> => {
  return Http.getRequest(
    template(getFinanceIncomeInvoicesCounter__slugHistory.key, {
      counter__slug,
    }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceIncomeInvoicesCounter__slugHistory.key =
  \\"/finance/income-invoices/{counter__slug}/history/\\";

export const getFinanceIncomeInvoicesPermissions = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getFinanceIncomeInvoicesPermissions.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceIncomeInvoicesPermissions.key =
  \\"/finance/income-invoices/permissions/\\";

export const getFinanceIncomeInvoicesStates = (
  queryParams?: GetFinanceIncomeInvoicesStatesQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<State[]>> => {
  return Http.getRequest(
    getFinanceIncomeInvoicesStates.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceIncomeInvoicesStates.key = \\"/finance/income-invoices/states/\\";

export const getFinanceInstruments = (
  queryParams?: GetFinanceInstrumentsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedInstrumentListDiscoveryList>> => {
  return Http.getRequest(
    getFinanceInstruments.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceInstruments.key = \\"/finance/instruments/\\";

export const getFinanceInstrumentsPermissions = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getFinanceInstrumentsPermissions.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceInstrumentsPermissions.key = \\"/finance/instruments/permissions/\\";

export const getFinancePaymentBonds = (
  queryParams?: GetFinancePaymentBondsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedPaymentBondListList>> => {
  return Http.getRequest(
    getFinancePaymentBonds.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinancePaymentBonds.key = \\"/finance/payment-bonds/\\";

export const getFinancePaymentBondsCounter__slug = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaymentBond>> => {
  return Http.getRequest(
    template(getFinancePaymentBondsCounter__slug.key, { counter__slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinancePaymentBondsCounter__slug.key =
  \\"/finance/payment-bonds/{counter__slug}/\\";

export const getFinancePaymentBondsCounter__slugHistory = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaymentBond>> => {
  return Http.getRequest(
    template(getFinancePaymentBondsCounter__slugHistory.key, { counter__slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinancePaymentBondsCounter__slugHistory.key =
  \\"/finance/payment-bonds/{counter__slug}/history/\\";

export const getFinancePaymentBondsPermissions = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getFinancePaymentBondsPermissions.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinancePaymentBondsPermissions.key = \\"/finance/payment-bonds/permissions/\\";

export const getFinancePaymentCheques = (
  queryParams?: GetFinancePaymentChequesQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedPaymentChequeListList>> => {
  return Http.getRequest(
    getFinancePaymentCheques.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinancePaymentCheques.key = \\"/finance/payment-cheques/\\";

export const getFinancePaymentChequesCounter__slug = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaymentCheque>> => {
  return Http.getRequest(
    template(getFinancePaymentChequesCounter__slug.key, { counter__slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinancePaymentChequesCounter__slug.key =
  \\"/finance/payment-cheques/{counter__slug}/\\";

export const getFinancePaymentChequesCounter__slugHistory = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaymentCheque>> => {
  return Http.getRequest(
    template(getFinancePaymentChequesCounter__slugHistory.key, {
      counter__slug,
    }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinancePaymentChequesCounter__slugHistory.key =
  \\"/finance/payment-cheques/{counter__slug}/history/\\";

export const getFinancePaymentChequesPermissions = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getFinancePaymentChequesPermissions.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinancePaymentChequesPermissions.key =
  \\"/finance/payment-cheques/permissions/\\";

export const getFinancePaymentDetails = (
  queryParams?: GetFinancePaymentDetailsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedPaymentDetailList>> => {
  return Http.getRequest(
    getFinancePaymentDetails.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinancePaymentDetails.key = \\"/finance/payment-details/\\";

export const getFinancePaymentDetailsId = (
  /** A UUID string identifying this Payment Detail. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaymentDetail>> => {
  return Http.getRequest(
    template(getFinancePaymentDetailsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinancePaymentDetailsId.key = \\"/finance/payment-details/{id}/\\";

export const getFinancePaymentInstrumentStates = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<AccountType[]>> => {
  return Http.getRequest(
    getFinancePaymentInstrumentStates.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinancePaymentInstrumentStates.key = \\"/finance/payment-instrument-states/\\";

export const getFinancePlannedPayments = (
  queryParams?: GetFinancePlannedPaymentsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedPaymentPlan2TypeDiscoveryList>> => {
  return Http.getRequest(
    getFinancePlannedPayments.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinancePlannedPayments.key = \\"/finance/planned-payments/\\";

export const getFinancePlannedPaymentsPermissions = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getFinancePlannedPaymentsPermissions.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinancePlannedPaymentsPermissions.key =
  \\"/finance/planned-payments/permissions/\\";

export const getFinancePlannedRevenue = (
  queryParams?: GetFinancePlannedRevenueQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedPaymentPlan2TypeDiscoveryList>> => {
  return Http.getRequest(
    getFinancePlannedRevenue.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinancePlannedRevenue.key = \\"/finance/planned-revenue/\\";

export const getFinancePlannedRevenuePermissions = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getFinancePlannedRevenuePermissions.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinancePlannedRevenuePermissions.key =
  \\"/finance/planned-revenue/permissions/\\";

export const getFinanceRevenueBonds = (
  queryParams?: GetFinanceRevenueBondsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedRevenueBondListList>> => {
  return Http.getRequest(
    getFinanceRevenueBonds.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceRevenueBonds.key = \\"/finance/revenue-bonds/\\";

export const getFinanceRevenueBondsCounter__slug = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<RevenueBond>> => {
  return Http.getRequest(
    template(getFinanceRevenueBondsCounter__slug.key, { counter__slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceRevenueBondsCounter__slug.key =
  \\"/finance/revenue-bonds/{counter__slug}/\\";

export const getFinanceRevenueBondsCounter__slugHistory = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<RevenueBond>> => {
  return Http.getRequest(
    template(getFinanceRevenueBondsCounter__slugHistory.key, { counter__slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceRevenueBondsCounter__slugHistory.key =
  \\"/finance/revenue-bonds/{counter__slug}/history/\\";

export const getFinanceRevenueBondsPermissions = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getFinanceRevenueBondsPermissions.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceRevenueBondsPermissions.key = \\"/finance/revenue-bonds/permissions/\\";

export const getFinanceRevenueCheques = (
  queryParams?: GetFinanceRevenueChequesQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedRevenueChequeListList>> => {
  return Http.getRequest(
    getFinanceRevenueCheques.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceRevenueCheques.key = \\"/finance/revenue-cheques/\\";

export const getFinanceRevenueChequesCounter__slug = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<RevenueCheque>> => {
  return Http.getRequest(
    template(getFinanceRevenueChequesCounter__slug.key, { counter__slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceRevenueChequesCounter__slug.key =
  \\"/finance/revenue-cheques/{counter__slug}/\\";

export const getFinanceRevenueChequesCounter__slugHistory = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<RevenueCheque>> => {
  return Http.getRequest(
    template(getFinanceRevenueChequesCounter__slugHistory.key, {
      counter__slug,
    }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceRevenueChequesCounter__slugHistory.key =
  \\"/finance/revenue-cheques/{counter__slug}/history/\\";

export const getFinanceRevenueChequesPermissions = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getFinanceRevenueChequesPermissions.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceRevenueChequesPermissions.key =
  \\"/finance/revenue-cheques/permissions/\\";

export const getFinanceRevenueDetails = (
  queryParams?: GetFinanceRevenueDetailsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedRevenueDetailList>> => {
  return Http.getRequest(
    getFinanceRevenueDetails.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceRevenueDetails.key = \\"/finance/revenue-details/\\";

export const getFinanceRevenueDetailsId = (
  /** A UUID string identifying this Revenue Detail. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<RevenueDetail>> => {
  return Http.getRequest(
    template(getFinanceRevenueDetailsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceRevenueDetailsId.key = \\"/finance/revenue-details/{id}/\\";

export const getFinanceSlips = (
  queryParams?: GetFinanceSlipsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedSlipList>> => {
  return Http.getRequest(
    getFinanceSlips.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceSlips.key = \\"/finance/slips/\\";

export const getFinanceSlipsId = (
  /** A UUID string identifying this slip. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Slip>> => {
  return Http.getRequest(
    template(getFinanceSlipsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceSlipsId.key = \\"/finance/slips/{id}/\\";

export const getFinanceSupplierAccountTypes = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<AccountType[]>> => {
  return Http.getRequest(
    getFinanceSupplierAccountTypes.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceSupplierAccountTypes.key = \\"/finance/supplier-account-types/\\";

export const getFinanceSupplierAccounts = (
  queryParams?: GetFinanceSupplierAccountsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedSupplierAccountListList>> => {
  return Http.getRequest(
    getFinanceSupplierAccounts.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceSupplierAccounts.key = \\"/finance/supplier-accounts/\\";

export const getFinanceSupplierAccountsId = (
  /** A UUID string identifying this supplier account. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<SupplierAccount>> => {
  return Http.getRequest(
    template(getFinanceSupplierAccountsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceSupplierAccountsId.key = \\"/finance/supplier-accounts/{id}/\\";

export const getFinanceTxns = (
  queryParams?: GetFinanceTxnsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedTransactionList>> => {
  return Http.getRequest(
    getFinanceTxns.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceTxns.key = \\"/finance/txns/\\";

export const getFinanceTxnsExport = (
  queryParams?: GetFinanceTxnsExportQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<string>> => {
  return Http.getRequest(
    getFinanceTxnsExport.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceTxnsExport.key = \\"/finance/txns/export/\\";

export const getFinanceTxnsId = (
  /** A UUID string identifying this transaction. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Transaction>> => {
  return Http.getRequest(
    template(getFinanceTxnsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getFinanceTxnsId.key = \\"/finance/txns/{id}/\\";

export const getHrCrews = (
  queryParams?: GetHrCrewsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedCrewListList>> => {
  return Http.getRequest(
    getHrCrews.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getHrCrews.key = \\"/hr/crews/\\";

export const getHrCrewsId = (
  /** A UUID string identifying this Crew. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Crew>> => {
  return Http.getRequest(
    template(getHrCrewsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getHrCrewsId.key = \\"/hr/crews/{id}/\\";

export const getHrCrewsIdHistory = (
  /** A UUID string identifying this Crew. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Crew>> => {
  return Http.getRequest(
    template(getHrCrewsIdHistory.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getHrCrewsIdHistory.key = \\"/hr/crews/{id}/history/\\";

export const getHrCrewsPermissions = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getHrCrewsPermissions.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getHrCrewsPermissions.key = \\"/hr/crews/permissions/\\";

export const getHrDepartments = (
  queryParams?: GetHrDepartmentsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<MainDepartment[]>> => {
  return Http.getRequest(
    getHrDepartments.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getHrDepartments.key = \\"/hr/departments/\\";

export const getHrDepartmentsId = (
  /** A UUID string identifying this Main Department. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<MainDepartment>> => {
  return Http.getRequest(
    template(getHrDepartmentsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getHrDepartmentsId.key = \\"/hr/departments/{id}/\\";

export const getHrLocations = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<LocationParameter[]>> => {
  return Http.getRequest(
    getHrLocations.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getHrLocations.key = \\"/hr/locations/\\";

export const getHrLocationsId = (
  /** A UUID string identifying this Location. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<LocationParameter>> => {
  return Http.getRequest(
    template(getHrLocationsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getHrLocationsId.key = \\"/hr/locations/{id}/\\";

export const getHrPersonnel = (
  queryParams?: GetHrPersonnelQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedPersonListList>> => {
  return Http.getRequest(
    getHrPersonnel.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getHrPersonnel.key = \\"/hr/personnel/\\";

export const getHrPersonnelId = (
  /** A UUID string identifying this Person. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Person>> => {
  return Http.getRequest(
    template(getHrPersonnelId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getHrPersonnelId.key = \\"/hr/personnel/{id}/\\";

export const getHrPersonnelIdHistory = (
  /** A UUID string identifying this Person. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Person>> => {
  return Http.getRequest(
    template(getHrPersonnelIdHistory.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getHrPersonnelIdHistory.key = \\"/hr/personnel/{id}/history/\\";

export const getHrPersonnelPermissions = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getHrPersonnelPermissions.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getHrPersonnelPermissions.key = \\"/hr/personnel/permissions/\\";

export const getHrPositions = (
  queryParams?: GetHrPositionsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<MainPosition[]>> => {
  return Http.getRequest(
    getHrPositions.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getHrPositions.key = \\"/hr/positions/\\";

export const getHrPositionsId = (
  /** A UUID string identifying this Main Position. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<MainPosition>> => {
  return Http.getRequest(
    template(getHrPositionsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getHrPositionsId.key = \\"/hr/positions/{id}/\\";

export const getHrProfessions = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Profession[]>> => {
  return Http.getRequest(
    getHrProfessions.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getHrProfessions.key = \\"/hr/professions/\\";

export const getHrProfessionsId = (
  /** A UUID string identifying this Profession. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Profession>> => {
  return Http.getRequest(
    template(getHrProfessionsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getHrProfessionsId.key = \\"/hr/professions/{id}/\\";

export const getHrQuitReasons = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<QuitReason[]>> => {
  return Http.getRequest(
    getHrQuitReasons.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getHrQuitReasons.key = \\"/hr/quit-reasons-/\\";

export const getHrQuitReasonsId = (
  /** A UUID string identifying this Quit Reason. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<QuitReason>> => {
  return Http.getRequest(
    template(getHrQuitReasonsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getHrQuitReasonsId.key = \\"/hr/quit-reasons-/{id}/\\";

export const getHrQuitRecords = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<QuitRecord[]>> => {
  return Http.getRequest(
    getHrQuitRecords.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getHrQuitRecords.key = \\"/hr/quit-records/\\";

export const getHrQuitRecordsId = (
  /** A UUID string identifying this Quit Record. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<QuitRecord>> => {
  return Http.getRequest(
    template(getHrQuitRecordsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getHrQuitRecordsId.key = \\"/hr/quit-records/{id}/\\";

export const getHrSalaries = (
  queryParams?: GetHrSalariesQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedSalaryList>> => {
  return Http.getRequest(
    getHrSalaries.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getHrSalaries.key = \\"/hr/salaries/\\";

export const getHrSalariesId = (
  /** A UUID string identifying this Salary. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Salary>> => {
  return Http.getRequest(
    template(getHrSalariesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getHrSalariesId.key = \\"/hr/salaries/{id}/\\";

export const getHrSalariesIdHistory = (
  /** A UUID string identifying this Salary. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Salary>> => {
  return Http.getRequest(
    template(getHrSalariesIdHistory.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getHrSalariesIdHistory.key = \\"/hr/salaries/{id}/history/\\";

export const getHrSalariesPermissions = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getHrSalariesPermissions.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getHrSalariesPermissions.key = \\"/hr/salaries/permissions/\\";

export const getHrSalaryPermissions = (
  queryParams?: GetHrSalaryPermissionsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ProjectSalaryPermission[]>> => {
  return Http.getRequest(
    getHrSalaryPermissions.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getHrSalaryPermissions.key = \\"/hr/salary-permissions/\\";

export const getHrSalaryPermissionsId = (
  /** A unique integer value identifying this Project Salary Permission. */
  id: number,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ProjectSalaryPermission>> => {
  return Http.getRequest(
    template(getHrSalaryPermissionsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getHrSalaryPermissionsId.key = \\"/hr/salary-permissions/{id}/\\";

export const getProcurementAdvancePayments = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<OrderAdvancePayment[]>> => {
  return Http.getRequest(
    getProcurementAdvancePayments.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementAdvancePayments.key = \\"/procurement/advance-payments/\\";

export const getProcurementAdvancePaymentsId = (
  /** A UUID string identifying this order advance payment. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<OrderAdvancePayment>> => {
  return Http.getRequest(
    template(getProcurementAdvancePaymentsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementAdvancePaymentsId.key = \\"/procurement/advance-payments/{id}/\\";

export const getProcurementAdvancePaymentsPermissions = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getProcurementAdvancePaymentsPermissions.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementAdvancePaymentsPermissions.key =
  \\"/procurement/advance-payments/permissions/\\";

export const getProcurementApprovedOrderItems = (
  queryParams?: GetProcurementApprovedOrderItemsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedApprovedOrderItemList>> => {
  return Http.getRequest(
    getProcurementApprovedOrderItems.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementApprovedOrderItems.key = \\"/procurement/approved-order-items/\\";

export const getProcurementApprovedOrderItemsPermissions = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getProcurementApprovedOrderItemsPermissions.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementApprovedOrderItemsPermissions.key =
  \\"/procurement/approved-order-items/permissions/\\";

export const getProcurementApprovedRequestItems = (
  queryParams?: GetProcurementApprovedRequestItemsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedApprovedRequestItemList>> => {
  return Http.getRequest(
    getProcurementApprovedRequestItems.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementApprovedRequestItems.key = \\"/procurement/approved-request-items/\\";

export const getProcurementApprovedRequestItemsPermissions = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getProcurementApprovedRequestItemsPermissions.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementApprovedRequestItemsPermissions.key =
  \\"/procurement/approved-request-items/permissions/\\";

export const getProcurementInvoiceAdvanceBalanceCounter__slug = (
  counter__slug: string,
  queryParams: GetProcurementInvoiceAdvanceBalanceCounter__slugQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<InvoiceAdvanceBalance>> => {
  return Http.getRequest(
    template(getProcurementInvoiceAdvanceBalanceCounter__slug.key, {
      counter__slug,
    }),
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementInvoiceAdvanceBalanceCounter__slug.key =
  \\"/procurement/invoice-advance-balance/{counter__slug}/\\";

export const getProcurementInvoiceItems = (
  queryParams?: GetProcurementInvoiceItemsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<InvoiceItemList[]>> => {
  return Http.getRequest(
    getProcurementInvoiceItems.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementInvoiceItems.key = \\"/procurement/invoice-items/\\";

export const getProcurementInvoiceItemsPermissions = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getProcurementInvoiceItemsPermissions.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementInvoiceItemsPermissions.key =
  \\"/procurement/invoice-items/permissions/\\";

export const getProcurementInvoices = (
  queryParams?: GetProcurementInvoicesQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedInvoiceListList>> => {
  return Http.getRequest(
    getProcurementInvoices.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementInvoices.key = \\"/procurement/invoices/\\";

export const getProcurementInvoicesCounter__slug = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Invoice>> => {
  return Http.getRequest(
    template(getProcurementInvoicesCounter__slug.key, { counter__slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementInvoicesCounter__slug.key =
  \\"/procurement/invoices/{counter__slug}/\\";

export const getProcurementInvoicesCounter__slugApprovalHistory = (
  counter__slug: string,
  queryParams?: GetProcurementInvoicesCounter__slugApprovalHistoryQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedApprovalHistoryList>> => {
  return Http.getRequest(
    template(getProcurementInvoicesCounter__slugApprovalHistory.key, {
      counter__slug,
    }),
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementInvoicesCounter__slugApprovalHistory.key =
  \\"/procurement/invoices/{counter__slug}/approval-history/\\";

export const getProcurementInvoicesCounter__slugAttachments = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Invoice>> => {
  return Http.getRequest(
    template(getProcurementInvoicesCounter__slugAttachments.key, {
      counter__slug,
    }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementInvoicesCounter__slugAttachments.key =
  \\"/procurement/invoices/{counter__slug}/attachments/\\";

export const getProcurementInvoicesCounter__slugHistory = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Invoice>> => {
  return Http.getRequest(
    template(getProcurementInvoicesCounter__slugHistory.key, { counter__slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementInvoicesCounter__slugHistory.key =
  \\"/procurement/invoices/{counter__slug}/history/\\";

export const getProcurementInvoicesPermissions = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getProcurementInvoicesPermissions.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementInvoicesPermissions.key = \\"/procurement/invoices/permissions/\\";

export const getProcurementInvoicesStates = (
  queryParams?: GetProcurementInvoicesStatesQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<State[]>> => {
  return Http.getRequest(
    getProcurementInvoicesStates.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementInvoicesStates.key = \\"/procurement/invoices/states/\\";

export const getProcurementOrders = (
  queryParams?: GetProcurementOrdersQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedOrderListList>> => {
  return Http.getRequest(
    getProcurementOrders.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementOrders.key = \\"/procurement/orders/\\";

export const getProcurementOrdersCounter__slug = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Order>> => {
  return Http.getRequest(
    template(getProcurementOrdersCounter__slug.key, { counter__slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementOrdersCounter__slug.key = \\"/procurement/orders/{counter__slug}/\\";

export const getProcurementOrdersCounter__slugApprovalHistory = (
  counter__slug: string,
  queryParams?: GetProcurementOrdersCounter__slugApprovalHistoryQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedApprovalHistoryList>> => {
  return Http.getRequest(
    template(getProcurementOrdersCounter__slugApprovalHistory.key, {
      counter__slug,
    }),
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementOrdersCounter__slugApprovalHistory.key =
  \\"/procurement/orders/{counter__slug}/approval-history/\\";

export const getProcurementOrdersCounter__slugAttachments = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Order>> => {
  return Http.getRequest(
    template(getProcurementOrdersCounter__slugAttachments.key, {
      counter__slug,
    }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementOrdersCounter__slugAttachments.key =
  \\"/procurement/orders/{counter__slug}/attachments/\\";

export const getProcurementOrdersCounter__slugHistory = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Order>> => {
  return Http.getRequest(
    template(getProcurementOrdersCounter__slugHistory.key, { counter__slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementOrdersCounter__slugHistory.key =
  \\"/procurement/orders/{counter__slug}/history/\\";

export const getProcurementOrdersPermissions = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getProcurementOrdersPermissions.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementOrdersPermissions.key = \\"/procurement/orders/permissions/\\";

export const getProcurementOrdersStates = (
  queryParams?: GetProcurementOrdersStatesQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<State[]>> => {
  return Http.getRequest(
    getProcurementOrdersStates.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementOrdersStates.key = \\"/procurement/orders/states/\\";

export const getProcurementRequestTypes = (
  queryParams?: GetProcurementRequestTypesQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<RequestType[]>> => {
  return Http.getRequest(
    getProcurementRequestTypes.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementRequestTypes.key = \\"/procurement/request-types/\\";

export const getProcurementRequestTypesId = (
  /** A UUID string identifying this request type. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<RequestType>> => {
  return Http.getRequest(
    template(getProcurementRequestTypesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementRequestTypesId.key = \\"/procurement/request-types/{id}/\\";

export const getProcurementRequests = (
  queryParams?: GetProcurementRequestsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedRequestListList>> => {
  return Http.getRequest(
    getProcurementRequests.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementRequests.key = \\"/procurement/requests/\\";

export const getProcurementRequestsCounter__slug = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Request>> => {
  return Http.getRequest(
    template(getProcurementRequestsCounter__slug.key, { counter__slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementRequestsCounter__slug.key =
  \\"/procurement/requests/{counter__slug}/\\";

export const getProcurementRequestsCounter__slugApprovalHistory = (
  counter__slug: string,
  queryParams?: GetProcurementRequestsCounter__slugApprovalHistoryQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedApprovalHistoryList>> => {
  return Http.getRequest(
    template(getProcurementRequestsCounter__slugApprovalHistory.key, {
      counter__slug,
    }),
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementRequestsCounter__slugApprovalHistory.key =
  \\"/procurement/requests/{counter__slug}/approval-history/\\";

export const getProcurementRequestsCounter__slugAttachments = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Request>> => {
  return Http.getRequest(
    template(getProcurementRequestsCounter__slugAttachments.key, {
      counter__slug,
    }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementRequestsCounter__slugAttachments.key =
  \\"/procurement/requests/{counter__slug}/attachments/\\";

export const getProcurementRequestsCounter__slugHistory = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Request>> => {
  return Http.getRequest(
    template(getProcurementRequestsCounter__slugHistory.key, { counter__slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementRequestsCounter__slugHistory.key =
  \\"/procurement/requests/{counter__slug}/history/\\";

export const getProcurementRequestsPermissions = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getProcurementRequestsPermissions.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementRequestsPermissions.key = \\"/procurement/requests/permissions/\\";

export const getProcurementRequestsStates = (
  queryParams?: GetProcurementRequestsStatesQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<State[]>> => {
  return Http.getRequest(
    getProcurementRequestsStates.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementRequestsStates.key = \\"/procurement/requests/states/\\";

export const getProcurementSpecialInvoiceItems = (
  queryParams?: GetProcurementSpecialInvoiceItemsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<SpecialInvoiceItemList[]>> => {
  return Http.getRequest(
    getProcurementSpecialInvoiceItems.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementSpecialInvoiceItems.key = \\"/procurement/special-invoice-items/\\";

export const getProcurementSpecialInvoiceItemsPermissions = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getProcurementSpecialInvoiceItemsPermissions.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementSpecialInvoiceItemsPermissions.key =
  \\"/procurement/special-invoice-items/permissions/\\";

export const getProcurementSpecialInvoiceTypes = (
  queryParams?: GetProcurementSpecialInvoiceTypesQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<SpecialInvoiceType[]>> => {
  return Http.getRequest(
    getProcurementSpecialInvoiceTypes.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementSpecialInvoiceTypes.key = \\"/procurement/special-invoice-types/\\";

export const getProcurementSpecialInvoiceTypesId = (
  /** A UUID string identifying this special invoice type. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<SpecialInvoiceType>> => {
  return Http.getRequest(
    template(getProcurementSpecialInvoiceTypesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementSpecialInvoiceTypesId.key =
  \\"/procurement/special-invoice-types/{id}/\\";

export const getProcurementSpecialInvoices = (
  queryParams?: GetProcurementSpecialInvoicesQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedSpecialInvoiceListList>> => {
  return Http.getRequest(
    getProcurementSpecialInvoices.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementSpecialInvoices.key = \\"/procurement/special-invoices/\\";

export const getProcurementSpecialInvoicesCounter__slug = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<SpecialInvoice>> => {
  return Http.getRequest(
    template(getProcurementSpecialInvoicesCounter__slug.key, { counter__slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementSpecialInvoicesCounter__slug.key =
  \\"/procurement/special-invoices/{counter__slug}/\\";

export const getProcurementSpecialInvoicesCounter__slugApprovalHistory = (
  counter__slug: string,
  queryParams?: GetProcurementSpecialInvoicesCounter__slugApprovalHistoryQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedApprovalHistoryList>> => {
  return Http.getRequest(
    template(getProcurementSpecialInvoicesCounter__slugApprovalHistory.key, {
      counter__slug,
    }),
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementSpecialInvoicesCounter__slugApprovalHistory.key =
  \\"/procurement/special-invoices/{counter__slug}/approval-history/\\";

export const getProcurementSpecialInvoicesCounter__slugAttachments = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<SpecialInvoice>> => {
  return Http.getRequest(
    template(getProcurementSpecialInvoicesCounter__slugAttachments.key, {
      counter__slug,
    }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementSpecialInvoicesCounter__slugAttachments.key =
  \\"/procurement/special-invoices/{counter__slug}/attachments/\\";

export const getProcurementSpecialInvoicesCounter__slugHistory = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<SpecialInvoice>> => {
  return Http.getRequest(
    template(getProcurementSpecialInvoicesCounter__slugHistory.key, {
      counter__slug,
    }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementSpecialInvoicesCounter__slugHistory.key =
  \\"/procurement/special-invoices/{counter__slug}/history/\\";

export const getProcurementSpecialInvoicesPermissions = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getProcurementSpecialInvoicesPermissions.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementSpecialInvoicesPermissions.key =
  \\"/procurement/special-invoices/permissions/\\";

export const getProcurementSpecialInvoicesStates = (
  queryParams?: GetProcurementSpecialInvoicesStatesQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<State[]>> => {
  return Http.getRequest(
    getProcurementSpecialInvoicesStates.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProcurementSpecialInvoicesStates.key =
  \\"/procurement/special-invoices/states/\\";

export const getProfilesAvatar = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Avatar[]>> => {
  return Http.getRequest(
    getProfilesAvatar.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProfilesAvatar.key = \\"/profiles/avatar/\\";

export const getProfilesAvatarId = (
  /** A UUID string identifying this profile. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Avatar>> => {
  return Http.getRequest(
    template(getProfilesAvatarId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProfilesAvatarId.key = \\"/profiles/avatar/{id}/\\";

export const getProfilesUsers = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<UserProfile[]>> => {
  return Http.getRequest(
    getProfilesUsers.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProfilesUsers.key = \\"/profiles/users/\\";

export const getProjectsAccountingtypes = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<AccountingType[]>> => {
  return Http.getRequest(
    getProjectsAccountingtypes.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProjectsAccountingtypes.key = \\"/projects/accountingtypes/\\";

export const getProjectsAccountingtypesId = (
  /** A UUID string identifying this accounting type. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<AccountingType>> => {
  return Http.getRequest(
    template(getProjectsAccountingtypesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProjectsAccountingtypesId.key = \\"/projects/accountingtypes/{id}/\\";

export const getProjectsCities = (
  queryParams?: GetProjectsCitiesQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<City[]>> => {
  return Http.getRequest(
    getProjectsCities.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProjectsCities.key = \\"/projects/cities/\\";

export const getProjectsCitiesId = (
  /** A UUID string identifying this city. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<City>> => {
  return Http.getRequest(
    template(getProjectsCitiesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProjectsCitiesId.key = \\"/projects/cities/{id}/\\";

export const getProjectsCompanies = (
  queryParams?: GetProjectsCompaniesQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedCompanyList>> => {
  return Http.getRequest(
    getProjectsCompanies.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProjectsCompanies.key = \\"/projects/companies/\\";

export const getProjectsCompaniesAvailable = (
  queryParams?: GetProjectsCompaniesAvailableQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<CompanyAvailable[]>> => {
  return Http.getRequest(
    getProjectsCompaniesAvailable.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProjectsCompaniesAvailable.key = \\"/projects/companies/available/\\";

export const getProjectsCompaniesPermissions = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getProjectsCompaniesPermissions.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProjectsCompaniesPermissions.key = \\"/projects/companies/permissions/\\";

export const getProjectsCompaniesSlug = (
  slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Company>> => {
  return Http.getRequest(
    template(getProjectsCompaniesSlug.key, { slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProjectsCompaniesSlug.key = \\"/projects/companies/{slug}/\\";

export const getProjectsCompaniesSlugHistory = (
  slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Company>> => {
  return Http.getRequest(
    template(getProjectsCompaniesSlugHistory.key, { slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProjectsCompaniesSlugHistory.key = \\"/projects/companies/{slug}/history/\\";

export const getProjectsCountries = (
  queryParams?: GetProjectsCountriesQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Country[]>> => {
  return Http.getRequest(
    getProjectsCountries.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProjectsCountries.key = \\"/projects/countries/\\";

export const getProjectsCountriesId = (
  /** A UUID string identifying this country. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Country>> => {
  return Http.getRequest(
    template(getProjectsCountriesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProjectsCountriesId.key = \\"/projects/countries/{id}/\\";

export const getProjectsDistricts = (
  queryParams?: GetProjectsDistrictsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<District[]>> => {
  return Http.getRequest(
    getProjectsDistricts.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProjectsDistricts.key = \\"/projects/districts/\\";

export const getProjectsDistrictsId = (
  /** A UUID string identifying this district. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<District>> => {
  return Http.getRequest(
    template(getProjectsDistrictsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProjectsDistrictsId.key = \\"/projects/districts/{id}/\\";

export const getProjectsProjects = (
  queryParams?: GetProjectsProjectsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedProjectListList>> => {
  return Http.getRequest(
    getProjectsProjects.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProjectsProjects.key = \\"/projects/projects/\\";

export const getProjectsProjectsAvailable = (
  queryParams?: GetProjectsProjectsAvailableQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ProjectAvailable[]>> => {
  return Http.getRequest(
    getProjectsProjectsAvailable.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProjectsProjectsAvailable.key = \\"/projects/projects/available/\\";

export const getProjectsProjectsPermissions = (
  queryParams?: GetProjectsProjectsPermissionsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getProjectsProjectsPermissions.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProjectsProjectsPermissions.key = \\"/projects/projects/permissions/\\";

export const getProjectsProjectsSlug = (
  slug: string,
  queryParams?: GetProjectsProjectsSlugQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Project>> => {
  return Http.getRequest(
    template(getProjectsProjectsSlug.key, { slug }),
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProjectsProjectsSlug.key = \\"/projects/projects/{slug}/\\";

export const getProjectsProjectsSlugHistory = (
  slug: string,
  queryParams?: GetProjectsProjectsSlugHistoryQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Project>> => {
  return Http.getRequest(
    template(getProjectsProjectsSlugHistory.key, { slug }),
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProjectsProjectsSlugHistory.key = \\"/projects/projects/{slug}/history/\\";

export const getProjectsProjectsSlugResponsibilities = (
  slug: string,
  queryParams?: GetProjectsProjectsSlugResponsibilitiesQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Project>> => {
  return Http.getRequest(
    template(getProjectsProjectsSlugResponsibilities.key, { slug }),
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProjectsProjectsSlugResponsibilities.key =
  \\"/projects/projects/{slug}/responsibilities/\\";

export const getProjectsProjecttypes = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ProjectTypeParam[]>> => {
  return Http.getRequest(
    getProjectsProjecttypes.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProjectsProjecttypes.key = \\"/projects/projecttypes/\\";

export const getProjectsProjecttypesId = (
  /** A UUID string identifying this project type. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ProjectTypeParam>> => {
  return Http.getRequest(
    template(getProjectsProjecttypesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProjectsProjecttypesId.key = \\"/projects/projecttypes/{id}/\\";

export const getProjectsResponsibles = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Responsible[]>> => {
  return Http.getRequest(
    getProjectsResponsibles.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProjectsResponsibles.key = \\"/projects/responsibles/\\";

export const getProjectsResponsiblesId = (
  /** A UUID string identifying this responsible. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Responsible>> => {
  return Http.getRequest(
    template(getProjectsResponsiblesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProjectsResponsiblesId.key = \\"/projects/responsibles/{id}/\\";

export const getProjectsResponsibletypes = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ResponsibleTypeParam[]>> => {
  return Http.getRequest(
    getProjectsResponsibletypes.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProjectsResponsibletypes.key = \\"/projects/responsibletypes/\\";

export const getProjectsResponsibletypesId = (
  /** A UUID string identifying this responsible type. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ResponsibleTypeParam>> => {
  return Http.getRequest(
    template(getProjectsResponsibletypesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getProjectsResponsibletypesId.key = \\"/projects/responsibletypes/{id}/\\";

export const getRatesRates = (
  queryParams: GetRatesRatesQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Rate[]>> => {
  return Http.getRequest(
    getRatesRates.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getRatesRates.key = \\"/rates/rates/\\";

export const getRatesRatesId = (
  /** A unique integer value identifying this rate. */
  id: number,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Rate>> => {
  return Http.getRequest(
    template(getRatesRatesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getRatesRatesId.key = \\"/rates/rates/{id}/\\";

export const getSubcontractsContractCategories = (
  queryParams?: GetSubcontractsContractCategoriesQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ContractCategory[]>> => {
  return Http.getRequest(
    getSubcontractsContractCategories.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsContractCategories.key = \\"/subcontracts/contract-categories/\\";

export const getSubcontractsContractCategoriesId = (
  /** A UUID string identifying this contract category. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ContractCategory>> => {
  return Http.getRequest(
    template(getSubcontractsContractCategoriesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsContractCategoriesId.key =
  \\"/subcontracts/contract-categories/{id}/\\";

export const getSubcontractsContractCollateralReason = (
  queryParams?: GetSubcontractsContractCollateralReasonQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ContractCollateralReason[]>> => {
  return Http.getRequest(
    getSubcontractsContractCollateralReason.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsContractCollateralReason.key =
  \\"/subcontracts/contract-collateral-reason/\\";

export const getSubcontractsContractCollateralReasonId = (
  /** A UUID string identifying this contract collateral reason. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ContractCollateralReason>> => {
  return Http.getRequest(
    template(getSubcontractsContractCollateralReasonId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsContractCollateralReasonId.key =
  \\"/subcontracts/contract-collateral-reason/{id}/\\";

export const getSubcontractsContractCollateralStatus = (
  queryParams?: GetSubcontractsContractCollateralStatusQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ContractCollateralStatus[]>> => {
  return Http.getRequest(
    getSubcontractsContractCollateralStatus.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsContractCollateralStatus.key =
  \\"/subcontracts/contract-collateral-status/\\";

export const getSubcontractsContractCollateralStatusId = (
  /** A UUID string identifying this contract collateral status. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ContractCollateralStatus>> => {
  return Http.getRequest(
    template(getSubcontractsContractCollateralStatusId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsContractCollateralStatusId.key =
  \\"/subcontracts/contract-collateral-status/{id}/\\";

export const getSubcontractsContractCollateralTypes = (
  queryParams?: GetSubcontractsContractCollateralTypesQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ContractCollateralType[]>> => {
  return Http.getRequest(
    getSubcontractsContractCollateralTypes.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsContractCollateralTypes.key =
  \\"/subcontracts/contract-collateral-types/\\";

export const getSubcontractsContractCollateralTypesId = (
  /** A UUID string identifying this contract collateral type. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ContractCollateralType>> => {
  return Http.getRequest(
    template(getSubcontractsContractCollateralTypesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsContractCollateralTypesId.key =
  \\"/subcontracts/contract-collateral-types/{id}/\\";

export const getSubcontractsContractCollaterals = (
  queryParams?: GetSubcontractsContractCollateralsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedContractCollateralListList>> => {
  return Http.getRequest(
    getSubcontractsContractCollaterals.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsContractCollaterals.key = \\"/subcontracts/contract-collaterals/\\";

export const getSubcontractsContractCollateralsPermissions = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getSubcontractsContractCollateralsPermissions.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsContractCollateralsPermissions.key =
  \\"/subcontracts/contract-collaterals/permissions/\\";

export const getSubcontractsContracts = (
  queryParams?: GetSubcontractsContractsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedContractListList>> => {
  return Http.getRequest(
    getSubcontractsContracts.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsContracts.key = \\"/subcontracts/contracts/\\";

export const getSubcontractsContractsCounter__slug = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Contract>> => {
  return Http.getRequest(
    template(getSubcontractsContractsCounter__slug.key, { counter__slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsContractsCounter__slug.key =
  \\"/subcontracts/contracts/{counter__slug}/\\";

export const getSubcontractsContractsCounter__slugApprovalHistory = (
  counter__slug: string,
  queryParams?: GetSubcontractsContractsCounter__slugApprovalHistoryQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedApprovalHistoryList>> => {
  return Http.getRequest(
    template(getSubcontractsContractsCounter__slugApprovalHistory.key, {
      counter__slug,
    }),
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsContractsCounter__slugApprovalHistory.key =
  \\"/subcontracts/contracts/{counter__slug}/approval-history/\\";

export const getSubcontractsContractsCounter__slugAttachments = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Contract>> => {
  return Http.getRequest(
    template(getSubcontractsContractsCounter__slugAttachments.key, {
      counter__slug,
    }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsContractsCounter__slugAttachments.key =
  \\"/subcontracts/contracts/{counter__slug}/attachments/\\";

export const getSubcontractsContractsCounter__slugCopy_contract = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Contract>> => {
  return Http.getRequest(
    template(getSubcontractsContractsCounter__slugCopy_contract.key, {
      counter__slug,
    }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsContractsCounter__slugCopy_contract.key =
  \\"/subcontracts/contracts/{counter__slug}/copy_contract/\\";

export const getSubcontractsContractsCounter__slugCreate_progress = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Progress>> => {
  return Http.getRequest(
    template(getSubcontractsContractsCounter__slugCreate_progress.key, {
      counter__slug,
    }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsContractsCounter__slugCreate_progress.key =
  \\"/subcontracts/contracts/{counter__slug}/create_progress/\\";

export const getSubcontractsContractsCounter__slugDeductionReturnType = (
  counter__slug: string,
  type: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<DeductionReturn>> => {
  return Http.getRequest(
    template(getSubcontractsContractsCounter__slugDeductionReturnType.key, {
      counter__slug,
      type,
    }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsContractsCounter__slugDeductionReturnType.key =
  \\"/subcontracts/contracts/{counter__slug}/deduction-return/{type}/\\";

export const getSubcontractsContractsCounter__slugHistory = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Contract>> => {
  return Http.getRequest(
    template(getSubcontractsContractsCounter__slugHistory.key, {
      counter__slug,
    }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsContractsCounter__slugHistory.key =
  \\"/subcontracts/contracts/{counter__slug}/history/\\";

export const getSubcontractsContractsPermissions = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getSubcontractsContractsPermissions.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsContractsPermissions.key =
  \\"/subcontracts/contracts/permissions/\\";

export const getSubcontractsContractsStates = (
  queryParams?: GetSubcontractsContractsStatesQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<State[]>> => {
  return Http.getRequest(
    getSubcontractsContractsStates.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsContractsStates.key = \\"/subcontracts/contracts/states/\\";

export const getSubcontractsDeductionReturns = (
  queryParams?: GetSubcontractsDeductionReturnsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedDeductionReturnListList>> => {
  return Http.getRequest(
    getSubcontractsDeductionReturns.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsDeductionReturns.key = \\"/subcontracts/deduction-returns/\\";

export const getSubcontractsDeductionReturnsCounter__slug = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<DeductionReturn>> => {
  return Http.getRequest(
    template(getSubcontractsDeductionReturnsCounter__slug.key, {
      counter__slug,
    }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsDeductionReturnsCounter__slug.key =
  \\"/subcontracts/deduction-returns/{counter__slug}/\\";

export const getSubcontractsDeductionReturnsCounter__slugApprovalHistory = (
  counter__slug: string,
  queryParams?: GetSubcontractsDeductionReturnsCounter__slugApprovalHistoryQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedApprovalHistoryList>> => {
  return Http.getRequest(
    template(getSubcontractsDeductionReturnsCounter__slugApprovalHistory.key, {
      counter__slug,
    }),
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsDeductionReturnsCounter__slugApprovalHistory.key =
  \\"/subcontracts/deduction-returns/{counter__slug}/approval-history/\\";

export const getSubcontractsDeductionReturnsCounter__slugAttachments = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<DeductionReturn>> => {
  return Http.getRequest(
    template(getSubcontractsDeductionReturnsCounter__slugAttachments.key, {
      counter__slug,
    }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsDeductionReturnsCounter__slugAttachments.key =
  \\"/subcontracts/deduction-returns/{counter__slug}/attachments/\\";

export const getSubcontractsDeductionReturnsCounter__slugHistory = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<DeductionReturn>> => {
  return Http.getRequest(
    template(getSubcontractsDeductionReturnsCounter__slugHistory.key, {
      counter__slug,
    }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsDeductionReturnsCounter__slugHistory.key =
  \\"/subcontracts/deduction-returns/{counter__slug}/history/\\";

export const getSubcontractsDeductionReturnsPermissions = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getSubcontractsDeductionReturnsPermissions.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsDeductionReturnsPermissions.key =
  \\"/subcontracts/deduction-returns/permissions/\\";

export const getSubcontractsDeductionReturnsStates = (
  queryParams?: GetSubcontractsDeductionReturnsStatesQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<State[]>> => {
  return Http.getRequest(
    getSubcontractsDeductionReturnsStates.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsDeductionReturnsStates.key =
  \\"/subcontracts/deduction-returns/states/\\";

export const getSubcontractsProgressAdditionTypes = (
  queryParams?: GetSubcontractsProgressAdditionTypesQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ProgressAdditionType[]>> => {
  return Http.getRequest(
    getSubcontractsProgressAdditionTypes.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsProgressAdditionTypes.key =
  \\"/subcontracts/progress-addition-types/\\";

export const getSubcontractsProgressAdditionTypesSlug = (
  slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ProgressAdditionType>> => {
  return Http.getRequest(
    template(getSubcontractsProgressAdditionTypesSlug.key, { slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsProgressAdditionTypesSlug.key =
  \\"/subcontracts/progress-addition-types/{slug}/\\";

export const getSubcontractsProgressDeductionTypes = (
  queryParams?: GetSubcontractsProgressDeductionTypesQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ProgressDeductionType[]>> => {
  return Http.getRequest(
    getSubcontractsProgressDeductionTypes.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsProgressDeductionTypes.key =
  \\"/subcontracts/progress-deduction-types/\\";

export const getSubcontractsProgressDeductionTypesSlug = (
  slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ProgressDeductionType>> => {
  return Http.getRequest(
    template(getSubcontractsProgressDeductionTypesSlug.key, { slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsProgressDeductionTypesSlug.key =
  \\"/subcontracts/progress-deduction-types/{slug}/\\";

export const getSubcontractsProgressItems = (
  queryParams?: GetSubcontractsProgressItemsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ProgressItemList[]>> => {
  return Http.getRequest(
    getSubcontractsProgressItems.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsProgressItems.key = \\"/subcontracts/progress-items/\\";

export const getSubcontractsProgressItemsPermissions = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getSubcontractsProgressItemsPermissions.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsProgressItemsPermissions.key =
  \\"/subcontracts/progress-items/permissions/\\";

export const getSubcontractsProgresses = (
  queryParams?: GetSubcontractsProgressesQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedProgressListList>> => {
  return Http.getRequest(
    getSubcontractsProgresses.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsProgresses.key = \\"/subcontracts/progresses/\\";

export const getSubcontractsProgressesCounter__slug = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Progress>> => {
  return Http.getRequest(
    template(getSubcontractsProgressesCounter__slug.key, { counter__slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsProgressesCounter__slug.key =
  \\"/subcontracts/progresses/{counter__slug}/\\";

export const getSubcontractsProgressesCounter__slugApprovalHistory = (
  counter__slug: string,
  queryParams?: GetSubcontractsProgressesCounter__slugApprovalHistoryQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedApprovalHistoryList>> => {
  return Http.getRequest(
    template(getSubcontractsProgressesCounter__slugApprovalHistory.key, {
      counter__slug,
    }),
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsProgressesCounter__slugApprovalHistory.key =
  \\"/subcontracts/progresses/{counter__slug}/approval-history/\\";

export const getSubcontractsProgressesCounter__slugAttachments = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Progress>> => {
  return Http.getRequest(
    template(getSubcontractsProgressesCounter__slugAttachments.key, {
      counter__slug,
    }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsProgressesCounter__slugAttachments.key =
  \\"/subcontracts/progresses/{counter__slug}/attachments/\\";

export const getSubcontractsProgressesCounter__slugHistory = (
  counter__slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Progress>> => {
  return Http.getRequest(
    template(getSubcontractsProgressesCounter__slugHistory.key, {
      counter__slug,
    }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsProgressesCounter__slugHistory.key =
  \\"/subcontracts/progresses/{counter__slug}/history/\\";

export const getSubcontractsProgressesPermissions = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getSubcontractsProgressesPermissions.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsProgressesPermissions.key =
  \\"/subcontracts/progresses/permissions/\\";

export const getSubcontractsProgressesStates = (
  queryParams?: GetSubcontractsProgressesStatesQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<State[]>> => {
  return Http.getRequest(
    getSubcontractsProgressesStates.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsProgressesStates.key = \\"/subcontracts/progresses/states/\\";

export const getSubcontractsRevisions = (
  queryParams?: GetSubcontractsRevisionsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedRevisionList>> => {
  return Http.getRequest(
    getSubcontractsRevisions.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsRevisions.key = \\"/subcontracts/revisions/\\";

export const getSubcontractsRevisionsId = (
  /** A UUID string identifying this contract revision. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Revision>> => {
  return Http.getRequest(
    template(getSubcontractsRevisionsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsRevisionsId.key = \\"/subcontracts/revisions/{id}/\\";

export const getSubcontractsRevisionsPermissions = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getSubcontractsRevisionsPermissions.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSubcontractsRevisionsPermissions.key =
  \\"/subcontracts/revisions/permissions/\\";

export const getSuppliersAccountingCodes = (
  queryParams?: GetSuppliersAccountingCodesQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<SupplierAccountingCode[]>> => {
  return Http.getRequest(
    getSuppliersAccountingCodes.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSuppliersAccountingCodes.key = \\"/suppliers/accounting-codes/\\";

export const getSuppliersAccountingCodesId = (
  /** A UUID string identifying this supplier accounting code. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<SupplierAccountingCode>> => {
  return Http.getRequest(
    template(getSuppliersAccountingCodesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSuppliersAccountingCodesId.key = \\"/suppliers/accounting-codes/{id}/\\";

export const getSuppliersAdvanceBalancesSlug = (
  slug: string,
  queryParams: GetSuppliersAdvanceBalancesSlugQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<InvoiceAdvanceBalance>> => {
  return Http.getRequest(
    template(getSuppliersAdvanceBalancesSlug.key, { slug }),
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSuppliersAdvanceBalancesSlug.key = \\"/suppliers/advance-balances/{slug}/\\";

export const getSuppliersBankAccounts = (
  queryParams?: GetSuppliersBankAccountsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<SupplierBankAccount[]>> => {
  return Http.getRequest(
    getSuppliersBankAccounts.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSuppliersBankAccounts.key = \\"/suppliers/bank-accounts/\\";

export const getSuppliersBankAccountsId = (
  /** A UUID string identifying this supplier bank account. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<SupplierBankAccount>> => {
  return Http.getRequest(
    template(getSuppliersBankAccountsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSuppliersBankAccountsId.key = \\"/suppliers/bank-accounts/{id}/\\";

export const getSuppliersContacts = (
  queryParams?: GetSuppliersContactsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Contact[]>> => {
  return Http.getRequest(
    getSuppliersContacts.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSuppliersContacts.key = \\"/suppliers/contacts/\\";

export const getSuppliersContactsId = (
  /** A UUID string identifying this supplier contact. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Contact>> => {
  return Http.getRequest(
    template(getSuppliersContactsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSuppliersContactsId.key = \\"/suppliers/contacts/{id}/\\";

export const getSuppliersContactsPermissions = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getSuppliersContactsPermissions.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSuppliersContactsPermissions.key = \\"/suppliers/contacts/permissions/\\";

export const getSuppliersReviewAnswers = (
  queryParams?: GetSuppliersReviewAnswersQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Answer[]>> => {
  return Http.getRequest(
    getSuppliersReviewAnswers.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSuppliersReviewAnswers.key = \\"/suppliers/review-answers/\\";

export const getSuppliersReviewAnswersId = (
  /** A UUID string identifying this answer. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Answer>> => {
  return Http.getRequest(
    template(getSuppliersReviewAnswersId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSuppliersReviewAnswersId.key = \\"/suppliers/review-answers/{id}/\\";

export const getSuppliersReviewForms = (
  queryParams?: GetSuppliersReviewFormsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedReviewsListList>> => {
  return Http.getRequest(
    getSuppliersReviewForms.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSuppliersReviewForms.key = \\"/suppliers/review-forms/\\";

export const getSuppliersReviewFormsPermissions = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getSuppliersReviewFormsPermissions.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSuppliersReviewFormsPermissions.key = \\"/suppliers/review-forms/permissions/\\";

export const getSuppliersReviewFormsSlug = (
  slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Review>> => {
  return Http.getRequest(
    template(getSuppliersReviewFormsSlug.key, { slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSuppliersReviewFormsSlug.key = \\"/suppliers/review-forms/{slug}/\\";

export const getSuppliersReviewFormsSlugHistory = (
  slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Review>> => {
  return Http.getRequest(
    template(getSuppliersReviewFormsSlugHistory.key, { slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSuppliersReviewFormsSlugHistory.key =
  \\"/suppliers/review-forms/{slug}/history/\\";

export const getSuppliersReviewQuestions = (
  queryParams?: GetSuppliersReviewQuestionsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ReviewQuestion[]>> => {
  return Http.getRequest(
    getSuppliersReviewQuestions.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSuppliersReviewQuestions.key = \\"/suppliers/review-questions/\\";

export const getSuppliersReviewQuestionsId = (
  /** A UUID string identifying this review question. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ReviewQuestion>> => {
  return Http.getRequest(
    template(getSuppliersReviewQuestionsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSuppliersReviewQuestionsId.key = \\"/suppliers/review-questions/{id}/\\";

export const getSuppliersReviewTemplates = (
  queryParams?: GetSuppliersReviewTemplatesQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ReviewTemplateList[]>> => {
  return Http.getRequest(
    getSuppliersReviewTemplates.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSuppliersReviewTemplates.key = \\"/suppliers/review-templates/\\";

export const getSuppliersReviewTemplatesPermissions = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getSuppliersReviewTemplatesPermissions.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSuppliersReviewTemplatesPermissions.key =
  \\"/suppliers/review-templates/permissions/\\";

export const getSuppliersReviewTemplatesSlug = (
  slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ReviewTemplate>> => {
  return Http.getRequest(
    template(getSuppliersReviewTemplatesSlug.key, { slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSuppliersReviewTemplatesSlug.key = \\"/suppliers/review-templates/{slug}/\\";

export const getSuppliersReviewTemplatesSlugHistory = (
  slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ReviewTemplate>> => {
  return Http.getRequest(
    template(getSuppliersReviewTemplatesSlugHistory.key, { slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSuppliersReviewTemplatesSlugHistory.key =
  \\"/suppliers/review-templates/{slug}/history/\\";

export const getSuppliersSupplierActivityTypes = (
  queryParams?: GetSuppliersSupplierActivityTypesQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ActivityType[]>> => {
  return Http.getRequest(
    getSuppliersSupplierActivityTypes.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSuppliersSupplierActivityTypes.key = \\"/suppliers/supplier-activity-types/\\";

export const getSuppliersSupplierActivityTypesId = (
  /** A UUID string identifying this supplier activity type. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ActivityType>> => {
  return Http.getRequest(
    template(getSuppliersSupplierActivityTypesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSuppliersSupplierActivityTypesId.key =
  \\"/suppliers/supplier-activity-types/{id}/\\";

export const getSuppliersSupplierBranches = (
  queryParams?: GetSuppliersSupplierBranchesQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Branch[]>> => {
  return Http.getRequest(
    getSuppliersSupplierBranches.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSuppliersSupplierBranches.key = \\"/suppliers/supplier-branches/\\";

export const getSuppliersSupplierBranchesId = (
  /** A UUID string identifying this supplier branch. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Branch>> => {
  return Http.getRequest(
    template(getSuppliersSupplierBranchesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSuppliersSupplierBranchesId.key = \\"/suppliers/supplier-branches/{id}/\\";

export const getSuppliersSupplierTypes = (
  queryParams?: GetSuppliersSupplierTypesQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<SupplierType[]>> => {
  return Http.getRequest(
    getSuppliersSupplierTypes.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSuppliersSupplierTypes.key = \\"/suppliers/supplier-types/\\";

export const getSuppliersSupplierTypesId = (
  /** A UUID string identifying this supplier type. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<SupplierType>> => {
  return Http.getRequest(
    template(getSuppliersSupplierTypesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSuppliersSupplierTypesId.key = \\"/suppliers/supplier-types/{id}/\\";

export const getSuppliersSuppliers = (
  queryParams?: GetSuppliersSuppliersQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedSupplierList>> => {
  return Http.getRequest(
    getSuppliersSuppliers.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSuppliersSuppliers.key = \\"/suppliers/suppliers/\\";

export const getSuppliersSuppliersAutocomplete = (
  queryParams?: GetSuppliersSuppliersAutocompleteQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<SupplierAutocomplete[]>> => {
  return Http.getRequest(
    getSuppliersSuppliersAutocomplete.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSuppliersSuppliersAutocomplete.key = \\"/suppliers/suppliers/autocomplete/\\";

export const getSuppliersSuppliersPermissions = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getSuppliersSuppliersPermissions.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSuppliersSuppliersPermissions.key = \\"/suppliers/suppliers/permissions/\\";

export const getSuppliersSuppliersSlug = (
  slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Supplier>> => {
  return Http.getRequest(
    template(getSuppliersSuppliersSlug.key, { slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSuppliersSuppliersSlug.key = \\"/suppliers/suppliers/{slug}/\\";

export const getSuppliersSuppliersSlugHistory = (
  slug: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Supplier>> => {
  return Http.getRequest(
    template(getSuppliersSuppliersSlugHistory.key, { slug }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getSuppliersSuppliersSlugHistory.key = \\"/suppliers/suppliers/{slug}/history/\\";

export const getWarehouseProducts = (
  queryParams: GetWarehouseProductsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedProductListList>> => {
  return Http.getRequest(
    getWarehouseProducts.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getWarehouseProducts.key = \\"/warehouse/products/\\";

export const getWarehouseProductsId = (
  /** A UUID string identifying this product. */
  id: string,
  queryParams: GetWarehouseProductsIdQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Product>> => {
  return Http.getRequest(
    template(getWarehouseProductsId.key, { id }),
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getWarehouseProductsId.key = \\"/warehouse/products/{id}/\\";

export const getWarehouseProductsIdAttachments = (
  /** A UUID string identifying this product. */
  id: string,
  queryParams: GetWarehouseProductsIdAttachmentsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Product>> => {
  return Http.getRequest(
    template(getWarehouseProductsIdAttachments.key, { id }),
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getWarehouseProductsIdAttachments.key = \\"/warehouse/products/{id}/attachments/\\";

export const getWarehouseProductsIdHistory = (
  /** A UUID string identifying this product. */
  id: string,
  queryParams: GetWarehouseProductsIdHistoryQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Product>> => {
  return Http.getRequest(
    template(getWarehouseProductsIdHistory.key, { id }),
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getWarehouseProductsIdHistory.key = \\"/warehouse/products/{id}/history/\\";

export const getWarehouseProductsIdTransactions = (
  /** A UUID string identifying this transaction. */
  id: string,
  queryParams: GetWarehouseProductsIdTransactionsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedTransactionListList>> => {
  return Http.getRequest(
    template(getWarehouseProductsIdTransactions.key, { id }),
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getWarehouseProductsIdTransactions.key =
  \\"/warehouse/products/{id}/transactions/\\";

export const getWarehouseProductsPermissions = (
  queryParams: GetWarehouseProductsPermissionsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getWarehouseProductsPermissions.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getWarehouseProductsPermissions.key = \\"/warehouse/products/permissions/\\";

export const getWarehouseTransactions = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<TransactionList[]>> => {
  return Http.getRequest(
    getWarehouseTransactions.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getWarehouseTransactions.key = \\"/warehouse/transactions/\\";

export const getWarehouseTransactionsId = (
  /** A UUID string identifying this transaction. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<TransactionList>> => {
  return Http.getRequest(
    template(getWarehouseTransactionsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getWarehouseTransactionsId.key = \\"/warehouse/transactions/{id}/\\";

export const getWarehouseTransactionsPermissions = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getWarehouseTransactionsPermissions.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getWarehouseTransactionsPermissions.key =
  \\"/warehouse/transactions/permissions/\\";

export const getWarehouseWarehouses = (
  queryParams?: GetWarehouseWarehousesQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedWarehouseList>> => {
  return Http.getRequest(
    getWarehouseWarehouses.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getWarehouseWarehouses.key = \\"/warehouse/warehouses/\\";

export const getWarehouseWarehousesAvailable = (
  queryParams?: GetWarehouseWarehousesAvailableQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Warehouse[]>> => {
  return Http.getRequest(
    getWarehouseWarehousesAvailable.key,
    queryParams,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getWarehouseWarehousesAvailable.key = \\"/warehouse/warehouses/available/\\";

export const getWarehouseWarehousesId = (
  /** A UUID string identifying this warehouse. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Warehouse>> => {
  return Http.getRequest(
    template(getWarehouseWarehousesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getWarehouseWarehousesId.key = \\"/warehouse/warehouses/{id}/\\";

export const getWarehouseWarehousesIdHistory = (
  /** A UUID string identifying this warehouse. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Warehouse>> => {
  return Http.getRequest(
    template(getWarehouseWarehousesIdHistory.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getWarehouseWarehousesIdHistory.key = \\"/warehouse/warehouses/{id}/history/\\";

export const getWarehouseWarehousesPermissions = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Permissions>> => {
  return Http.getRequest(
    getWarehouseWarehousesPermissions.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
getWarehouseWarehousesPermissions.key = \\"/warehouse/warehouses/permissions/\\";

export const patchAuthGroupsId = (
  /** A unique integer value identifying this group. */
  id: number,
  requestBody: PatchedGroupMemberRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<GroupMember>> => {
  return Http.patchRequest(
    template(patchAuthGroupsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchAuthGroupsId.key = \\"/auth/groups/{id}/\\";

export const patchAuthUser = (
  requestBody: PatchedCustomUserDetailsRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<CustomUserDetails>> => {
  return Http.patchRequest(
    patchAuthUser.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchAuthUser.key = \\"/auth/user/\\";

export const patchAuthUserGroupsId = (
  /** A unique integer value identifying this user. */
  id: number,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<UserGroup>> => {
  return Http.patchRequest(
    template(patchAuthUserGroupsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchAuthUserGroupsId.key = \\"/auth/user/groups/{id}/\\";

export const patchCodesActivitiesId = (
  /** A UUID string identifying this Activity. */
  id: string,
  requestBody: PatchedActivityRequest,
  queryParams?: PatchCodesActivitiesIdQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Activity>> => {
  return Http.patchRequest(
    template(patchCodesActivitiesId.key, { id }),
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchCodesActivitiesId.key = \\"/codes/activities/{id}/\\";

export const patchCodesActivityAccountCodesId = (
  /** A UUID string identifying this accounting code. */
  id: string,
  requestBody: PatchedSupplierAccountingCodeRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<SupplierAccountingCode>> => {
  return Http.patchRequest(
    template(patchCodesActivityAccountCodesId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchCodesActivityAccountCodesId.key = \\"/codes/activity-account-codes/{id}/\\";

export const patchCodesResourcesId = (
  /** A UUID string identifying this Resource. */
  id: string,
  requestBody: PatchedResourceRequest,
  queryParams?: PatchCodesResourcesIdQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Resource>> => {
  return Http.patchRequest(
    template(patchCodesResourcesId.key, { id }),
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchCodesResourcesId.key = \\"/codes/resources/{id}/\\";

export const patchCodesWbsId = (
  /** A UUID string identifying this WBS. */
  id: string,
  requestBody: PatchedWBSRequest,
  queryParams?: PatchCodesWbsIdQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<WBS>> => {
  return Http.patchRequest(
    template(patchCodesWbsId.key, { id }),
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchCodesWbsId.key = \\"/codes/wbs/{id}/\\";

export const patchCommonBankNamesId = (
  /** A UUID string identifying this Bank Name. */
  id: string,
  requestBody: PatchedBankNameRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<BankName>> => {
  return Http.patchRequest(
    template(patchCommonBankNamesId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchCommonBankNamesId.key = \\"/common/bank-names/{id}/\\";

export const patchCommonCurrenciesId = (
  /** A UUID string identifying this Currency. */
  id: string,
  requestBody: PatchedCurrencyRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Currency>> => {
  return Http.patchRequest(
    template(patchCommonCurrenciesId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchCommonCurrenciesId.key = \\"/common/currencies/{id}/\\";

export const patchCommonPackagingMethodsId = (
  /** A UUID string identifying this Packaging Method. */
  id: string,
  requestBody: PatchedPackagingMethodRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PackagingMethod>> => {
  return Http.patchRequest(
    template(patchCommonPackagingMethodsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchCommonPackagingMethodsId.key = \\"/common/packaging-methods/{id}/\\";

export const patchCommonPaymentMethodsId = (
  /** A UUID string identifying this Payment Method. */
  id: string,
  requestBody: PatchedPaymentMethodRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaymentMethod>> => {
  return Http.patchRequest(
    template(patchCommonPaymentMethodsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchCommonPaymentMethodsId.key = \\"/common/payment-methods/{id}/\\";

export const patchCommonResourceUnitsId = (
  /** A UUID string identifying this Resource Unit. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ResourceUnit>> => {
  return Http.patchRequest(
    template(patchCommonResourceUnitsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchCommonResourceUnitsId.key = \\"/common/resource-units/{id}/\\";

export const patchCommonTaxParametersId = (
  /** A UUID string identifying this Tax Parameter. */
  id: string,
  requestBody: PatchedTaxParameterRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<TaxParameter>> => {
  return Http.patchRequest(
    template(patchCommonTaxParametersId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchCommonTaxParametersId.key = \\"/common/tax-parameters/{id}/\\";

export const patchCommonVatWitholdingsId = (
  /** A UUID string identifying this Vat Witholding. */
  id: string,
  requestBody: PatchedVatwitholdingRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Vatwitholding>> => {
  return Http.patchRequest(
    template(patchCommonVatWitholdingsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchCommonVatWitholdingsId.key = \\"/common/vat-witholdings/{id}/\\";

export const patchFinanceAccountsId = (
  /** A UUID string identifying this account. */
  id: string,
  requestBody: PatchedAccountRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Account>> => {
  return Http.patchRequest(
    template(patchFinanceAccountsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchFinanceAccountsId.key = \\"/finance/accounts/{id}/\\";

export const patchFinanceBankAccountsId = (
  /** A UUID string identifying this bank account. */
  id: string,
  requestBody: PatchedBankAccountRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<BankAccount>> => {
  return Http.patchRequest(
    template(patchFinanceBankAccountsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchFinanceBankAccountsId.key = \\"/finance/bank-accounts/{id}/\\";

export const patchFinanceCashAccountsId = (
  /** A UUID string identifying this cash account. */
  id: string,
  requestBody: PatchedCashAccountRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<CashAccount>> => {
  return Http.patchRequest(
    template(patchFinanceCashAccountsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchFinanceCashAccountsId.key = \\"/finance/cash-accounts/{id}/\\";

export const patchFinanceExpensesCounter__slug = (
  counter__slug: string,
  requestBody: PatchedExpenseRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Expense>> => {
  return Http.patchRequest(
    template(patchFinanceExpensesCounter__slug.key, { counter__slug }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchFinanceExpensesCounter__slug.key = \\"/finance/expenses/{counter__slug}/\\";

export const patchFinanceIncomeInvoiceCategoriesId = (
  /** A UUID string identifying this income invoice category. */
  id: string,
  requestBody: PatchedIncomeInvoiceCategoryRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<IncomeInvoiceCategory>> => {
  return Http.patchRequest(
    template(patchFinanceIncomeInvoiceCategoriesId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchFinanceIncomeInvoiceCategoriesId.key =
  \\"/finance/income-invoice-categories/{id}/\\";

export const patchFinanceIncomeInvoicesCounter__slug = (
  counter__slug: string,
  requestBody: PatchedIncomeInvoiceRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<IncomeInvoice>> => {
  return Http.patchRequest(
    template(patchFinanceIncomeInvoicesCounter__slug.key, { counter__slug }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchFinanceIncomeInvoicesCounter__slug.key =
  \\"/finance/income-invoices/{counter__slug}/\\";

export const patchFinancePaymentBondsCounter__slug = (
  counter__slug: string,
  requestBody: PatchedPaymentBondRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaymentBond>> => {
  return Http.patchRequest(
    template(patchFinancePaymentBondsCounter__slug.key, { counter__slug }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchFinancePaymentBondsCounter__slug.key =
  \\"/finance/payment-bonds/{counter__slug}/\\";

export const patchFinancePaymentChequesCounter__slug = (
  counter__slug: string,
  requestBody: PatchedPaymentChequeRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaymentCheque>> => {
  return Http.patchRequest(
    template(patchFinancePaymentChequesCounter__slug.key, { counter__slug }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchFinancePaymentChequesCounter__slug.key =
  \\"/finance/payment-cheques/{counter__slug}/\\";

export const patchFinancePaymentDetailsId = (
  /** A UUID string identifying this Payment Detail. */
  id: string,
  requestBody: PatchedPaymentDetailRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaymentDetail>> => {
  return Http.patchRequest(
    template(patchFinancePaymentDetailsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchFinancePaymentDetailsId.key = \\"/finance/payment-details/{id}/\\";

export const patchFinanceRevenueBondsCounter__slug = (
  counter__slug: string,
  requestBody: PatchedRevenueBondRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<RevenueBond>> => {
  return Http.patchRequest(
    template(patchFinanceRevenueBondsCounter__slug.key, { counter__slug }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchFinanceRevenueBondsCounter__slug.key =
  \\"/finance/revenue-bonds/{counter__slug}/\\";

export const patchFinanceRevenueChequesCounter__slug = (
  counter__slug: string,
  requestBody: PatchedRevenueChequeRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<RevenueCheque>> => {
  return Http.patchRequest(
    template(patchFinanceRevenueChequesCounter__slug.key, { counter__slug }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchFinanceRevenueChequesCounter__slug.key =
  \\"/finance/revenue-cheques/{counter__slug}/\\";

export const patchFinanceRevenueDetailsId = (
  /** A UUID string identifying this Revenue Detail. */
  id: string,
  requestBody: PatchedRevenueDetailRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<RevenueDetail>> => {
  return Http.patchRequest(
    template(patchFinanceRevenueDetailsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchFinanceRevenueDetailsId.key = \\"/finance/revenue-details/{id}/\\";

export const patchFinanceSlipsId = (
  /** A UUID string identifying this slip. */
  id: string,
  requestBody: PatchedSlipRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Slip>> => {
  return Http.patchRequest(
    template(patchFinanceSlipsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchFinanceSlipsId.key = \\"/finance/slips/{id}/\\";

export const patchFinanceSupplierAccountsId = (
  /** A UUID string identifying this supplier account. */
  id: string,
  requestBody: PatchedSupplierAccountRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<SupplierAccount>> => {
  return Http.patchRequest(
    template(patchFinanceSupplierAccountsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchFinanceSupplierAccountsId.key = \\"/finance/supplier-accounts/{id}/\\";

export const patchFinanceTxnsId = (
  /** A UUID string identifying this transaction. */
  id: string,
  requestBody: PatchedTransactionRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Transaction>> => {
  return Http.patchRequest(
    template(patchFinanceTxnsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchFinanceTxnsId.key = \\"/finance/txns/{id}/\\";

export const patchHrCrewsId = (
  /** A UUID string identifying this Crew. */
  id: string,
  requestBody: PatchedCrewRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Crew>> => {
  return Http.patchRequest(
    template(patchHrCrewsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchHrCrewsId.key = \\"/hr/crews/{id}/\\";

export const patchHrDepartmentsId = (
  /** A UUID string identifying this Main Department. */
  id: string,
  requestBody: PatchedMainDepartmentRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<MainDepartment>> => {
  return Http.patchRequest(
    template(patchHrDepartmentsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchHrDepartmentsId.key = \\"/hr/departments/{id}/\\";

export const patchHrLocationsId = (
  /** A UUID string identifying this Location. */
  id: string,
  requestBody: PatchedLocationParameterRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<LocationParameter>> => {
  return Http.patchRequest(
    template(patchHrLocationsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchHrLocationsId.key = \\"/hr/locations/{id}/\\";

export const patchHrPersonnelId = (
  /** A UUID string identifying this Person. */
  id: string,
  requestBody: PatchedPersonRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Person>> => {
  return Http.patchRequest(
    template(patchHrPersonnelId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchHrPersonnelId.key = \\"/hr/personnel/{id}/\\";

export const patchHrPositionsId = (
  /** A UUID string identifying this Main Position. */
  id: string,
  requestBody: PatchedMainPositionRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<MainPosition>> => {
  return Http.patchRequest(
    template(patchHrPositionsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchHrPositionsId.key = \\"/hr/positions/{id}/\\";

export const patchHrProfessionsId = (
  /** A UUID string identifying this Profession. */
  id: string,
  requestBody: PatchedProfessionRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Profession>> => {
  return Http.patchRequest(
    template(patchHrProfessionsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchHrProfessionsId.key = \\"/hr/professions/{id}/\\";

export const patchHrQuitReasonsId = (
  /** A UUID string identifying this Quit Reason. */
  id: string,
  requestBody: PatchedQuitReasonRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<QuitReason>> => {
  return Http.patchRequest(
    template(patchHrQuitReasonsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchHrQuitReasonsId.key = \\"/hr/quit-reasons-/{id}/\\";

export const patchHrQuitRecordsId = (
  /** A UUID string identifying this Quit Record. */
  id: string,
  requestBody: PatchedQuitRecordRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<QuitRecord>> => {
  return Http.patchRequest(
    template(patchHrQuitRecordsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchHrQuitRecordsId.key = \\"/hr/quit-records/{id}/\\";

export const patchHrSalariesId = (
  /** A UUID string identifying this Salary. */
  id: string,
  requestBody: PatchedSalaryRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Salary>> => {
  return Http.patchRequest(
    template(patchHrSalariesId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchHrSalariesId.key = \\"/hr/salaries/{id}/\\";

export const patchHrSalaryPermissionsId = (
  /** A unique integer value identifying this Project Salary Permission. */
  id: number,
  requestBody: PatchedProjectSalaryPermissionRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ProjectSalaryPermission>> => {
  return Http.patchRequest(
    template(patchHrSalaryPermissionsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchHrSalaryPermissionsId.key = \\"/hr/salary-permissions/{id}/\\";

export const patchProcurementAdvancePaymentsId = (
  /** A UUID string identifying this order advance payment. */
  id: string,
  requestBody: PatchedOrderAdvancePaymentRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<OrderAdvancePayment>> => {
  return Http.patchRequest(
    template(patchProcurementAdvancePaymentsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchProcurementAdvancePaymentsId.key = \\"/procurement/advance-payments/{id}/\\";

export const patchProcurementInvoicesCounter__slug = (
  counter__slug: string,
  requestBody: PatchedInvoiceRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Invoice>> => {
  return Http.patchRequest(
    template(patchProcurementInvoicesCounter__slug.key, { counter__slug }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchProcurementInvoicesCounter__slug.key =
  \\"/procurement/invoices/{counter__slug}/\\";

export const patchProcurementOrdersCounter__slug = (
  counter__slug: string,
  requestBody: PatchedOrderRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Order>> => {
  return Http.patchRequest(
    template(patchProcurementOrdersCounter__slug.key, { counter__slug }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchProcurementOrdersCounter__slug.key =
  \\"/procurement/orders/{counter__slug}/\\";

export const patchProcurementRequestTypesId = (
  /** A UUID string identifying this request type. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<RequestType>> => {
  return Http.patchRequest(
    template(patchProcurementRequestTypesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchProcurementRequestTypesId.key = \\"/procurement/request-types/{id}/\\";

export const patchProcurementRequestsCounter__slug = (
  counter__slug: string,
  requestBody: PatchedRequestRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Request>> => {
  return Http.patchRequest(
    template(patchProcurementRequestsCounter__slug.key, { counter__slug }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchProcurementRequestsCounter__slug.key =
  \\"/procurement/requests/{counter__slug}/\\";

export const patchProcurementSpecialInvoiceTypesId = (
  /** A UUID string identifying this special invoice type. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<SpecialInvoiceType>> => {
  return Http.patchRequest(
    template(patchProcurementSpecialInvoiceTypesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchProcurementSpecialInvoiceTypesId.key =
  \\"/procurement/special-invoice-types/{id}/\\";

export const patchProcurementSpecialInvoicesCounter__slug = (
  counter__slug: string,
  requestBody: PatchedSpecialInvoiceRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<SpecialInvoice>> => {
  return Http.patchRequest(
    template(patchProcurementSpecialInvoicesCounter__slug.key, {
      counter__slug,
    }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchProcurementSpecialInvoicesCounter__slug.key =
  \\"/procurement/special-invoices/{counter__slug}/\\";

export const patchProjectsAccountingtypesId = (
  /** A UUID string identifying this accounting type. */
  id: string,
  requestBody: PatchedAccountingTypeRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<AccountingType>> => {
  return Http.patchRequest(
    template(patchProjectsAccountingtypesId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchProjectsAccountingtypesId.key = \\"/projects/accountingtypes/{id}/\\";

export const patchProjectsCitiesId = (
  /** A UUID string identifying this city. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<City>> => {
  return Http.patchRequest(
    template(patchProjectsCitiesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchProjectsCitiesId.key = \\"/projects/cities/{id}/\\";

export const patchProjectsCompaniesSlug = (
  slug: string,
  requestBody: PatchedCompanyRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Company>> => {
  return Http.patchRequest(
    template(patchProjectsCompaniesSlug.key, { slug }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchProjectsCompaniesSlug.key = \\"/projects/companies/{slug}/\\";

export const patchProjectsCountriesId = (
  /** A UUID string identifying this country. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Country>> => {
  return Http.patchRequest(
    template(patchProjectsCountriesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchProjectsCountriesId.key = \\"/projects/countries/{id}/\\";

export const patchProjectsDistrictsId = (
  /** A UUID string identifying this district. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<District>> => {
  return Http.patchRequest(
    template(patchProjectsDistrictsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchProjectsDistrictsId.key = \\"/projects/districts/{id}/\\";

export const patchProjectsProjectsSlug = (
  slug: string,
  requestBody: PatchedProjectRequest,
  queryParams?: PatchProjectsProjectsSlugQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Project>> => {
  return Http.patchRequest(
    template(patchProjectsProjectsSlug.key, { slug }),
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchProjectsProjectsSlug.key = \\"/projects/projects/{slug}/\\";

export const patchProjectsProjecttypesId = (
  /** A UUID string identifying this project type. */
  id: string,
  requestBody: PatchedProjectTypeParamRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ProjectTypeParam>> => {
  return Http.patchRequest(
    template(patchProjectsProjecttypesId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchProjectsProjecttypesId.key = \\"/projects/projecttypes/{id}/\\";

export const patchProjectsResponsiblesId = (
  /** A UUID string identifying this responsible. */
  id: string,
  requestBody: PatchedResponsibleRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Responsible>> => {
  return Http.patchRequest(
    template(patchProjectsResponsiblesId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchProjectsResponsiblesId.key = \\"/projects/responsibles/{id}/\\";

export const patchProjectsResponsibletypesId = (
  /** A UUID string identifying this responsible type. */
  id: string,
  requestBody: PatchedResponsibleTypeParamRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ResponsibleTypeParam>> => {
  return Http.patchRequest(
    template(patchProjectsResponsibletypesId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchProjectsResponsibletypesId.key = \\"/projects/responsibletypes/{id}/\\";

export const patchRatesRatesId = (
  /** A unique integer value identifying this rate. */
  id: number,
  requestBody: PatchedRateRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Rate>> => {
  return Http.patchRequest(
    template(patchRatesRatesId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchRatesRatesId.key = \\"/rates/rates/{id}/\\";

export const patchSubcontractsContractCategoriesId = (
  /** A UUID string identifying this contract category. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ContractCategory>> => {
  return Http.patchRequest(
    template(patchSubcontractsContractCategoriesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchSubcontractsContractCategoriesId.key =
  \\"/subcontracts/contract-categories/{id}/\\";

export const patchSubcontractsContractCollateralReasonId = (
  /** A UUID string identifying this contract collateral reason. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ContractCollateralReason>> => {
  return Http.patchRequest(
    template(patchSubcontractsContractCollateralReasonId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchSubcontractsContractCollateralReasonId.key =
  \\"/subcontracts/contract-collateral-reason/{id}/\\";

export const patchSubcontractsContractCollateralStatusId = (
  /** A UUID string identifying this contract collateral status. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ContractCollateralStatus>> => {
  return Http.patchRequest(
    template(patchSubcontractsContractCollateralStatusId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchSubcontractsContractCollateralStatusId.key =
  \\"/subcontracts/contract-collateral-status/{id}/\\";

export const patchSubcontractsContractCollateralTypesId = (
  /** A UUID string identifying this contract collateral type. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ContractCollateralType>> => {
  return Http.patchRequest(
    template(patchSubcontractsContractCollateralTypesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchSubcontractsContractCollateralTypesId.key =
  \\"/subcontracts/contract-collateral-types/{id}/\\";

export const patchSubcontractsContractsCounter__slug = (
  counter__slug: string,
  requestBody: PatchedContractRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Contract>> => {
  return Http.patchRequest(
    template(patchSubcontractsContractsCounter__slug.key, { counter__slug }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchSubcontractsContractsCounter__slug.key =
  \\"/subcontracts/contracts/{counter__slug}/\\";

export const patchSubcontractsDeductionReturnsCounter__slug = (
  counter__slug: string,
  requestBody: PatchedDeductionReturnRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<DeductionReturn>> => {
  return Http.patchRequest(
    template(patchSubcontractsDeductionReturnsCounter__slug.key, {
      counter__slug,
    }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchSubcontractsDeductionReturnsCounter__slug.key =
  \\"/subcontracts/deduction-returns/{counter__slug}/\\";

export const patchSubcontractsProgressesCounter__slug = (
  counter__slug: string,
  requestBody: PatchedProgressRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Progress>> => {
  return Http.patchRequest(
    template(patchSubcontractsProgressesCounter__slug.key, { counter__slug }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchSubcontractsProgressesCounter__slug.key =
  \\"/subcontracts/progresses/{counter__slug}/\\";

export const patchSubcontractsRevisionsId = (
  /** A UUID string identifying this contract revision. */
  id: string,
  requestBody: PatchedRevisionRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Revision>> => {
  return Http.patchRequest(
    template(patchSubcontractsRevisionsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchSubcontractsRevisionsId.key = \\"/subcontracts/revisions/{id}/\\";

export const patchSuppliersAccountingCodesId = (
  /** A UUID string identifying this supplier accounting code. */
  id: string,
  requestBody: PatchedSupplierAccountingCodeRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<SupplierAccountingCode>> => {
  return Http.patchRequest(
    template(patchSuppliersAccountingCodesId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchSuppliersAccountingCodesId.key = \\"/suppliers/accounting-codes/{id}/\\";

export const patchSuppliersBankAccountsId = (
  /** A UUID string identifying this supplier bank account. */
  id: string,
  requestBody: PatchedSupplierBankAccountRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<SupplierBankAccount>> => {
  return Http.patchRequest(
    template(patchSuppliersBankAccountsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchSuppliersBankAccountsId.key = \\"/suppliers/bank-accounts/{id}/\\";

export const patchSuppliersContactsId = (
  /** A UUID string identifying this supplier contact. */
  id: string,
  requestBody: PatchedContactRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Contact>> => {
  return Http.patchRequest(
    template(patchSuppliersContactsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchSuppliersContactsId.key = \\"/suppliers/contacts/{id}/\\";

export const patchSuppliersReviewAnswersId = (
  /** A UUID string identifying this answer. */
  id: string,
  requestBody: PatchedAnswerRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Answer>> => {
  return Http.patchRequest(
    template(patchSuppliersReviewAnswersId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchSuppliersReviewAnswersId.key = \\"/suppliers/review-answers/{id}/\\";

export const patchSuppliersReviewFormsSlug = (
  slug: string,
  requestBody: PatchedReviewRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Review>> => {
  return Http.patchRequest(
    template(patchSuppliersReviewFormsSlug.key, { slug }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchSuppliersReviewFormsSlug.key = \\"/suppliers/review-forms/{slug}/\\";

export const patchSuppliersReviewQuestionsId = (
  /** A UUID string identifying this review question. */
  id: string,
  requestBody: PatchedReviewQuestionRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ReviewQuestion>> => {
  return Http.patchRequest(
    template(patchSuppliersReviewQuestionsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchSuppliersReviewQuestionsId.key = \\"/suppliers/review-questions/{id}/\\";

export const patchSuppliersReviewTemplatesSlug = (
  slug: string,
  requestBody: PatchedReviewTemplateRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ReviewTemplate>> => {
  return Http.patchRequest(
    template(patchSuppliersReviewTemplatesSlug.key, { slug }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchSuppliersReviewTemplatesSlug.key = \\"/suppliers/review-templates/{slug}/\\";

export const patchSuppliersSupplierActivityTypesId = (
  /** A UUID string identifying this supplier activity type. */
  id: string,
  requestBody: PatchedActivityTypeRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ActivityType>> => {
  return Http.patchRequest(
    template(patchSuppliersSupplierActivityTypesId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchSuppliersSupplierActivityTypesId.key =
  \\"/suppliers/supplier-activity-types/{id}/\\";

export const patchSuppliersSupplierBranchesId = (
  /** A UUID string identifying this supplier branch. */
  id: string,
  requestBody: PatchedBranchRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Branch>> => {
  return Http.patchRequest(
    template(patchSuppliersSupplierBranchesId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchSuppliersSupplierBranchesId.key = \\"/suppliers/supplier-branches/{id}/\\";

export const patchSuppliersSupplierTypesId = (
  /** A UUID string identifying this supplier type. */
  id: string,
  requestBody: PatchedSupplierTypeRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<SupplierType>> => {
  return Http.patchRequest(
    template(patchSuppliersSupplierTypesId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchSuppliersSupplierTypesId.key = \\"/suppliers/supplier-types/{id}/\\";

export const patchSuppliersSuppliersSlug = (
  slug: string,
  requestBody: PatchedSupplierRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Supplier>> => {
  return Http.patchRequest(
    template(patchSuppliersSuppliersSlug.key, { slug }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchSuppliersSuppliersSlug.key = \\"/suppliers/suppliers/{slug}/\\";

export const patchWarehouseProductsId = (
  /** A UUID string identifying this product. */
  id: string,
  requestBody: PatchedProductCreateRequest,
  queryParams: PatchWarehouseProductsIdQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Product>> => {
  return Http.patchRequest(
    template(patchWarehouseProductsId.key, { id }),
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchWarehouseProductsId.key = \\"/warehouse/products/{id}/\\";

export const patchWarehouseTransactionsId = (
  /** A UUID string identifying this transaction. */
  id: string,
  requestBody: PatchedTransactionListCreateRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<TransactionList>> => {
  return Http.patchRequest(
    template(patchWarehouseTransactionsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchWarehouseTransactionsId.key = \\"/warehouse/transactions/{id}/\\";

export const patchWarehouseWarehousesId = (
  /** A UUID string identifying this warehouse. */
  id: string,
  requestBody: PatchedWarehouseRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Warehouse>> => {
  return Http.patchRequest(
    template(patchWarehouseWarehousesId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
patchWarehouseWarehousesId.key = \\"/warehouse/warehouses/{id}/\\";

export const postAuthGroups = (
  requestBody: GroupMemberRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postAuthGroups.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postAuthGroups.key = \\"/auth/groups/\\";

export const postAuthUserGroups = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postAuthUserGroups.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postAuthUserGroups.key = \\"/auth/user/groups/\\";

export const postCodesActivitiesAdd_root = (
  requestBody: ActivityRequest,
  queryParams?: PostCodesActivitiesAdd_rootQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Activity>> => {
  return Http.postRequest(
    postCodesActivitiesAdd_root.key,
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postCodesActivitiesAdd_root.key = \\"/codes/activities/add_root/\\";

export const postCodesActivitiesIdAdd_child = (
  /** A UUID string identifying this Activity. */
  id: string,
  requestBody: ActivityRequest,
  queryParams?: PostCodesActivitiesIdAdd_childQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Activity>> => {
  return Http.postRequest(
    template(postCodesActivitiesIdAdd_child.key, { id }),
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postCodesActivitiesIdAdd_child.key = \\"/codes/activities/{id}/add_child/\\";

export const postCodesActivitiesIdAdd_sibling = (
  /** A UUID string identifying this Activity. */
  id: string,
  requestBody: ActivityRequest,
  queryParams?: PostCodesActivitiesIdAdd_siblingQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Activity>> => {
  return Http.postRequest(
    template(postCodesActivitiesIdAdd_sibling.key, { id }),
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postCodesActivitiesIdAdd_sibling.key = \\"/codes/activities/{id}/add_sibling/\\";

export const postCodesActivitiesIdMove_under = (
  /** A UUID string identifying this Activity. */
  id: string,
  requestBody: ActivityRequest,
  queryParams?: PostCodesActivitiesIdMove_underQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Activity>> => {
  return Http.postRequest(
    template(postCodesActivitiesIdMove_under.key, { id }),
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postCodesActivitiesIdMove_under.key = \\"/codes/activities/{id}/move_under/\\";

export const postCodesActivityAccountCodes = (
  requestBody: SupplierAccountingCodeRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postCodesActivityAccountCodes.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postCodesActivityAccountCodes.key = \\"/codes/activity-account-codes/\\";

export const postCodesResourcesAdd_root = (
  requestBody: ResourceRequest,
  queryParams?: PostCodesResourcesAdd_rootQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Resource>> => {
  return Http.postRequest(
    postCodesResourcesAdd_root.key,
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postCodesResourcesAdd_root.key = \\"/codes/resources/add_root/\\";

export const postCodesResourcesIdAdd_child = (
  /** A UUID string identifying this Resource. */
  id: string,
  requestBody: ResourceRequest,
  queryParams?: PostCodesResourcesIdAdd_childQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Resource>> => {
  return Http.postRequest(
    template(postCodesResourcesIdAdd_child.key, { id }),
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postCodesResourcesIdAdd_child.key = \\"/codes/resources/{id}/add_child/\\";

export const postCodesResourcesIdAdd_sibling = (
  /** A UUID string identifying this Resource. */
  id: string,
  requestBody: ResourceRequest,
  queryParams?: PostCodesResourcesIdAdd_siblingQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Resource>> => {
  return Http.postRequest(
    template(postCodesResourcesIdAdd_sibling.key, { id }),
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postCodesResourcesIdAdd_sibling.key = \\"/codes/resources/{id}/add_sibling/\\";

export const postCodesResourcesIdMove_under = (
  /** A UUID string identifying this Resource. */
  id: string,
  requestBody: ResourceRequest,
  queryParams?: PostCodesResourcesIdMove_underQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Resource>> => {
  return Http.postRequest(
    template(postCodesResourcesIdMove_under.key, { id }),
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postCodesResourcesIdMove_under.key = \\"/codes/resources/{id}/move_under/\\";

export const postCodesWbsAdd_root = (
  requestBody: WBSRequest,
  queryParams?: PostCodesWbsAdd_rootQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<WBS>> => {
  return Http.postRequest(
    postCodesWbsAdd_root.key,
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postCodesWbsAdd_root.key = \\"/codes/wbs/add_root/\\";

export const postCodesWbsIdAdd_child = (
  /** A UUID string identifying this WBS. */
  id: string,
  requestBody: WBSRequest,
  queryParams?: PostCodesWbsIdAdd_childQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<WBS>> => {
  return Http.postRequest(
    template(postCodesWbsIdAdd_child.key, { id }),
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postCodesWbsIdAdd_child.key = \\"/codes/wbs/{id}/add_child/\\";

export const postCodesWbsIdAdd_sibling = (
  /** A UUID string identifying this WBS. */
  id: string,
  requestBody: WBSRequest,
  queryParams?: PostCodesWbsIdAdd_siblingQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<WBS>> => {
  return Http.postRequest(
    template(postCodesWbsIdAdd_sibling.key, { id }),
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postCodesWbsIdAdd_sibling.key = \\"/codes/wbs/{id}/add_sibling/\\";

export const postCodesWbsIdMove_under = (
  /** A UUID string identifying this WBS. */
  id: string,
  requestBody: WBSRequest,
  queryParams?: PostCodesWbsIdMove_underQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<WBS>> => {
  return Http.postRequest(
    template(postCodesWbsIdMove_under.key, { id }),
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postCodesWbsIdMove_under.key = \\"/codes/wbs/{id}/move_under/\\";

export const postCommonBankNames = (
  requestBody: BankNameRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postCommonBankNames.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postCommonBankNames.key = \\"/common/bank-names/\\";

export const postCommonCurrencies = (
  requestBody: CurrencyRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postCommonCurrencies.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postCommonCurrencies.key = \\"/common/currencies/\\";

export const postCommonPackagingMethods = (
  requestBody: PackagingMethodRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postCommonPackagingMethods.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postCommonPackagingMethods.key = \\"/common/packaging-methods/\\";

export const postCommonPaymentMethods = (
  requestBody: PaymentMethodRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postCommonPaymentMethods.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postCommonPaymentMethods.key = \\"/common/payment-methods/\\";

export const postCommonResourceUnits = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postCommonResourceUnits.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postCommonResourceUnits.key = \\"/common/resource-units/\\";

export const postCommonTaxParameters = (
  requestBody: TaxParameterRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postCommonTaxParameters.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postCommonTaxParameters.key = \\"/common/tax-parameters/\\";

export const postCommonVatWitholdings = (
  requestBody: VatwitholdingRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postCommonVatWitholdings.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postCommonVatWitholdings.key = \\"/common/vat-witholdings/\\";

export const postFinanceAccounts = (
  requestBody: AccountRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postFinanceAccounts.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postFinanceAccounts.key = \\"/finance/accounts/\\";

export const postFinanceBankAccounts = (
  requestBody: BankAccountRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postFinanceBankAccounts.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postFinanceBankAccounts.key = \\"/finance/bank-accounts/\\";

export const postFinanceCashAccounts = (
  requestBody: CashAccountRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postFinanceCashAccounts.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postFinanceCashAccounts.key = \\"/finance/cash-accounts/\\";

export const postFinanceExpenses = (
  requestBody: ExpenseRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postFinanceExpenses.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postFinanceExpenses.key = \\"/finance/expenses/\\";

export const postFinanceIncomeInvoiceCategories = (
  requestBody: IncomeInvoiceCategoryRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postFinanceIncomeInvoiceCategories.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postFinanceIncomeInvoiceCategories.key = \\"/finance/income-invoice-categories/\\";

export const postFinanceIncomeInvoices = (
  requestBody: IncomeInvoiceRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postFinanceIncomeInvoices.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postFinanceIncomeInvoices.key = \\"/finance/income-invoices/\\";

export const postFinanceIncomeInvoicesAdd_attachment = (
  requestBody: IncomeInvoiceRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<IncomeInvoice>> => {
  return Http.postRequest(
    postFinanceIncomeInvoicesAdd_attachment.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postFinanceIncomeInvoicesAdd_attachment.key =
  \\"/finance/income-invoices/add_attachment/\\";

export const postFinanceIncomeInvoicesApprovals = (
  requestBody: IncomeInvoiceRequest,
  queryParams?: PostFinanceIncomeInvoicesApprovalsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedTransitionList>> => {
  return Http.postRequest(
    postFinanceIncomeInvoicesApprovals.key,
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postFinanceIncomeInvoicesApprovals.key = \\"/finance/income-invoices/approvals/\\";

export const postFinanceIncomeInvoicesApprove = (
  requestBody: ApproveSerializerForIncomeInvoiceRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<IncomeInvoice>> => {
  return Http.postRequest(
    postFinanceIncomeInvoicesApprove.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postFinanceIncomeInvoicesApprove.key = \\"/finance/income-invoices/approve/\\";

export const postFinancePaymentBonds = (
  requestBody: PaymentBondRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postFinancePaymentBonds.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postFinancePaymentBonds.key = \\"/finance/payment-bonds/\\";

export const postFinancePaymentCheques = (
  requestBody: PaymentChequeRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postFinancePaymentCheques.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postFinancePaymentCheques.key = \\"/finance/payment-cheques/\\";

export const postFinancePaymentDetailsIdDelete = (
  /** A UUID string identifying this Payment Detail. */
  id: string,
  requestBody: PaymentDetailDeleteRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaymentDetailDelete>> => {
  return Http.postRequest(
    template(postFinancePaymentDetailsIdDelete.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postFinancePaymentDetailsIdDelete.key = \\"/finance/payment-details/{id}/delete/\\";

export const postFinancePaymentDetailsRealize = (
  requestBody: PaymentDetailRealizeRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaymentDetailRealize>> => {
  return Http.postRequest(
    postFinancePaymentDetailsRealize.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postFinancePaymentDetailsRealize.key = \\"/finance/payment-details/realize/\\";

export const postFinancePlannedPaymentsPay_by_bond = (
  requestBody: PayByBondRequest,
  queryParams?: PostFinancePlannedPaymentsPay_by_bondQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PayByBond>> => {
  return Http.postRequest(
    postFinancePlannedPaymentsPay_by_bond.key,
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postFinancePlannedPaymentsPay_by_bond.key =
  \\"/finance/planned-payments/pay_by_bond/\\";

export const postFinancePlannedPaymentsPay_by_cheque = (
  requestBody: PayByChequeRequest,
  queryParams?: PostFinancePlannedPaymentsPay_by_chequeQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PayByCheque>> => {
  return Http.postRequest(
    postFinancePlannedPaymentsPay_by_cheque.key,
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postFinancePlannedPaymentsPay_by_cheque.key =
  \\"/finance/planned-payments/pay_by_cheque/\\";

export const postFinancePlannedPaymentsPay_by_filter = (
  requestBody: PayByFilterRequest,
  queryParams?: PostFinancePlannedPaymentsPay_by_filterQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PayByFilter>> => {
  return Http.postRequest(
    postFinancePlannedPaymentsPay_by_filter.key,
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postFinancePlannedPaymentsPay_by_filter.key =
  \\"/finance/planned-payments/pay_by_filter/\\";

export const postFinancePlannedPaymentsPay_selected = (
  requestBody: PaySelectedRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaySelected>> => {
  return Http.postRequest(
    postFinancePlannedPaymentsPay_selected.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postFinancePlannedPaymentsPay_selected.key =
  \\"/finance/planned-payments/pay_selected/\\";

export const postFinancePlannedRevenuePay_by_bond = (
  requestBody: PayByBondRequest,
  queryParams?: PostFinancePlannedRevenuePay_by_bondQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PayByBond>> => {
  return Http.postRequest(
    postFinancePlannedRevenuePay_by_bond.key,
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postFinancePlannedRevenuePay_by_bond.key =
  \\"/finance/planned-revenue/pay_by_bond/\\";

export const postFinancePlannedRevenuePay_by_cheque = (
  requestBody: PayByChequeRequest,
  queryParams?: PostFinancePlannedRevenuePay_by_chequeQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PayByCheque>> => {
  return Http.postRequest(
    postFinancePlannedRevenuePay_by_cheque.key,
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postFinancePlannedRevenuePay_by_cheque.key =
  \\"/finance/planned-revenue/pay_by_cheque/\\";

export const postFinancePlannedRevenuePay_by_filter = (
  requestBody: PayByFilterRequest,
  queryParams?: PostFinancePlannedRevenuePay_by_filterQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PayByFilter>> => {
  return Http.postRequest(
    postFinancePlannedRevenuePay_by_filter.key,
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postFinancePlannedRevenuePay_by_filter.key =
  \\"/finance/planned-revenue/pay_by_filter/\\";

export const postFinancePlannedRevenuePay_selected = (
  requestBody: PaySelectedRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaySelected>> => {
  return Http.postRequest(
    postFinancePlannedRevenuePay_selected.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postFinancePlannedRevenuePay_selected.key =
  \\"/finance/planned-revenue/pay_selected/\\";

export const postFinanceRevenueBonds = (
  requestBody: RevenueBondRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postFinanceRevenueBonds.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postFinanceRevenueBonds.key = \\"/finance/revenue-bonds/\\";

export const postFinanceRevenueCheques = (
  requestBody: RevenueChequeRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postFinanceRevenueCheques.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postFinanceRevenueCheques.key = \\"/finance/revenue-cheques/\\";

export const postFinanceRevenueDetailsIdDelete = (
  /** A UUID string identifying this Revenue Detail. */
  id: string,
  requestBody: RevenueDetailDeleteRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<RevenueDetailDelete>> => {
  return Http.postRequest(
    template(postFinanceRevenueDetailsIdDelete.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postFinanceRevenueDetailsIdDelete.key = \\"/finance/revenue-details/{id}/delete/\\";

export const postFinanceRevenueDetailsRealize = (
  requestBody: RevenueDetailRealizeRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<RevenueDetailRealize>> => {
  return Http.postRequest(
    postFinanceRevenueDetailsRealize.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postFinanceRevenueDetailsRealize.key = \\"/finance/revenue-details/realize/\\";

export const postFinanceSlips = (
  requestBody: SlipRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postFinanceSlips.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postFinanceSlips.key = \\"/finance/slips/\\";

export const postFinanceSupplierAccounts = (
  requestBody: SupplierAccountRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postFinanceSupplierAccounts.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postFinanceSupplierAccounts.key = \\"/finance/supplier-accounts/\\";

export const postFinanceTxns = (
  requestBody: TransactionRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postFinanceTxns.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postFinanceTxns.key = \\"/finance/txns/\\";

export const postHrCrews = (
  requestBody: CrewRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postHrCrews.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postHrCrews.key = \\"/hr/crews/\\";

export const postHrDepartments = (
  requestBody: MainDepartmentRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postHrDepartments.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postHrDepartments.key = \\"/hr/departments/\\";

export const postHrLocations = (
  requestBody: LocationParameterRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postHrLocations.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postHrLocations.key = \\"/hr/locations/\\";

export const postHrPersonnel = (
  requestBody: PersonRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postHrPersonnel.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postHrPersonnel.key = \\"/hr/personnel/\\";

export const postHrPositions = (
  requestBody: MainPositionRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postHrPositions.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postHrPositions.key = \\"/hr/positions/\\";

export const postHrProfessions = (
  requestBody: ProfessionRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postHrProfessions.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postHrProfessions.key = \\"/hr/professions/\\";

export const postHrQuitReasons = (
  requestBody: QuitReasonRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postHrQuitReasons.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postHrQuitReasons.key = \\"/hr/quit-reasons-/\\";

export const postHrQuitRecords = (
  requestBody: QuitRecordRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postHrQuitRecords.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postHrQuitRecords.key = \\"/hr/quit-records/\\";

export const postHrSalaries = (
  requestBody: SalaryRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postHrSalaries.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postHrSalaries.key = \\"/hr/salaries/\\";

export const postHrSalaryPermissions = (
  requestBody: ProjectSalaryPermissionRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postHrSalaryPermissions.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postHrSalaryPermissions.key = \\"/hr/salary-permissions/\\";

export const postProcurementAdvancePayments = (
  requestBody: OrderAdvancePaymentRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postProcurementAdvancePayments.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postProcurementAdvancePayments.key = \\"/procurement/advance-payments/\\";

export const postProcurementApprovedOrderItemsCancel = (
  requestBody: CancellableRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ApprovedOrderItem>> => {
  return Http.postRequest(
    postProcurementApprovedOrderItemsCancel.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postProcurementApprovedOrderItemsCancel.key =
  \\"/procurement/approved-order-items/cancel/\\";

export const postProcurementApprovedOrderItemsUncancel = (
  requestBody: UnCancellableRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ApprovedOrderItem>> => {
  return Http.postRequest(
    postProcurementApprovedOrderItemsUncancel.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postProcurementApprovedOrderItemsUncancel.key =
  \\"/procurement/approved-order-items/uncancel/\\";

export const postProcurementApprovedRequestItemsCancel = (
  requestBody: CancellableRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ApprovedRequestItem>> => {
  return Http.postRequest(
    postProcurementApprovedRequestItemsCancel.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postProcurementApprovedRequestItemsCancel.key =
  \\"/procurement/approved-request-items/cancel/\\";

export const postProcurementApprovedRequestItemsCreateOfferComparison = (
  requestBody: OfferComparisonRequestRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<OfferComparisonResponse>> => {
  return Http.postRequest(
    postProcurementApprovedRequestItemsCreateOfferComparison.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postProcurementApprovedRequestItemsCreateOfferComparison.key =
  \\"/procurement/approved-request-items/create-offer-comparison/\\";

export const postProcurementApprovedRequestItemsUncancel = (
  requestBody: UnCancellableRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ApprovedRequestItem>> => {
  return Http.postRequest(
    postProcurementApprovedRequestItemsUncancel.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postProcurementApprovedRequestItemsUncancel.key =
  \\"/procurement/approved-request-items/uncancel/\\";

export const postProcurementInvoices = (
  requestBody: InvoiceRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postProcurementInvoices.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postProcurementInvoices.key = \\"/procurement/invoices/\\";

export const postProcurementInvoicesAdd_attachment = (
  requestBody: InvoiceRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Invoice>> => {
  return Http.postRequest(
    postProcurementInvoicesAdd_attachment.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postProcurementInvoicesAdd_attachment.key =
  \\"/procurement/invoices/add_attachment/\\";

export const postProcurementInvoicesApprovals = (
  requestBody: InvoiceRequest,
  queryParams?: PostProcurementInvoicesApprovalsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedTransitionList>> => {
  return Http.postRequest(
    postProcurementInvoicesApprovals.key,
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postProcurementInvoicesApprovals.key = \\"/procurement/invoices/approvals/\\";

export const postProcurementInvoicesApprove = (
  requestBody: ApproveSerializerForInvoiceRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Invoice>> => {
  return Http.postRequest(
    postProcurementInvoicesApprove.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postProcurementInvoicesApprove.key = \\"/procurement/invoices/approve/\\";

export const postProcurementInvoicesPrepare = (
  requestBody: InvoicePrepareRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Invoice>> => {
  return Http.postRequest(
    postProcurementInvoicesPrepare.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postProcurementInvoicesPrepare.key = \\"/procurement/invoices/prepare/\\";

export const postProcurementOrders = (
  requestBody: OrderRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postProcurementOrders.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postProcurementOrders.key = \\"/procurement/orders/\\";

export const postProcurementOrdersAdd_attachment = (
  requestBody: OrderRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Order>> => {
  return Http.postRequest(
    postProcurementOrdersAdd_attachment.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postProcurementOrdersAdd_attachment.key = \\"/procurement/orders/add_attachment/\\";

export const postProcurementOrdersApprovals = (
  requestBody: OrderRequest,
  queryParams?: PostProcurementOrdersApprovalsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedTransitionList>> => {
  return Http.postRequest(
    postProcurementOrdersApprovals.key,
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postProcurementOrdersApprovals.key = \\"/procurement/orders/approvals/\\";

export const postProcurementOrdersApprove = (
  requestBody: ApproveSerializerForOrderRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Order>> => {
  return Http.postRequest(
    postProcurementOrdersApprove.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postProcurementOrdersApprove.key = \\"/procurement/orders/approve/\\";

export const postProcurementOrdersPrepare = (
  requestBody: OrderPrepareRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Order>> => {
  return Http.postRequest(
    postProcurementOrdersPrepare.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postProcurementOrdersPrepare.key = \\"/procurement/orders/prepare/\\";

export const postProcurementRequestTypes = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postProcurementRequestTypes.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postProcurementRequestTypes.key = \\"/procurement/request-types/\\";

export const postProcurementRequests = (
  requestBody: RequestRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postProcurementRequests.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postProcurementRequests.key = \\"/procurement/requests/\\";

export const postProcurementRequestsAdd_attachment = (
  requestBody: RequestRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Request>> => {
  return Http.postRequest(
    postProcurementRequestsAdd_attachment.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postProcurementRequestsAdd_attachment.key =
  \\"/procurement/requests/add_attachment/\\";

export const postProcurementRequestsApprovals = (
  requestBody: RequestRequest,
  queryParams?: PostProcurementRequestsApprovalsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedTransitionList>> => {
  return Http.postRequest(
    postProcurementRequestsApprovals.key,
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postProcurementRequestsApprovals.key = \\"/procurement/requests/approvals/\\";

export const postProcurementRequestsApprove = (
  requestBody: ApproveSerializerForRequestRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Request>> => {
  return Http.postRequest(
    postProcurementRequestsApprove.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postProcurementRequestsApprove.key = \\"/procurement/requests/approve/\\";

export const postProcurementSpecialInvoiceTypes = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postProcurementSpecialInvoiceTypes.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postProcurementSpecialInvoiceTypes.key = \\"/procurement/special-invoice-types/\\";

export const postProcurementSpecialInvoices = (
  requestBody: SpecialInvoiceRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postProcurementSpecialInvoices.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postProcurementSpecialInvoices.key = \\"/procurement/special-invoices/\\";

export const postProcurementSpecialInvoicesAdd_attachment = (
  requestBody: SpecialInvoiceRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<SpecialInvoice>> => {
  return Http.postRequest(
    postProcurementSpecialInvoicesAdd_attachment.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postProcurementSpecialInvoicesAdd_attachment.key =
  \\"/procurement/special-invoices/add_attachment/\\";

export const postProcurementSpecialInvoicesApprovals = (
  requestBody: SpecialInvoiceRequest,
  queryParams?: PostProcurementSpecialInvoicesApprovalsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedTransitionList>> => {
  return Http.postRequest(
    postProcurementSpecialInvoicesApprovals.key,
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postProcurementSpecialInvoicesApprovals.key =
  \\"/procurement/special-invoices/approvals/\\";

export const postProcurementSpecialInvoicesApprove = (
  requestBody: ApproveSerializerForSpecialInvoiceRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<SpecialInvoice>> => {
  return Http.postRequest(
    postProcurementSpecialInvoicesApprove.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postProcurementSpecialInvoicesApprove.key =
  \\"/procurement/special-invoices/approve/\\";

export const postProfilesAvatar = (
  requestBody: AvatarRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postProfilesAvatar.key,
    undefined,
    objToForm(requestBody),
    _CONSTANT3,
    overrideConfig(_CONSTANT4, configOverride),
  );
};

/** Key is end point string without base url */
postProfilesAvatar.key = \\"/profiles/avatar/\\";

export const postProfilesNotifications = (
  requestBody: NotificationRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postProfilesNotifications.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postProfilesNotifications.key = \\"/profiles/notifications/\\";

export const postProjectsAccountingtypes = (
  requestBody: AccountingTypeRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postProjectsAccountingtypes.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postProjectsAccountingtypes.key = \\"/projects/accountingtypes/\\";

export const postProjectsCities = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postProjectsCities.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postProjectsCities.key = \\"/projects/cities/\\";

export const postProjectsCompanies = (
  requestBody: CompanyRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postProjectsCompanies.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postProjectsCompanies.key = \\"/projects/companies/\\";

export const postProjectsCompaniesSlugValidateOfferComparisonApiKey = (
  slug: string,
  requestBody: ValidateOfferComparisonApiKeyRequestRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ValidateOfferComparisonApiKeyResponse>> => {
  return Http.postRequest(
    template(postProjectsCompaniesSlugValidateOfferComparisonApiKey.key, {
      slug,
    }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postProjectsCompaniesSlugValidateOfferComparisonApiKey.key =
  \\"/projects/companies/{slug}/validate-offer-comparison-api-key/\\";

export const postProjectsCountries = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postProjectsCountries.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postProjectsCountries.key = \\"/projects/countries/\\";

export const postProjectsDistricts = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postProjectsDistricts.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postProjectsDistricts.key = \\"/projects/districts/\\";

export const postProjectsProjects = (
  requestBody: ProjectRequest,
  queryParams?: PostProjectsProjectsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postProjectsProjects.key,
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postProjectsProjects.key = \\"/projects/projects/\\";

export const postProjectsProjecttypes = (
  requestBody: ProjectTypeParamRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postProjectsProjecttypes.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postProjectsProjecttypes.key = \\"/projects/projecttypes/\\";

export const postProjectsResponsibles = (
  requestBody: ResponsibleRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postProjectsResponsibles.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postProjectsResponsibles.key = \\"/projects/responsibles/\\";

export const postProjectsResponsibletypes = (
  requestBody: ResponsibleTypeParamRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postProjectsResponsibletypes.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postProjectsResponsibletypes.key = \\"/projects/responsibletypes/\\";

export const postRatesRates = (
  requestBody: RateRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postRatesRates.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postRatesRates.key = \\"/rates/rates/\\";

export const postSubcontractsContractCategories = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postSubcontractsContractCategories.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postSubcontractsContractCategories.key = \\"/subcontracts/contract-categories/\\";

export const postSubcontractsContractCollateralReason = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postSubcontractsContractCollateralReason.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postSubcontractsContractCollateralReason.key =
  \\"/subcontracts/contract-collateral-reason/\\";

export const postSubcontractsContractCollateralStatus = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postSubcontractsContractCollateralStatus.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postSubcontractsContractCollateralStatus.key =
  \\"/subcontracts/contract-collateral-status/\\";

export const postSubcontractsContractCollateralTypes = (
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postSubcontractsContractCollateralTypes.key,
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postSubcontractsContractCollateralTypes.key =
  \\"/subcontracts/contract-collateral-types/\\";

export const postSubcontractsContracts = (
  requestBody: ContractCreateRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postSubcontractsContracts.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postSubcontractsContracts.key = \\"/subcontracts/contracts/\\";

export const postSubcontractsContractsAdd_attachment = (
  requestBody: ContractRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Contract>> => {
  return Http.postRequest(
    postSubcontractsContractsAdd_attachment.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postSubcontractsContractsAdd_attachment.key =
  \\"/subcontracts/contracts/add_attachment/\\";

export const postSubcontractsContractsApprovals = (
  requestBody: ContractRequest,
  queryParams?: PostSubcontractsContractsApprovalsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedTransitionList>> => {
  return Http.postRequest(
    postSubcontractsContractsApprovals.key,
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postSubcontractsContractsApprovals.key = \\"/subcontracts/contracts/approvals/\\";

export const postSubcontractsContractsApprove = (
  requestBody: ApproveSerializerForContractRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Contract>> => {
  return Http.postRequest(
    postSubcontractsContractsApprove.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postSubcontractsContractsApprove.key = \\"/subcontracts/contracts/approve/\\";

export const postSubcontractsContractsCounter__slugCreate_revision = (
  counter__slug: string,
  requestBody: CreateRevisionRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Contract>> => {
  return Http.postRequest(
    template(postSubcontractsContractsCounter__slugCreate_revision.key, {
      counter__slug,
    }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postSubcontractsContractsCounter__slugCreate_revision.key =
  \\"/subcontracts/contracts/{counter__slug}/create_revision/\\";

export const postSubcontractsDeductionReturns = (
  requestBody: DeductionReturnRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postSubcontractsDeductionReturns.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postSubcontractsDeductionReturns.key = \\"/subcontracts/deduction-returns/\\";

export const postSubcontractsDeductionReturnsAdd_attachment = (
  requestBody: DeductionReturnRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<DeductionReturn>> => {
  return Http.postRequest(
    postSubcontractsDeductionReturnsAdd_attachment.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postSubcontractsDeductionReturnsAdd_attachment.key =
  \\"/subcontracts/deduction-returns/add_attachment/\\";

export const postSubcontractsDeductionReturnsApprovals = (
  requestBody: DeductionReturnRequest,
  queryParams?: PostSubcontractsDeductionReturnsApprovalsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedTransitionList>> => {
  return Http.postRequest(
    postSubcontractsDeductionReturnsApprovals.key,
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postSubcontractsDeductionReturnsApprovals.key =
  \\"/subcontracts/deduction-returns/approvals/\\";

export const postSubcontractsDeductionReturnsApprove = (
  requestBody: ApproveSerializerForDeductionReturnRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<DeductionReturn>> => {
  return Http.postRequest(
    postSubcontractsDeductionReturnsApprove.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postSubcontractsDeductionReturnsApprove.key =
  \\"/subcontracts/deduction-returns/approve/\\";

export const postSubcontractsProgresses = (
  requestBody: ProgressRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postSubcontractsProgresses.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postSubcontractsProgresses.key = \\"/subcontracts/progresses/\\";

export const postSubcontractsProgressesAdd_attachment = (
  requestBody: ProgressRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Progress>> => {
  return Http.postRequest(
    postSubcontractsProgressesAdd_attachment.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postSubcontractsProgressesAdd_attachment.key =
  \\"/subcontracts/progresses/add_attachment/\\";

export const postSubcontractsProgressesApprovals = (
  requestBody: ProgressRequest,
  queryParams?: PostSubcontractsProgressesApprovalsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaginatedTransitionList>> => {
  return Http.postRequest(
    postSubcontractsProgressesApprovals.key,
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postSubcontractsProgressesApprovals.key = \\"/subcontracts/progresses/approvals/\\";

export const postSubcontractsProgressesApprove = (
  requestBody: ApproveSerializerForProgressRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Progress>> => {
  return Http.postRequest(
    postSubcontractsProgressesApprove.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postSubcontractsProgressesApprove.key = \\"/subcontracts/progresses/approve/\\";

export const postSubcontractsRevisions = (
  requestBody: RevisionRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postSubcontractsRevisions.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postSubcontractsRevisions.key = \\"/subcontracts/revisions/\\";

export const postSuppliersAccountingCodes = (
  requestBody: SupplierAccountingCodeRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postSuppliersAccountingCodes.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postSuppliersAccountingCodes.key = \\"/suppliers/accounting-codes/\\";

export const postSuppliersBankAccounts = (
  requestBody: SupplierBankAccountRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postSuppliersBankAccounts.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postSuppliersBankAccounts.key = \\"/suppliers/bank-accounts/\\";

export const postSuppliersContacts = (
  requestBody: ContactRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postSuppliersContacts.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postSuppliersContacts.key = \\"/suppliers/contacts/\\";

export const postSuppliersReviewAnswers = (
  requestBody: AnswerRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postSuppliersReviewAnswers.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postSuppliersReviewAnswers.key = \\"/suppliers/review-answers/\\";

export const postSuppliersReviewForms = (
  requestBody: ReviewRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postSuppliersReviewForms.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postSuppliersReviewForms.key = \\"/suppliers/review-forms/\\";

export const postSuppliersReviewQuestions = (
  requestBody: ReviewQuestionRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postSuppliersReviewQuestions.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postSuppliersReviewQuestions.key = \\"/suppliers/review-questions/\\";

export const postSuppliersReviewTemplates = (
  requestBody: ReviewTemplateRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postSuppliersReviewTemplates.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postSuppliersReviewTemplates.key = \\"/suppliers/review-templates/\\";

export const postSuppliersSupplierActivityTypes = (
  requestBody: ActivityTypeRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postSuppliersSupplierActivityTypes.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postSuppliersSupplierActivityTypes.key = \\"/suppliers/supplier-activity-types/\\";

export const postSuppliersSupplierBranches = (
  requestBody: BranchRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postSuppliersSupplierBranches.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postSuppliersSupplierBranches.key = \\"/suppliers/supplier-branches/\\";

export const postSuppliersSupplierTypes = (
  requestBody: SupplierTypeRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postSuppliersSupplierTypes.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postSuppliersSupplierTypes.key = \\"/suppliers/supplier-types/\\";

export const postSuppliersSuppliers = (
  requestBody: SupplierRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postSuppliersSuppliers.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postSuppliersSuppliers.key = \\"/suppliers/suppliers/\\";

export const postWarehouseProducts = (
  requestBody: ProductCreateRequest,
  queryParams: PostWarehouseProductsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postWarehouseProducts.key,
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postWarehouseProducts.key = \\"/warehouse/products/\\";

export const postWarehouseProductsAdd_attachment = (
  requestBody: ProductCreateRequest,
  queryParams: PostWarehouseProductsAdd_attachmentQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Product>> => {
  return Http.postRequest(
    postWarehouseProductsAdd_attachment.key,
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postWarehouseProductsAdd_attachment.key = \\"/warehouse/products/add_attachment/\\";

export const postWarehouseProductsDeliver_products = (
  requestBody: ProductDeliveryListCreateRequest,
  queryParams: PostWarehouseProductsDeliver_productsQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Product>> => {
  return Http.postRequest(
    postWarehouseProductsDeliver_products.key,
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postWarehouseProductsDeliver_products.key =
  \\"/warehouse/products/deliver_products/\\";

export const postWarehouseTransactions = (
  requestBody: TransactionListCreateRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postWarehouseTransactions.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postWarehouseTransactions.key = \\"/warehouse/transactions/\\";

export const postWarehouseWarehouses = (
  requestBody: WarehouseRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<any>> => {
  return Http.postRequest(
    postWarehouseWarehouses.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
postWarehouseWarehouses.key = \\"/warehouse/warehouses/\\";

export const putAuthGroupsId = (
  /** A unique integer value identifying this group. */
  id: number,
  requestBody: GroupMemberRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<GroupMember>> => {
  return Http.putRequest(
    template(putAuthGroupsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putAuthGroupsId.key = \\"/auth/groups/{id}/\\";

export const putAuthGroupsIdMembersUser_id = (
  /** A unique integer value identifying this group. */
  id: number,
  user_id: string,
  requestBody: GroupMemberRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<GroupMember>> => {
  return Http.putRequest(
    template(putAuthGroupsIdMembersUser_id.key, { id, user_id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putAuthGroupsIdMembersUser_id.key = \\"/auth/groups/{id}/members/{user_id}/\\";

export const putAuthUser = (
  requestBody: CustomUserDetailsRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<CustomUserDetails>> => {
  return Http.putRequest(
    putAuthUser.key,
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putAuthUser.key = \\"/auth/user/\\";

export const putAuthUserGroupsId = (
  /** A unique integer value identifying this user. */
  id: number,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<UserGroup>> => {
  return Http.putRequest(
    template(putAuthUserGroupsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putAuthUserGroupsId.key = \\"/auth/user/groups/{id}/\\";

export const putAuthUserGroupsIdCopy_groups_from = (
  /** A unique integer value identifying this user. */
  id: number,
  requestBody: InlineUserRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<UserGroup>> => {
  return Http.putRequest(
    template(putAuthUserGroupsIdCopy_groups_from.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putAuthUserGroupsIdCopy_groups_from.key =
  \\"/auth/user/groups/{id}/copy_groups_from/\\";

export const putCodesActivitiesId = (
  /** A UUID string identifying this Activity. */
  id: string,
  requestBody: ActivityRequest,
  queryParams?: PutCodesActivitiesIdQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Activity>> => {
  return Http.putRequest(
    template(putCodesActivitiesId.key, { id }),
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putCodesActivitiesId.key = \\"/codes/activities/{id}/\\";

export const putCodesActivityAccountCodesId = (
  /** A UUID string identifying this accounting code. */
  id: string,
  requestBody: SupplierAccountingCodeRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<SupplierAccountingCode>> => {
  return Http.putRequest(
    template(putCodesActivityAccountCodesId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putCodesActivityAccountCodesId.key = \\"/codes/activity-account-codes/{id}/\\";

export const putCodesResourcesId = (
  /** A UUID string identifying this Resource. */
  id: string,
  requestBody: ResourceRequest,
  queryParams?: PutCodesResourcesIdQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Resource>> => {
  return Http.putRequest(
    template(putCodesResourcesId.key, { id }),
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putCodesResourcesId.key = \\"/codes/resources/{id}/\\";

export const putCodesWbsId = (
  /** A UUID string identifying this WBS. */
  id: string,
  requestBody: WBSRequest,
  queryParams?: PutCodesWbsIdQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<WBS>> => {
  return Http.putRequest(
    template(putCodesWbsId.key, { id }),
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putCodesWbsId.key = \\"/codes/wbs/{id}/\\";

export const putCommonBankNamesId = (
  /** A UUID string identifying this Bank Name. */
  id: string,
  requestBody: BankNameRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<BankName>> => {
  return Http.putRequest(
    template(putCommonBankNamesId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putCommonBankNamesId.key = \\"/common/bank-names/{id}/\\";

export const putCommonCurrenciesId = (
  /** A UUID string identifying this Currency. */
  id: string,
  requestBody: CurrencyRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Currency>> => {
  return Http.putRequest(
    template(putCommonCurrenciesId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putCommonCurrenciesId.key = \\"/common/currencies/{id}/\\";

export const putCommonPackagingMethodsId = (
  /** A UUID string identifying this Packaging Method. */
  id: string,
  requestBody: PackagingMethodRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PackagingMethod>> => {
  return Http.putRequest(
    template(putCommonPackagingMethodsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putCommonPackagingMethodsId.key = \\"/common/packaging-methods/{id}/\\";

export const putCommonPaymentMethodsId = (
  /** A UUID string identifying this Payment Method. */
  id: string,
  requestBody: PaymentMethodRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaymentMethod>> => {
  return Http.putRequest(
    template(putCommonPaymentMethodsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putCommonPaymentMethodsId.key = \\"/common/payment-methods/{id}/\\";

export const putCommonResourceUnitsId = (
  /** A UUID string identifying this Resource Unit. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ResourceUnit>> => {
  return Http.putRequest(
    template(putCommonResourceUnitsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putCommonResourceUnitsId.key = \\"/common/resource-units/{id}/\\";

export const putCommonTaxParametersId = (
  /** A UUID string identifying this Tax Parameter. */
  id: string,
  requestBody: TaxParameterRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<TaxParameter>> => {
  return Http.putRequest(
    template(putCommonTaxParametersId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putCommonTaxParametersId.key = \\"/common/tax-parameters/{id}/\\";

export const putCommonVatWitholdingsId = (
  /** A UUID string identifying this Vat Witholding. */
  id: string,
  requestBody: VatwitholdingRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Vatwitholding>> => {
  return Http.putRequest(
    template(putCommonVatWitholdingsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putCommonVatWitholdingsId.key = \\"/common/vat-witholdings/{id}/\\";

export const putFinanceAccountsId = (
  /** A UUID string identifying this account. */
  id: string,
  requestBody: AccountRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Account>> => {
  return Http.putRequest(
    template(putFinanceAccountsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putFinanceAccountsId.key = \\"/finance/accounts/{id}/\\";

export const putFinanceBankAccountsId = (
  /** A UUID string identifying this bank account. */
  id: string,
  requestBody: BankAccountRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<BankAccount>> => {
  return Http.putRequest(
    template(putFinanceBankAccountsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putFinanceBankAccountsId.key = \\"/finance/bank-accounts/{id}/\\";

export const putFinanceCashAccountsId = (
  /** A UUID string identifying this cash account. */
  id: string,
  requestBody: CashAccountRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<CashAccount>> => {
  return Http.putRequest(
    template(putFinanceCashAccountsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putFinanceCashAccountsId.key = \\"/finance/cash-accounts/{id}/\\";

export const putFinanceExpensesCounter__slug = (
  counter__slug: string,
  requestBody: ExpenseRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Expense>> => {
  return Http.putRequest(
    template(putFinanceExpensesCounter__slug.key, { counter__slug }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putFinanceExpensesCounter__slug.key = \\"/finance/expenses/{counter__slug}/\\";

export const putFinanceIncomeInvoiceCategoriesId = (
  /** A UUID string identifying this income invoice category. */
  id: string,
  requestBody: IncomeInvoiceCategoryRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<IncomeInvoiceCategory>> => {
  return Http.putRequest(
    template(putFinanceIncomeInvoiceCategoriesId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putFinanceIncomeInvoiceCategoriesId.key =
  \\"/finance/income-invoice-categories/{id}/\\";

export const putFinanceIncomeInvoicesCounter__slug = (
  counter__slug: string,
  requestBody: IncomeInvoiceRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<IncomeInvoice>> => {
  return Http.putRequest(
    template(putFinanceIncomeInvoicesCounter__slug.key, { counter__slug }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putFinanceIncomeInvoicesCounter__slug.key =
  \\"/finance/income-invoices/{counter__slug}/\\";

export const putFinancePaymentBondsCounter__slug = (
  counter__slug: string,
  requestBody: PaymentBondRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaymentBond>> => {
  return Http.putRequest(
    template(putFinancePaymentBondsCounter__slug.key, { counter__slug }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putFinancePaymentBondsCounter__slug.key =
  \\"/finance/payment-bonds/{counter__slug}/\\";

export const putFinancePaymentChequesCounter__slug = (
  counter__slug: string,
  requestBody: PaymentChequeRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaymentCheque>> => {
  return Http.putRequest(
    template(putFinancePaymentChequesCounter__slug.key, { counter__slug }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putFinancePaymentChequesCounter__slug.key =
  \\"/finance/payment-cheques/{counter__slug}/\\";

export const putFinancePaymentDetailsId = (
  /** A UUID string identifying this Payment Detail. */
  id: string,
  requestBody: PaymentDetailRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<PaymentDetail>> => {
  return Http.putRequest(
    template(putFinancePaymentDetailsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putFinancePaymentDetailsId.key = \\"/finance/payment-details/{id}/\\";

export const putFinanceRevenueBondsCounter__slug = (
  counter__slug: string,
  requestBody: RevenueBondRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<RevenueBond>> => {
  return Http.putRequest(
    template(putFinanceRevenueBondsCounter__slug.key, { counter__slug }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putFinanceRevenueBondsCounter__slug.key =
  \\"/finance/revenue-bonds/{counter__slug}/\\";

export const putFinanceRevenueChequesCounter__slug = (
  counter__slug: string,
  requestBody: RevenueChequeRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<RevenueCheque>> => {
  return Http.putRequest(
    template(putFinanceRevenueChequesCounter__slug.key, { counter__slug }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putFinanceRevenueChequesCounter__slug.key =
  \\"/finance/revenue-cheques/{counter__slug}/\\";

export const putFinanceRevenueDetailsId = (
  /** A UUID string identifying this Revenue Detail. */
  id: string,
  requestBody: RevenueDetailRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<RevenueDetail>> => {
  return Http.putRequest(
    template(putFinanceRevenueDetailsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putFinanceRevenueDetailsId.key = \\"/finance/revenue-details/{id}/\\";

export const putFinanceSlipsId = (
  /** A UUID string identifying this slip. */
  id: string,
  requestBody: SlipRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Slip>> => {
  return Http.putRequest(
    template(putFinanceSlipsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putFinanceSlipsId.key = \\"/finance/slips/{id}/\\";

export const putFinanceSupplierAccountsId = (
  /** A UUID string identifying this supplier account. */
  id: string,
  requestBody: SupplierAccountRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<SupplierAccount>> => {
  return Http.putRequest(
    template(putFinanceSupplierAccountsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putFinanceSupplierAccountsId.key = \\"/finance/supplier-accounts/{id}/\\";

export const putFinanceTxnsId = (
  /** A UUID string identifying this transaction. */
  id: string,
  requestBody: TransactionRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Transaction>> => {
  return Http.putRequest(
    template(putFinanceTxnsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putFinanceTxnsId.key = \\"/finance/txns/{id}/\\";

export const putHrCrewsId = (
  /** A UUID string identifying this Crew. */
  id: string,
  requestBody: CrewRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Crew>> => {
  return Http.putRequest(
    template(putHrCrewsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putHrCrewsId.key = \\"/hr/crews/{id}/\\";

export const putHrDepartmentsId = (
  /** A UUID string identifying this Main Department. */
  id: string,
  requestBody: MainDepartmentRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<MainDepartment>> => {
  return Http.putRequest(
    template(putHrDepartmentsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putHrDepartmentsId.key = \\"/hr/departments/{id}/\\";

export const putHrLocationsId = (
  /** A UUID string identifying this Location. */
  id: string,
  requestBody: LocationParameterRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<LocationParameter>> => {
  return Http.putRequest(
    template(putHrLocationsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putHrLocationsId.key = \\"/hr/locations/{id}/\\";

export const putHrPersonnelId = (
  /** A UUID string identifying this Person. */
  id: string,
  requestBody: PersonRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Person>> => {
  return Http.putRequest(
    template(putHrPersonnelId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putHrPersonnelId.key = \\"/hr/personnel/{id}/\\";

export const putHrPositionsId = (
  /** A UUID string identifying this Main Position. */
  id: string,
  requestBody: MainPositionRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<MainPosition>> => {
  return Http.putRequest(
    template(putHrPositionsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putHrPositionsId.key = \\"/hr/positions/{id}/\\";

export const putHrProfessionsId = (
  /** A UUID string identifying this Profession. */
  id: string,
  requestBody: ProfessionRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Profession>> => {
  return Http.putRequest(
    template(putHrProfessionsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putHrProfessionsId.key = \\"/hr/professions/{id}/\\";

export const putHrQuitReasonsId = (
  /** A UUID string identifying this Quit Reason. */
  id: string,
  requestBody: QuitReasonRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<QuitReason>> => {
  return Http.putRequest(
    template(putHrQuitReasonsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putHrQuitReasonsId.key = \\"/hr/quit-reasons-/{id}/\\";

export const putHrQuitRecordsId = (
  /** A UUID string identifying this Quit Record. */
  id: string,
  requestBody: QuitRecordRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<QuitRecord>> => {
  return Http.putRequest(
    template(putHrQuitRecordsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putHrQuitRecordsId.key = \\"/hr/quit-records/{id}/\\";

export const putHrSalariesId = (
  /** A UUID string identifying this Salary. */
  id: string,
  requestBody: SalaryRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Salary>> => {
  return Http.putRequest(
    template(putHrSalariesId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putHrSalariesId.key = \\"/hr/salaries/{id}/\\";

export const putHrSalaryPermissionsId = (
  /** A unique integer value identifying this Project Salary Permission. */
  id: number,
  requestBody: ProjectSalaryPermissionRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ProjectSalaryPermission>> => {
  return Http.putRequest(
    template(putHrSalaryPermissionsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putHrSalaryPermissionsId.key = \\"/hr/salary-permissions/{id}/\\";

export const putProcurementAdvancePaymentsId = (
  /** A UUID string identifying this order advance payment. */
  id: string,
  requestBody: OrderAdvancePaymentRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<OrderAdvancePayment>> => {
  return Http.putRequest(
    template(putProcurementAdvancePaymentsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putProcurementAdvancePaymentsId.key = \\"/procurement/advance-payments/{id}/\\";

export const putProcurementInvoicesCounter__slug = (
  counter__slug: string,
  requestBody: InvoiceRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Invoice>> => {
  return Http.putRequest(
    template(putProcurementInvoicesCounter__slug.key, { counter__slug }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putProcurementInvoicesCounter__slug.key =
  \\"/procurement/invoices/{counter__slug}/\\";

export const putProcurementOrdersCounter__slug = (
  counter__slug: string,
  requestBody: OrderRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Order>> => {
  return Http.putRequest(
    template(putProcurementOrdersCounter__slug.key, { counter__slug }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putProcurementOrdersCounter__slug.key = \\"/procurement/orders/{counter__slug}/\\";

export const putProcurementRequestTypesId = (
  /** A UUID string identifying this request type. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<RequestType>> => {
  return Http.putRequest(
    template(putProcurementRequestTypesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putProcurementRequestTypesId.key = \\"/procurement/request-types/{id}/\\";

export const putProcurementRequestsCounter__slug = (
  counter__slug: string,
  requestBody: RequestRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Request>> => {
  return Http.putRequest(
    template(putProcurementRequestsCounter__slug.key, { counter__slug }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putProcurementRequestsCounter__slug.key =
  \\"/procurement/requests/{counter__slug}/\\";

export const putProcurementSpecialInvoiceTypesId = (
  /** A UUID string identifying this special invoice type. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<SpecialInvoiceType>> => {
  return Http.putRequest(
    template(putProcurementSpecialInvoiceTypesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putProcurementSpecialInvoiceTypesId.key =
  \\"/procurement/special-invoice-types/{id}/\\";

export const putProcurementSpecialInvoicesCounter__slug = (
  counter__slug: string,
  requestBody: SpecialInvoiceRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<SpecialInvoice>> => {
  return Http.putRequest(
    template(putProcurementSpecialInvoicesCounter__slug.key, { counter__slug }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putProcurementSpecialInvoicesCounter__slug.key =
  \\"/procurement/special-invoices/{counter__slug}/\\";

export const putProjectsAccountingtypesId = (
  /** A UUID string identifying this accounting type. */
  id: string,
  requestBody: AccountingTypeRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<AccountingType>> => {
  return Http.putRequest(
    template(putProjectsAccountingtypesId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putProjectsAccountingtypesId.key = \\"/projects/accountingtypes/{id}/\\";

export const putProjectsCitiesId = (
  /** A UUID string identifying this city. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<City>> => {
  return Http.putRequest(
    template(putProjectsCitiesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putProjectsCitiesId.key = \\"/projects/cities/{id}/\\";

export const putProjectsCompaniesSlug = (
  slug: string,
  requestBody: CompanyRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Company>> => {
  return Http.putRequest(
    template(putProjectsCompaniesSlug.key, { slug }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putProjectsCompaniesSlug.key = \\"/projects/companies/{slug}/\\";

export const putProjectsCountriesId = (
  /** A UUID string identifying this country. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Country>> => {
  return Http.putRequest(
    template(putProjectsCountriesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putProjectsCountriesId.key = \\"/projects/countries/{id}/\\";

export const putProjectsDistrictsId = (
  /** A UUID string identifying this district. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<District>> => {
  return Http.putRequest(
    template(putProjectsDistrictsId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putProjectsDistrictsId.key = \\"/projects/districts/{id}/\\";

export const putProjectsProjectsSlug = (
  slug: string,
  requestBody: ProjectRequest,
  queryParams?: PutProjectsProjectsSlugQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Project>> => {
  return Http.putRequest(
    template(putProjectsProjectsSlug.key, { slug }),
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putProjectsProjectsSlug.key = \\"/projects/projects/{slug}/\\";

export const putProjectsProjecttypesId = (
  /** A UUID string identifying this project type. */
  id: string,
  requestBody: ProjectTypeParamRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ProjectTypeParam>> => {
  return Http.putRequest(
    template(putProjectsProjecttypesId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putProjectsProjecttypesId.key = \\"/projects/projecttypes/{id}/\\";

export const putProjectsResponsiblesId = (
  /** A UUID string identifying this responsible. */
  id: string,
  requestBody: ResponsibleRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Responsible>> => {
  return Http.putRequest(
    template(putProjectsResponsiblesId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putProjectsResponsiblesId.key = \\"/projects/responsibles/{id}/\\";

export const putProjectsResponsibletypesId = (
  /** A UUID string identifying this responsible type. */
  id: string,
  requestBody: ResponsibleTypeParamRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ResponsibleTypeParam>> => {
  return Http.putRequest(
    template(putProjectsResponsibletypesId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putProjectsResponsibletypesId.key = \\"/projects/responsibletypes/{id}/\\";

export const putRatesRatesId = (
  /** A unique integer value identifying this rate. */
  id: number,
  requestBody: RateRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Rate>> => {
  return Http.putRequest(
    template(putRatesRatesId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putRatesRatesId.key = \\"/rates/rates/{id}/\\";

export const putSubcontractsContractCategoriesId = (
  /** A UUID string identifying this contract category. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ContractCategory>> => {
  return Http.putRequest(
    template(putSubcontractsContractCategoriesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putSubcontractsContractCategoriesId.key =
  \\"/subcontracts/contract-categories/{id}/\\";

export const putSubcontractsContractCollateralReasonId = (
  /** A UUID string identifying this contract collateral reason. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ContractCollateralReason>> => {
  return Http.putRequest(
    template(putSubcontractsContractCollateralReasonId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putSubcontractsContractCollateralReasonId.key =
  \\"/subcontracts/contract-collateral-reason/{id}/\\";

export const putSubcontractsContractCollateralStatusId = (
  /** A UUID string identifying this contract collateral status. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ContractCollateralStatus>> => {
  return Http.putRequest(
    template(putSubcontractsContractCollateralStatusId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putSubcontractsContractCollateralStatusId.key =
  \\"/subcontracts/contract-collateral-status/{id}/\\";

export const putSubcontractsContractCollateralTypesId = (
  /** A UUID string identifying this contract collateral type. */
  id: string,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ContractCollateralType>> => {
  return Http.putRequest(
    template(putSubcontractsContractCollateralTypesId.key, { id }),
    undefined,
    undefined,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putSubcontractsContractCollateralTypesId.key =
  \\"/subcontracts/contract-collateral-types/{id}/\\";

export const putSubcontractsContractsCounter__slug = (
  counter__slug: string,
  requestBody: ContractRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Contract>> => {
  return Http.putRequest(
    template(putSubcontractsContractsCounter__slug.key, { counter__slug }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putSubcontractsContractsCounter__slug.key =
  \\"/subcontracts/contracts/{counter__slug}/\\";

export const putSubcontractsDeductionReturnsCounter__slug = (
  counter__slug: string,
  requestBody: DeductionReturnRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<DeductionReturn>> => {
  return Http.putRequest(
    template(putSubcontractsDeductionReturnsCounter__slug.key, {
      counter__slug,
    }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putSubcontractsDeductionReturnsCounter__slug.key =
  \\"/subcontracts/deduction-returns/{counter__slug}/\\";

export const putSubcontractsProgressesCounter__slug = (
  counter__slug: string,
  requestBody: ProgressRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Progress>> => {
  return Http.putRequest(
    template(putSubcontractsProgressesCounter__slug.key, { counter__slug }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putSubcontractsProgressesCounter__slug.key =
  \\"/subcontracts/progresses/{counter__slug}/\\";

export const putSubcontractsRevisionsId = (
  /** A UUID string identifying this contract revision. */
  id: string,
  requestBody: RevisionRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Revision>> => {
  return Http.putRequest(
    template(putSubcontractsRevisionsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putSubcontractsRevisionsId.key = \\"/subcontracts/revisions/{id}/\\";

export const putSuppliersAccountingCodesId = (
  /** A UUID string identifying this supplier accounting code. */
  id: string,
  requestBody: SupplierAccountingCodeRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<SupplierAccountingCode>> => {
  return Http.putRequest(
    template(putSuppliersAccountingCodesId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putSuppliersAccountingCodesId.key = \\"/suppliers/accounting-codes/{id}/\\";

export const putSuppliersBankAccountsId = (
  /** A UUID string identifying this supplier bank account. */
  id: string,
  requestBody: SupplierBankAccountRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<SupplierBankAccount>> => {
  return Http.putRequest(
    template(putSuppliersBankAccountsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putSuppliersBankAccountsId.key = \\"/suppliers/bank-accounts/{id}/\\";

export const putSuppliersContactsId = (
  /** A UUID string identifying this supplier contact. */
  id: string,
  requestBody: ContactRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Contact>> => {
  return Http.putRequest(
    template(putSuppliersContactsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putSuppliersContactsId.key = \\"/suppliers/contacts/{id}/\\";

export const putSuppliersReviewAnswersId = (
  /** A UUID string identifying this answer. */
  id: string,
  requestBody: AnswerRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Answer>> => {
  return Http.putRequest(
    template(putSuppliersReviewAnswersId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putSuppliersReviewAnswersId.key = \\"/suppliers/review-answers/{id}/\\";

export const putSuppliersReviewFormsSlug = (
  slug: string,
  requestBody: ReviewRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Review>> => {
  return Http.putRequest(
    template(putSuppliersReviewFormsSlug.key, { slug }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putSuppliersReviewFormsSlug.key = \\"/suppliers/review-forms/{slug}/\\";

export const putSuppliersReviewFormsSlugAnswers = (
  slug: string,
  requestBody: ReviewRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Review>> => {
  return Http.putRequest(
    template(putSuppliersReviewFormsSlugAnswers.key, { slug }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putSuppliersReviewFormsSlugAnswers.key =
  \\"/suppliers/review-forms/{slug}/answers/\\";

export const putSuppliersReviewQuestionsId = (
  /** A UUID string identifying this review question. */
  id: string,
  requestBody: ReviewQuestionRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ReviewQuestion>> => {
  return Http.putRequest(
    template(putSuppliersReviewQuestionsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putSuppliersReviewQuestionsId.key = \\"/suppliers/review-questions/{id}/\\";

export const putSuppliersReviewTemplatesSlug = (
  slug: string,
  requestBody: ReviewTemplateRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ReviewTemplate>> => {
  return Http.putRequest(
    template(putSuppliersReviewTemplatesSlug.key, { slug }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putSuppliersReviewTemplatesSlug.key = \\"/suppliers/review-templates/{slug}/\\";

export const putSuppliersReviewTemplatesSlugQuestions = (
  slug: string,
  requestBody: ReviewTemplateRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ReviewTemplate>> => {
  return Http.putRequest(
    template(putSuppliersReviewTemplatesSlugQuestions.key, { slug }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putSuppliersReviewTemplatesSlugQuestions.key =
  \\"/suppliers/review-templates/{slug}/questions/\\";

export const putSuppliersSupplierActivityTypesId = (
  /** A UUID string identifying this supplier activity type. */
  id: string,
  requestBody: ActivityTypeRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<ActivityType>> => {
  return Http.putRequest(
    template(putSuppliersSupplierActivityTypesId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putSuppliersSupplierActivityTypesId.key =
  \\"/suppliers/supplier-activity-types/{id}/\\";

export const putSuppliersSupplierBranchesId = (
  /** A UUID string identifying this supplier branch. */
  id: string,
  requestBody: BranchRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Branch>> => {
  return Http.putRequest(
    template(putSuppliersSupplierBranchesId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putSuppliersSupplierBranchesId.key = \\"/suppliers/supplier-branches/{id}/\\";

export const putSuppliersSupplierTypesId = (
  /** A UUID string identifying this supplier type. */
  id: string,
  requestBody: SupplierTypeRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<SupplierType>> => {
  return Http.putRequest(
    template(putSuppliersSupplierTypesId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putSuppliersSupplierTypesId.key = \\"/suppliers/supplier-types/{id}/\\";

export const putSuppliersSuppliersSlug = (
  slug: string,
  requestBody: SupplierRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Supplier>> => {
  return Http.putRequest(
    template(putSuppliersSuppliersSlug.key, { slug }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putSuppliersSuppliersSlug.key = \\"/suppliers/suppliers/{slug}/\\";

export const putWarehouseProductsId = (
  /** A UUID string identifying this product. */
  id: string,
  requestBody: ProductCreateRequest,
  queryParams: PutWarehouseProductsIdQueryParams,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Product>> => {
  return Http.putRequest(
    template(putWarehouseProductsId.key, { id }),
    queryParams,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putWarehouseProductsId.key = \\"/warehouse/products/{id}/\\";

export const putWarehouseTransactionsId = (
  /** A UUID string identifying this transaction. */
  id: string,
  requestBody: TransactionListCreateRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<TransactionList>> => {
  return Http.putRequest(
    template(putWarehouseTransactionsId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putWarehouseTransactionsId.key = \\"/warehouse/transactions/{id}/\\";

export const putWarehouseWarehousesId = (
  /** A UUID string identifying this warehouse. */
  id: string,
  requestBody: WarehouseRequest,
  configOverride?: AxiosRequestConfig,
): Promise<SwaggerResponse<Warehouse>> => {
  return Http.putRequest(
    template(putWarehouseWarehousesId.key, { id }),
    undefined,
    requestBody,
    _CONSTANT3,
    overrideConfig(_CONSTANT2, configOverride),
  );
};

/** Key is end point string without base url */
putWarehouseWarehousesId.key = \\"/warehouse/warehouses/{id}/\\";
export const _CONSTANT0 = {
  headers: {
    \\"Content-Type\\": \\"application/json\\",
    Accept: \\"application/vnd.oai.openapi\\",
  },
};
export const _CONSTANT1 = [{ cookieAuth: [] }, { basicAuth: [] }, {}];
export const _CONSTANT2 = {
  headers: {
    \\"Content-Type\\": \\"application/json\\",
    Accept: \\"application/json\\",
  },
};
export const _CONSTANT3 = [{ cookieAuth: [] }, { basicAuth: [] }];
export const _CONSTANT4 = {
  headers: {
    \\"Content-Type\\": \\"multipart/form-data\\",
    Accept: \\"application/json\\",
  },
};
",
  "types.ts": "//@ts-nocheck
/**
 * AUTO_GENERATED Do not change this file directly, use config.ts file instead
 *
 * @version 6
 */

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface Account {
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_credit: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_credit_dc: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_debit: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_debit_dc: string;
  /** - Format: date-time */
  created: string;
  currency: Currency;
  has_transactions: boolean;
  /** - Format: uuid */
  id: string;
  is_default_currency: boolean;
  name: string;
  project: ProjectName;
  title: string;
  type: string;
  /** - MaxLength: 20 */
  accounting_code?: string;
  comments?: string;
  created_by?: number;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface AccountName {
  /** - Format: uuid */
  id: string;
  name: string;
}

/** - \`CUSTOMER\` - customer \`VENDOR\` - vendor \`SUBCONTRACTOR\` - subcontractor */

export type AccountOwnerEnum = \\"CUSTOMER\\" | \\"VENDOR\\" | \\"SUBCONTRACTOR\\";

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface AccountRequest {
  /** - Format: uuid */
  currency: string;
  /** - Format: uuid */
  project: string;
  /** - MaxLength: 20 */
  accounting_code?: string;
  comments?: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface AccountTitleCurrencyBalance {
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance: string;
  currency: Currency;
  /** - Format: uuid */
  id: string;
  title: string;
}

export interface AccountType {
  id: string;
  value: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface AccountingType {
  /** - Format: uuid */
  id: string;
  value: string;
  /**
   * Value [en]
   *
   * - MaxLength: 255
   */
  value_en?: string;
  /**
   * Value [tr]
   *
   * - MaxLength: 255
   */
  value_tr?: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface AccountingTypeRequest {
  /**
   * Value [en]
   *
   * - MaxLength: 255
   */
  value_en?: string;
  /**
   * Value [tr]
   *
   * - MaxLength: 255
   */
  value_tr?: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface AccountingTypeValue {
  /** - Format: uuid */
  id: string;
  value: string;
}

export interface Activity {
  /** - MaxLength: 2 */
  code: string;
  /** - Format: date-time */
  created: string;
  depth: number;
  full_code: string;
  /** - Format: uuid */
  id: string;
  /** - Format: date-time */
  modified: string;
  name: string;
  numchild: number;
  parent_id: string;
  accounting_codes?: CodeAccountingCode[];
  /**
   * Name [en]
   *
   * - MaxLength: 255
   */
  name_en?: string;
  /**
   * Name [tr]
   *
   * - MaxLength: 255
   */
  name_tr?: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface ActivityList {
  /** - MaxLength: 2 */
  code: string;
  full_code: string;
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  name: string;
  numchild: number;
  results?: any[];
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface ActivityNameCode {
  /** - MaxLength: 2 */
  code: string;
  full_code: string;
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  name: string;
}

export interface ActivityRequest {
  /**
   * - MaxLength: 2
   * - MinLength: 1
   */
  code: string;
  accounting_codes?: PatchedCodeAccountingCodeRequest[];
  /**
   * Name [en]
   *
   * - MaxLength: 255
   */
  name_en?: string;
  /**
   * Name [tr]
   *
   * - MaxLength: 255
   */
  name_tr?: string;
}

export interface ActivityType {
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  value: string;
}

export interface ActivityTypeRequest {
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  value: string;
}

export interface Answer {
  /** - Format: date-time */
  created: string;
  /** - Format: uuid */
  id: string;
  /**
   * - Minimum: 1
   * - Max: 32767
   */
  maximum_score: number;
  /** - Format: date-time */
  modified: string;
  question: string;
  created_by?: number;
  modified_by?: number;
  /** - Max: 32767 */
  score?: number;
}

export interface AnswerRequest {
  /** - Max: 32767 */
  score?: number;
}

export interface ApprovalHistory {
  approver: UserNameAvatar;
  /** - Format: uuid */
  id: string;
  transactioner: UserNameAvatar;
  /** - MaxLength: 50 */
  destination_status?: string;
  /** Status */
  direction?: ApprovalHistoryDirectionEnum;
  note?: string;
  /** - MaxLength: 50 */
  source_status?: string;
  /** - Format: date-time */
  transaction_date?: string;
}

/** - \`PENDING\` - Pending \`REJECTED\` - Reject \`APPROVED\` - Approve */

export type ApprovalHistoryDirectionEnum = \\"PENDING\\" | \\"REJECTED\\" | \\"APPROVED\\";

export interface ApproveSerializerForContractRequest {
  approval_context: ContractRequest;
  approver: number;
  as_user: number;
  /** - Format: uuid */
  transition: string;
  note?: string;
}

export interface ApproveSerializerForDeductionReturnRequest {
  approval_context: DeductionReturnRequest;
  approver: number;
  as_user: number;
  /** - Format: uuid */
  transition: string;
  note?: string;
}

export interface ApproveSerializerForIncomeInvoiceRequest {
  approval_context: IncomeInvoiceRequest;
  approver: number;
  as_user: number;
  /** - Format: uuid */
  transition: string;
  note?: string;
}

export interface ApproveSerializerForInvoiceRequest {
  approval_context: InvoiceRequest;
  approver: number;
  as_user: number;
  /** - Format: uuid */
  transition: string;
  note?: string;
}

export interface ApproveSerializerForOrderRequest {
  approval_context: OrderRequest;
  approver: number;
  as_user: number;
  /** - Format: uuid */
  transition: string;
  note?: string;
}

export interface ApproveSerializerForProgressRequest {
  approval_context: ProgressRequest;
  approver: number;
  as_user: number;
  /** - Format: uuid */
  transition: string;
  note?: string;
}

export interface ApproveSerializerForRequestRequest {
  approval_context: RequestRequest;
  approver: number;
  as_user: number;
  /** - Format: uuid */
  transition: string;
  note?: string;
}

export interface ApproveSerializerForSpecialInvoiceRequest {
  approval_context: SpecialInvoiceRequest;
  approver: number;
  as_user: number;
  /** - Format: uuid */
  transition: string;
  note?: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface ApprovedOrderItem {
  activity_code: string;
  activity_name: string;
  approver: UserNameAvatar;
  cancel_reason: string;
  /** - Format: date-time */
  cancelled: string;
  cancelled_by: UserNameAvatar;
  company: string;
  description: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  expected_quantity: string;
  /** - Format: uuid */
  id: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  invoiced_quantity: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  ordered_quantity: string;
  project: string;
  resource_code: string;
  resource_name: string;
  status: ApprovedOrderItemStatusEnum;
  /** Supplier name */
  supplier: string;
  unit: string;
  wbs_code: string;
  wbs_name: string;
  counter?: string;
  currency?: string;
  request_no?: string;
  sort_order?: number;
}

/**
 * - \`NOT_INVOICED\` - Not yet invoiced \`PARTIALLY_INVOICED\` - Partially Invoiced
 *   \`COMPLETELY_INVOICED\` - Completely Invoiced \`CANCELLED\` - Order Cancelled
 */

export type ApprovedOrderItemStatusEnum =
  | \\"NOT_INVOICED\\"
  | \\"PARTIALLY_INVOICED\\"
  | \\"COMPLETELY_INVOICED\\"
  | \\"CANCELLED\\";

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface ApprovedRequestItem {
  activity_code: string;
  activity_name: string;
  approver: UserNameAvatar;
  cancel_reason: string;
  cancelled_by: UserNameAvatar;
  company: string;
  /** - Format: uuid */
  id: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  ordered_quantity: string;
  project: string;
  resource_code: string;
  resource_name: string;
  status: ApprovedRequestItemStatusEnum;
  unit: string;
  wbs_code: string;
  wbs_name: string;
  /**
   * Cancel Date
   *
   * - Format: date-time
   */
  cancelled?: string;
  counter?: string;
  description?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  quantity?: string;
  sort_order?: number;
}

/**
 * - \`NOT_ORDERED\` - Not yet ordered \`PARTIALLY_ORDERED\` - Partially Ordered
 *   \`COMPLETELY_ORDERED\` - Completely Ordered \`CANCELLED\` - Order Cancelled
 */

export type ApprovedRequestItemStatusEnum =
  | \\"NOT_ORDERED\\"
  | \\"PARTIALLY_ORDERED\\"
  | \\"COMPLETELY_ORDERED\\"
  | \\"CANCELLED\\";

export interface Attachment {
  /** - Format: uri */
  file: string;
  /** - Format: uuid */
  id: string;
  /** - Format: uuid */
  object_id: string;
  size: number;
  name?: string;
}

export interface AttachmentRequest {
  /** - Format: binary */
  file: string;
  /** - Format: uuid */
  object_id: string;
  /** - MinLength: 1 */
  name?: string;
}

export interface Avatar {
  /** - Format: uri */
  avatar: string;
}

export interface AvatarRequest {
  /** - Format: binary */
  avatar: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface BankAccount {
  bank: BankName;
  company: CompanyName;
  currency: Currency;
  has_transactions: boolean;
  /** - Format: uuid */
  id: string;
  payment_method: PaymentMethod;
  project: ProjectNameCompany;
  sub_type: BankAccountSubTypeEnum;
  /** - MaxLength: 255 */
  account_number?: string;
  /** - MaxLength: 20 */
  accounting_code?: string;
  /** - MaxLength: 255 */
  branch?: string;
  comments?: string;
  /** - MaxLength: 255 */
  iban?: string;
}

export interface BankAccountList {
  account_number: string;
  accounting_code: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_credit: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_credit_dc: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_debit: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_debit_dc: string;
  bank: string;
  branch: string;
  company: string;
  /** - Format: date-time */
  created: string;
  created_by: string;
  currency: string;
  iban: string;
  /** - Format: uuid */
  id: string;
  name: string;
  project: string;
  sub_type: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface BankAccountRequest {
  /** - Format: uuid */
  bank: string;
  /** - Format: uuid */
  company: string;
  /** - Format: uuid */
  currency: string;
  /** - Format: uuid */
  payment_method: string;
  /** - Format: uuid */
  project: string;
  sub_type: BankAccountSubTypeEnum;
  /** - MaxLength: 255 */
  account_number?: string;
  /** - MaxLength: 20 */
  accounting_code?: string;
  /** - MaxLength: 255 */
  branch?: string;
  comments?: string;
  /** - MaxLength: 255 */
  iban?: string;
}

/**
 * - \`TERM_DEPOSIT\` - Term Deposit \`CURRENT_ACCOUNT\` - Current Account
 *   \`CREDIT_CARD\` - Credit Card \`LEASING\` - Leasing \`FUNDING\` - Funding \`BOND\`
 *   - Bond
 */

export type BankAccountSubTypeEnum =
  | \\"TERM_DEPOSIT\\"
  | \\"CURRENT_ACCOUNT\\"
  | \\"CREDIT_CARD\\"
  | \\"LEASING\\"
  | \\"FUNDING\\"
  | \\"BOND\\";

export interface BankName {
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  value: string;
}

export interface BankNameRequest {
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  value: string;
}

export type BlankEnum = \\"\\";

/**
 * - \`A+\` - A Positive \`A-\` - A Negative \`B+\` - B Positive \`B-\` - B Negative \`AB+\`
 *   - AB Positive \`AB-\` - AB Negative \`O+\` - O Positive \`O-\` - O Negative
 */

export type BloodTypeEnum =
  | \\"A+\\"
  | \\"A-\\"
  | \\"B+\\"
  | \\"B-\\"
  | \\"AB+\\"
  | \\"AB-\\"
  | \\"O+\\"
  | \\"O-\\";

export interface Branch {
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  value: string;
}

export interface BranchRequest {
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  value: string;
}

export interface CancellableRequest {
  ids: any[];
  /** - MinLength: 1 */
  reason: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface CashAccount {
  /** - MaxLength: 255 */
  cash_account_name: string;
  company: CompanyName;
  currency: Currency;
  has_transactions: boolean;
  /** - Format: uuid */
  id: string;
  payment_method: PaymentMethod;
  project: ProjectNameCompany;
  sub_type: CashAccountSubTypeEnum;
  /** - MaxLength: 20 */
  accounting_code?: string;
  comments?: string;
}

export interface CashAccountList {
  accounting_code: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_credit: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_credit_dc: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_debit: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_debit_dc: string;
  company: string;
  /** - Format: date-time */
  created: string;
  created_by: string;
  currency: string;
  /** - Format: uuid */
  id: string;
  name: string;
  project: string;
  sub_type: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface CashAccountRequest {
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  cash_account_name: string;
  /** - Format: uuid */
  company: string;
  /** - Format: uuid */
  currency: string;
  /** - Format: uuid */
  payment_method: string;
  /** - Format: uuid */
  project: string;
  sub_type: CashAccountSubTypeEnum;
  /** - MaxLength: 20 */
  accounting_code?: string;
  comments?: string;
}

/** - \`CASH\` - Cash \`WORK_ADVANCE\` - Work Advance \`OTHER\` - Other */

export type CashAccountSubTypeEnum = \\"CASH\\" | \\"WORK_ADVANCE\\" | \\"OTHER\\";

export interface City {
  /** - Format: uuid */
  id: string;
  name: string;
}

export interface CodeAccountingCode {
  /** - MaxLength: 20 */
  code: string;
  /** - Format: uuid */
  id: string;
  /** - Format: uuid */
  type: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface Company {
  city: City;
  country: Country;
  /** - Format: date-time */
  created: string;
  district: District;
  etedarik_api_key_valid: string;
  /** - Format: uuid */
  id: string;
  /** - Format: date-time */
  modified: string;
  /** - MaxLength: 255 */
  name: string;
  /**
   * Haritadan seçim yaparak, profilinizde konumunuzun görünmesini
   * sağlayabilirsiniz.
   *
   * - MaxLength: 255
   */
  address?: string;
  /**
   * Commercial ID No
   *
   * - MaxLength: 255
   */
  commercial_reg_id?: string;
  /**
   * - MaxLength: 4
   * - MinLength: 4
   */
  company_code?: string;
  created_by?: number;
  /**
   * E-mail (1)
   *
   * - Format: email
   * - MaxLength: 255
   */
  email1?: string;
  /**
   * E-mail (2)
   *
   * - Format: email
   * - MaxLength: 255
   */
  email2?: string;
  /**
   * Fax (1)
   *
   * - MaxLength: 255
   */
  fax?: string;
  /**
   * Coordinates
   *
   * - MaxLength: 255
   * - Pattern: ^-?[0-9]+.[0-9]+,-?[0-9]+.[0-9]+$
   */
  geolocation?: string;
  /** - MaxLength: 255 */
  legal_name?: string;
  /**
   * - MaxLength: 16
   * - MinLength: 16
   */
  mersis_no?: string;
  modified_by?: number;
  /**
   * Phone No (1)
   *
   * - MaxLength: 255
   */
  phone1?: string;
  /**
   * Phone No (2)
   *
   * - MaxLength: 255
   */
  phone2?: string;
  /** - Pattern: ^[-a-zA-Z0-9_]+$ */
  slug?: string;
  /**
   * Tax/TC ID No
   *
   * - MaxLength: 20
   */
  tax_no?: string;
  /** - MaxLength: 255 */
  tax_office?: string;
  /**
   * Website
   *
   * - Format: uri
   * - MaxLength: 255
   */
  website_url?: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface CompanyAvailable {
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  name: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface CompanyName {
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  name: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface CompanyNameCode {
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  name: string;
  /**
   * - MaxLength: 4
   * - MinLength: 4
   */
  company_code?: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface CompanyNameRequest {
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  name: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface CompanyRequest {
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  name: string;
  /**
   * Haritadan seçim yaparak, profilinizde konumunuzun görünmesini
   * sağlayabilirsiniz.
   *
   * - MaxLength: 255
   */
  address?: string;
  /**
   * Commercial ID No
   *
   * - MaxLength: 255
   */
  commercial_reg_id?: string;
  /**
   * - MaxLength: 4
   * - MinLength: 4
   */
  company_code?: string;
  /**
   * E-mail (1)
   *
   * - Format: email
   * - MaxLength: 255
   */
  email1?: string;
  /**
   * E-mail (2)
   *
   * - Format: email
   * - MaxLength: 255
   */
  email2?: string;
  /**
   * Fax (1)
   *
   * - MaxLength: 255
   */
  fax?: string;
  /**
   * Coordinates
   *
   * - MaxLength: 255
   * - Pattern: ^-?[0-9]+.[0-9]+,-?[0-9]+.[0-9]+$
   */
  geolocation?: string;
  /** - MaxLength: 255 */
  legal_name?: string;
  /**
   * - MaxLength: 16
   * - MinLength: 16
   */
  mersis_no?: string;
  /**
   * Phone No (1)
   *
   * - MaxLength: 255
   */
  phone1?: string;
  /**
   * Phone No (2)
   *
   * - MaxLength: 255
   */
  phone2?: string;
  /**
   * Tax/TC ID No
   *
   * - MaxLength: 20
   */
  tax_no?: string;
  /** - MaxLength: 255 */
  tax_office?: string;
  /**
   * Website
   *
   * - Format: uri
   * - MaxLength: 255
   */
  website_url?: string;
}

export interface ConsolidatedPermissions {
  auth?: {
    group?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    permission?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    user?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
  };
  authentication?: { group?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[] };
  budget?: { budget?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"superreader\\" | \\"view\\"[] };
  codes?: {
    accountingcode?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    activity?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"superreader\\" | \\"view\\"[];
    resource?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"superreader\\" | \\"view\\"[];
    wbs?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"superreader\\" | \\"view\\"[];
  };
  finance?: {
    account?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    bankaccount?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    bondplannedpayment?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    bondplannedrevenue?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    bondrealizedpayment?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    bondrealizedrevenue?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    cashaccount?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    chequeplannedpayment?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    chequeplannedrevenue?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    chequerealizedpayment?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    chequerealizedrevenue?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    expense?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"superreader\\" | \\"view\\"[];
    financialinstrumentlist?:
      | \\"add\\"
      | \\"change\\"
      | \\"delete\\"
      | \\"superreader\\"
      | \\"view\\"[];
    incomeinvoice?:
      | \\"add\\"
      | \\"approve\\"
      | \\"change\\"
      | \\"delete\\"
      | \\"superreader\\"
      | \\"view\\"[];
    incomeinvoicecategory?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    incomeinvoiceitem?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    incomeinvoiceplannedpayment?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    incomeinvoicerealizedpayment?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    incomeinvoiceserial?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    instrumentstatechange?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    paymentbond?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    paymentcheque?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    paymentdetail?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    paymentplan?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"superreader\\" | \\"view\\"[];
    revenuebond?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    revenuecheque?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    revenuedetail?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    revenueplan?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"superreader\\" | \\"view\\"[];
    slip?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    supplieraccount?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    transaction?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"superreader\\" | \\"view\\"[];
  };
  hr?: {
    crew?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    location?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    maindepartment?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    mainposition?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    person?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"superreader\\" | \\"view\\"[];
    profession?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    projectsalarypermission?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    quitreason?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    quitrecord?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    salary?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    subdepartment?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    subposition?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
  };
  procurement?: {
    invoice?:
      | \\"add\\"
      | \\"approve\\"
      | \\"canapprove\\"
      | \\"change\\"
      | \\"delete\\"
      | \\"superreader\\"
      | \\"view\\"[];
    invoiceitem?:
      | \\"add\\"
      | \\"cancel\\"
      | \\"change\\"
      | \\"delete\\"
      | \\"superreader\\"
      | \\"uncancel\\"
      | \\"view\\"[];
    invoiceplannedpayment?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    invoicerealizedpayment?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    order?:
      | \\"add\\"
      | \\"approve\\"
      | \\"canapprove\\"
      | \\"change\\"
      | \\"delete\\"
      | \\"superreader\\"
      | \\"view\\"[];
    orderadvancepayment?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    orderadvancerealizedpayment?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    orderitem?:
      | \\"add\\"
      | \\"cancel\\"
      | \\"change\\"
      | \\"delete\\"
      | \\"superreader\\"
      | \\"uncancel\\"
      | \\"view\\"[];
    orderplannedpayment?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    procurementrequest?:
      | \\"add\\"
      | \\"add\\"
      | \\"approve\\"
      | \\"approve\\"
      | \\"canapprove\\"
      | \\"change\\"
      | \\"change\\"
      | \\"delete\\"
      | \\"delete\\"
      | \\"superreader\\"
      | \\"superreader\\"
      | \\"view\\"
      | \\"view\\"[];
    requestitem?:
      | \\"add\\"
      | \\"cancel\\"
      | \\"change\\"
      | \\"delete\\"
      | \\"superreader\\"
      | \\"uncancel\\"
      | \\"view\\"[];
    requesttypeparam?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    specialinvoice?:
      | \\"add\\"
      | \\"approve\\"
      | \\"canapprove\\"
      | \\"change\\"
      | \\"delete\\"
      | \\"superreader\\"
      | \\"view\\"[];
    specialinvoiceitem?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"superreader\\" | \\"view\\"[];
    specialinvoiceplannedpayment?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    specialinvoicerealizedpayment?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    specialinvoicetype?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    tax?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"superreader\\" | \\"view\\"[];
  };
  projects?: {
    accountingtypeparam?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    company?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"superreader\\" | \\"view\\"[];
    project?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"superreader\\" | \\"view\\"[];
    projecttypeparam?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    responsible?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"superreader\\" | \\"view\\"[];
    responsibletypeparam?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
  };
  reporting?: {
    cashreports?: \\"superreader\\" | \\"view\\"[];
    costreports?: \\"superreader\\" | \\"view\\"[];
    incomereports?: \\"superreader\\" | \\"view\\"[];
  };
  subcontracts?: {
    contract?:
      | \\"add\\"
      | \\"approve\\"
      | \\"canapprove\\"
      | \\"change\\"
      | \\"delete\\"
      | \\"superreader\\"
      | \\"view\\"[];
    contractadvancepayment?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    contractadvancerealizedpayment?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    contractcategory?:
      | \\"add\\"
      | \\"add\\"
      | \\"change\\"
      | \\"change\\"
      | \\"delete\\"
      | \\"delete\\"
      | \\"view\\"
      | \\"view\\"[];
    contractcollateral?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    contractcollateralreason?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    contractcollateralstatus?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    contractcollateraltype?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    contractdeduction?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    contractitem?:
      | \\"add\\"
      | \\"cancel\\"
      | \\"change\\"
      | \\"delete\\"
      | \\"superreader\\"
      | \\"uncancel\\"
      | \\"view\\"[];
    contractitembase?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"superreader\\" | \\"view\\"[];
    contractplannedpayment?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    deductionreturn?:
      | \\"add\\"
      | \\"approve\\"
      | \\"canapprove\\"
      | \\"change\\"
      | \\"delete\\"
      | \\"superreader\\"
      | \\"view\\"[];
    deductionreturnplannedpayment?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    deductionreturnrealizedpayment?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    progress?:
      | \\"add\\"
      | \\"approve\\"
      | \\"canapprove\\"
      | \\"change\\"
      | \\"delete\\"
      | \\"superreader\\"
      | \\"view\\"[];
    progressaddition?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"superreader\\" | \\"view\\"[];
    progressadditiontype?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    progressdeduction?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"superreader\\" | \\"view\\"[];
    progressdeductiontype?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    progressitem?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"superreader\\" | \\"view\\"[];
    progressplannedpayment?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    progressrealizedpayment?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    revision?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"superreader\\" | \\"view\\"[];
  };
  suppliers?: {
    answer?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"superreader\\" | \\"view\\"[];
    review?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"superreader\\" | \\"view\\"[];
    reviewquestion?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    reviewtemplate?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"superreader\\" | \\"view\\"[];
    supplier?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"superreader\\" | \\"view\\"[];
    supplieraccountingcode?:
      | \\"add\\"
      | \\"change\\"
      | \\"delete\\"
      | \\"superreader\\"
      | \\"view\\"[];
    supplieractivitytype?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    supplierbankaccount?:
      | \\"add\\"
      | \\"change\\"
      | \\"delete\\"
      | \\"superreader\\"
      | \\"view\\"[];
    supplierbranch?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    suppliercontact?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"superreader\\" | \\"view\\"[];
    suppliertype?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
  };
  warehouse?: {
    product?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"superreader\\" | \\"view\\"[];
    slip?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"superreader\\" | \\"view\\"[];
    slipparent?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"view\\"[];
    warehouse?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"superreader\\" | \\"view\\"[];
    warehousetransaction?:
      | \\"add\\"
      | \\"add\\"
      | \\"change\\"
      | \\"change\\"
      | \\"delete\\"
      | \\"delete\\"
      | \\"superreader\\"
      | \\"view\\"
      | \\"view\\"[];
    waybill?: \\"add\\" | \\"change\\" | \\"delete\\" | \\"superreader\\" | \\"view\\"[];
  };
}

export interface Contact {
  /** - Format: date-time */
  created: string;
  /** - Format: uuid */
  id: string;
  /** - Format: date-time */
  modified: string;
  /**
   * Name and surname
   *
   * - MaxLength: 255
   */
  name: string;
  created_by?: number;
  /**
   * E-mail
   *
   * - Format: email
   * - MaxLength: 254
   */
  email?: string;
  modified_by?: number;
  /**
   * Internal phone
   *
   * - MaxLength: 20
   */
  phone_internal?: string;
  /**
   * Mobile phone
   *
   * - MaxLength: 20
   */
  phone_mobile?: string;
  /** - MaxLength: 255 */
  position?: string;
  supplier?: string;
}

export interface ContactRequest {
  /**
   * Name and surname
   *
   * - MaxLength: 255
   * - MinLength: 1
   */
  name: string;
  /**
   * E-mail
   *
   * - Format: email
   * - MaxLength: 254
   */
  email?: string;
  /**
   * Internal phone
   *
   * - MaxLength: 20
   */
  phone_internal?: string;
  /**
   * Mobile phone
   *
   * - MaxLength: 20
   */
  phone_mobile?: string;
  /** - MaxLength: 255 */
  position?: string;
  /** - MinLength: 1 */
  supplier?: string;
}

/**
 * Moves \`UniqueValidator\`'s from the validation stage to the save stage. It
 * solves the problem with nested validation for unique fields on update.
 *
 * If you want more details, you can read related issues and articles:
 * https://github.com/beda-software/drf-writable-nested/issues/1
 * http://www.django-rest-framework.org/api-guide/validators/#updating-nested-serializers
 *
 * Example of usage:
 *
 *         class Child(models.Model):
 *         field = models.CharField(unique=True)
 *
 *
 *     class Parent(models.Model):
 *         child = models.ForeignKey('Child')
 *
 *
 *     class ChildSerializer(UniqueFieldsMixin, serializers.ModelSerializer):
 *         class Meta:
 *             model = Child
 *
 *
 *     class ParentSerializer(NestedUpdateMixin, serializers.ModelSerializer):
 *         child = ChildSerializer()
 *
 *         class Meta:
 *             model = Parent
 *
 * Note: \`UniqueFieldsMixin\` must be applied only on the serializer which has
 * unique fields.
 *
 * Note: When you are using both mixins (\`UniqueFieldsMixin\` and
 * \`NestedCreateMixin\` or \`NestedUpdateMixin\`) you should put
 * \`UniqueFieldsMixin\` ahead.
 */

export interface Contract {
  approver: UserNameAvatar;
  attachments: Attachment[];
  category: ContractCategory;
  company: CompanyNameCode;
  counter: string;
  /** - Format: date-time */
  created: string;
  created_by: string;
  currency: Currency;
  /** - Format: uuid */
  id: string;
  is_approvable: boolean;
  is_editable: boolean;
  /** - Format: date-time */
  modified: string;
  modified_by: string;
  project: ProjectNameCodeCompany;
  revisions: ContractRevisionSummary[];
  slug: string;
  status: State;
  subcontractor: SupplierName;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  total_vat: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  totals: string;
  unsaved: boolean;
  advance_payments?: ContractAdvancePayment[];
  collaterals?: ContractCollateral[];
  /** - Format: date */
  contract_date?: string;
  contract_description?: string;
  /** - MaxLength: 255 */
  contract_number?: string;
  current_revision?: Revision;
  deductions?: ContractDeduction[];
  is_lump_sum?: boolean;
  main_contractor?: SupplierName;
  planned_payments?: ContractPlannedPayment[];
  /** - Format: date */
  work_end_date?: string;
  /** - Format: date */
  work_start_date?: string;
}

export interface ContractAdvancePayment {
  /** - Format: uuid */
  id: string;
  /** - Format: date */
  payment_date: string;
  payment_method: PaymentMethod;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount?: string;
}

export interface ContractAdvancePaymentRequest {
  /** - Format: date */
  payment_date: string;
  /** - Format: uuid */
  payment_method: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount?: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface ContractCategory {
  /** - Format: uuid */
  id: string;
  value: string;
}

/** Adds nested create feature */

export interface ContractCollateral {
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount: string;
  /** - Format: uuid */
  id: string;
  reason: ContractCollateralReason;
  status: ContractCollateralStatus;
  type: ContractCollateralType;
  /**
   * Date received
   *
   * - Format: date
   */
  received_at?: string;
  /** - Format: date */
  valid_until?: string;
}

export interface ContractCollateralList {
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount: string;
  company: string;
  contract: string;
  contract_slug: string;
  currency: string;
  expired: boolean;
  /** - Format: uuid */
  id: string;
  project: string;
  reason: string;
  status: string;
  subcontractor: string;
  type: string;
  /**
   * Date received
   *
   * - Format: date
   */
  received_at?: string;
  /** - Format: date */
  valid_until?: string;
}

export interface ContractCollateralReason {
  /** - Format: uuid */
  id: string;
  value: string;
}

/** Adds nested create feature */

export interface ContractCollateralRequest {
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount: string;
  /** - Format: uuid */
  reason: string;
  /** - Format: uuid */
  status: string;
  /** - Format: uuid */
  type: string;
  /**
   * Date received
   *
   * - Format: date
   */
  received_at?: string;
  /** - Format: date */
  valid_until?: string;
}

export interface ContractCollateralStatus {
  /** - Format: uuid */
  id: string;
  value: string;
}

export interface ContractCollateralType {
  /** - Format: uuid */
  id: string;
  value: string;
}

/**
 * Moves \`UniqueValidator\`'s from the validation stage to the save stage. It
 * solves the problem with nested validation for unique fields on update.
 *
 * If you want more details, you can read related issues and articles:
 * https://github.com/beda-software/drf-writable-nested/issues/1
 * http://www.django-rest-framework.org/api-guide/validators/#updating-nested-serializers
 *
 * Example of usage:
 *
 *         class Child(models.Model):
 *         field = models.CharField(unique=True)
 *
 *
 *     class Parent(models.Model):
 *         child = models.ForeignKey('Child')
 *
 *
 *     class ChildSerializer(UniqueFieldsMixin, serializers.ModelSerializer):
 *         class Meta:
 *             model = Child
 *
 *
 *     class ParentSerializer(NestedUpdateMixin, serializers.ModelSerializer):
 *         child = ChildSerializer()
 *
 *         class Meta:
 *             model = Parent
 *
 * Note: \`UniqueFieldsMixin\` must be applied only on the serializer which has
 * unique fields.
 *
 * Note: When you are using both mixins (\`UniqueFieldsMixin\` and
 * \`NestedCreateMixin\` or \`NestedUpdateMixin\`) you should put
 * \`UniqueFieldsMixin\` ahead.
 */

export interface ContractCreate {
  category: ContractCategory;
  company: CompanyNameCode;
  counter: string;
  currency: Currency;
  project: ProjectNameCodeCompany;
  revisions: RevisionCreate[];
  slug: string;
  subcontractor: SupplierName;
  advance_payments?: ContractAdvancePayment[];
  collaterals?: ContractCollateral[];
  /** - Format: date */
  contract_date?: string;
  contract_description?: string;
  /** - MaxLength: 255 */
  contract_number?: string;
  deductions?: ContractDeduction[];
  /** - Format: uuid */
  id?: string;
  is_lump_sum?: boolean;
  main_contractor?: SupplierName;
  planned_payments?: ContractPlannedPayment[];
  /** - Format: date */
  work_end_date?: string;
  /** - Format: date */
  work_start_date?: string;
}

/**
 * Moves \`UniqueValidator\`'s from the validation stage to the save stage. It
 * solves the problem with nested validation for unique fields on update.
 *
 * If you want more details, you can read related issues and articles:
 * https://github.com/beda-software/drf-writable-nested/issues/1
 * http://www.django-rest-framework.org/api-guide/validators/#updating-nested-serializers
 *
 * Example of usage:
 *
 *         class Child(models.Model):
 *         field = models.CharField(unique=True)
 *
 *
 *     class Parent(models.Model):
 *         child = models.ForeignKey('Child')
 *
 *
 *     class ChildSerializer(UniqueFieldsMixin, serializers.ModelSerializer):
 *         class Meta:
 *             model = Child
 *
 *
 *     class ParentSerializer(NestedUpdateMixin, serializers.ModelSerializer):
 *         child = ChildSerializer()
 *
 *         class Meta:
 *             model = Parent
 *
 * Note: \`UniqueFieldsMixin\` must be applied only on the serializer which has
 * unique fields.
 *
 * Note: When you are using both mixins (\`UniqueFieldsMixin\` and
 * \`NestedCreateMixin\` or \`NestedUpdateMixin\`) you should put
 * \`UniqueFieldsMixin\` ahead.
 */

export interface ContractCreateRequest {
  /** - Format: uuid */
  category: string;
  /** - Format: uuid */
  company: string;
  /** - Format: uuid */
  currency: string;
  /** - Format: uuid */
  project: string;
  revisions: RevisionCreateRequest[];
  /** - Format: uuid */
  subcontractor: string;
  advance_payments?: ContractAdvancePaymentRequest[];
  collaterals?: ContractCollateralRequest[];
  /** - Format: date */
  contract_date?: string;
  contract_description?: string;
  /** - MaxLength: 255 */
  contract_number?: string;
  deductions?: ContractDeductionRequest[];
  /** - Format: uuid */
  id?: string;
  is_lump_sum?: boolean;
  /** - Format: uuid */
  main_contractor?: string;
  planned_payments?: ContractPlannedPaymentRequest[];
  /** - Format: date */
  work_end_date?: string;
  /** - Format: date */
  work_start_date?: string;
}

/**
 * Moves \`UniqueValidator\`'s from the validation stage to the save stage. It
 * solves the problem with nested validation for unique fields on update.
 *
 * If you want more details, you can read related issues and articles:
 * https://github.com/beda-software/drf-writable-nested/issues/1
 * http://www.django-rest-framework.org/api-guide/validators/#updating-nested-serializers
 *
 * Example of usage:
 *
 *         class Child(models.Model):
 *         field = models.CharField(unique=True)
 *
 *
 *     class Parent(models.Model):
 *         child = models.ForeignKey('Child')
 *
 *
 *     class ChildSerializer(UniqueFieldsMixin, serializers.ModelSerializer):
 *         class Meta:
 *             model = Child
 *
 *
 *     class ParentSerializer(NestedUpdateMixin, serializers.ModelSerializer):
 *         child = ChildSerializer()
 *
 *         class Meta:
 *             model = Parent
 *
 * Note: \`UniqueFieldsMixin\` must be applied only on the serializer which has
 * unique fields.
 *
 * Note: When you are using both mixins (\`UniqueFieldsMixin\` and
 * \`NestedCreateMixin\` or \`NestedUpdateMixin\`) you should put
 * \`UniqueFieldsMixin\` ahead.
 */

export interface ContractDeduction {
  /** - Format: uuid */
  id: string;
  type: ProgressDeductionType;
  /** - Max: 100 */
  percentage?: number;
}

/**
 * Moves \`UniqueValidator\`'s from the validation stage to the save stage. It
 * solves the problem with nested validation for unique fields on update.
 *
 * If you want more details, you can read related issues and articles:
 * https://github.com/beda-software/drf-writable-nested/issues/1
 * http://www.django-rest-framework.org/api-guide/validators/#updating-nested-serializers
 *
 * Example of usage:
 *
 *         class Child(models.Model):
 *         field = models.CharField(unique=True)
 *
 *
 *     class Parent(models.Model):
 *         child = models.ForeignKey('Child')
 *
 *
 *     class ChildSerializer(UniqueFieldsMixin, serializers.ModelSerializer):
 *         class Meta:
 *             model = Child
 *
 *
 *     class ParentSerializer(NestedUpdateMixin, serializers.ModelSerializer):
 *         child = ChildSerializer()
 *
 *         class Meta:
 *             model = Parent
 *
 * Note: \`UniqueFieldsMixin\` must be applied only on the serializer which has
 * unique fields.
 *
 * Note: When you are using both mixins (\`UniqueFieldsMixin\` and
 * \`NestedCreateMixin\` or \`NestedUpdateMixin\`) you should put
 * \`UniqueFieldsMixin\` ahead.
 */

export interface ContractDeductionRequest {
  /** - Format: uuid */
  type: string;
  /** - Max: 100 */
  percentage?: number;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface ContractItem {
  activity: ActivityNameCode;
  /** - Format: uuid */
  id: string;
  resource: ResourceNameCodeUnits;
  selected: boolean;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  total: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  total_vat: string;
  unit: ResourceUnit;
  wbs: WBSNameCode;
  description?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  quantity?: string;
  sort_order?: number;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  unit_price?: string;
  /** - Max: 32767 */
  vat_ratio?: VatRatioChoices;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface ContractItemRequest {
  /** - Format: uuid */
  activity: string;
  /** - Format: uuid */
  id: string;
  /** - Format: uuid */
  resource: string;
  /** - Format: uuid */
  unit: string;
  /** - Format: uuid */
  wbs: string;
  description?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  quantity?: string;
  sort_order?: number;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  unit_price?: string;
  /** - Max: 32767 */
  vat_ratio?: VatRatioChoices;
}

/**
 * Moves \`UniqueValidator\`'s from the validation stage to the save stage. It
 * solves the problem with nested validation for unique fields on update.
 *
 * If you want more details, you can read related issues and articles:
 * https://github.com/beda-software/drf-writable-nested/issues/1
 * http://www.django-rest-framework.org/api-guide/validators/#updating-nested-serializers
 *
 * Example of usage:
 *
 *         class Child(models.Model):
 *         field = models.CharField(unique=True)
 *
 *
 *     class Parent(models.Model):
 *         child = models.ForeignKey('Child')
 *
 *
 *     class ChildSerializer(UniqueFieldsMixin, serializers.ModelSerializer):
 *         class Meta:
 *             model = Child
 *
 *
 *     class ParentSerializer(NestedUpdateMixin, serializers.ModelSerializer):
 *         child = ChildSerializer()
 *
 *         class Meta:
 *             model = Parent
 *
 * Note: \`UniqueFieldsMixin\` must be applied only on the serializer which has
 * unique fields.
 *
 * Note: When you are using both mixins (\`UniqueFieldsMixin\` and
 * \`NestedCreateMixin\` or \`NestedUpdateMixin\`) you should put
 * \`UniqueFieldsMixin\` ahead.
 */

export interface ContractList {
  approver: UserNameAvatar;
  company: string;
  counter: string;
  /** - Format: date-time */
  created: string;
  created_by: string;
  currency: string;
  /** - Format: uuid */
  id: string;
  /** - Format: date-time */
  modified: string;
  modified_by: string;
  project: string;
  slug: string;
  status: string;
  /** Supplier name */
  subcontractor: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  total_advance_payments: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  total_planned_payments: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  total_vat: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  totals: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  totals_with_vat: string;
}

export interface ContractPlannedPayment {
  /** - Format: uuid */
  id: string;
  /** - Format: date */
  payment_date: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount?: string;
  /** - Format: uuid */
  subcontract_progress?: string;
}

export interface ContractPlannedPaymentRequest {
  /** - Format: date */
  payment_date: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount?: string;
  /** - Format: uuid */
  subcontract_progress?: string;
}

/**
 * Moves \`UniqueValidator\`'s from the validation stage to the save stage. It
 * solves the problem with nested validation for unique fields on update.
 *
 * If you want more details, you can read related issues and articles:
 * https://github.com/beda-software/drf-writable-nested/issues/1
 * http://www.django-rest-framework.org/api-guide/validators/#updating-nested-serializers
 *
 * Example of usage:
 *
 *         class Child(models.Model):
 *         field = models.CharField(unique=True)
 *
 *
 *     class Parent(models.Model):
 *         child = models.ForeignKey('Child')
 *
 *
 *     class ChildSerializer(UniqueFieldsMixin, serializers.ModelSerializer):
 *         class Meta:
 *             model = Child
 *
 *
 *     class ParentSerializer(NestedUpdateMixin, serializers.ModelSerializer):
 *         child = ChildSerializer()
 *
 *         class Meta:
 *             model = Parent
 *
 * Note: \`UniqueFieldsMixin\` must be applied only on the serializer which has
 * unique fields.
 *
 * Note: When you are using both mixins (\`UniqueFieldsMixin\` and
 * \`NestedCreateMixin\` or \`NestedUpdateMixin\`) you should put
 * \`UniqueFieldsMixin\` ahead.
 */

export interface ContractRequest {
  /** - Format: uuid */
  category: string;
  /** - Format: uuid */
  company: string;
  /** - Format: uuid */
  currency: string;
  /** - Format: uuid */
  id: string;
  /** - Format: uuid */
  project: string;
  /** - Format: uuid */
  subcontractor: string;
  advance_payments?: ContractAdvancePaymentRequest[];
  collaterals?: ContractCollateralRequest[];
  /** - Format: date */
  contract_date?: string;
  contract_description?: string;
  /** - MaxLength: 255 */
  contract_number?: string;
  current_revision?: RevisionRequest;
  deductions?: ContractDeductionRequest[];
  is_lump_sum?: boolean;
  /** - Format: uuid */
  main_contractor?: string;
  planned_payments?: ContractPlannedPaymentRequest[];
  /** - Format: date */
  work_end_date?: string;
  /** - Format: date */
  work_start_date?: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface ContractRevisionSummary {
  /** - Format: date-time */
  created: string;
  created_by: string;
  /** - Format: uuid */
  id: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  total: string;
  comment?: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface ContractRevisionSummaryRequest {
  comment?: string;
}

export interface Counter {
  /** - Pattern: ^[-a-zA-Z0-9_]+$ */
  slug: string;
  code?: string;
  url?: string;
}

export interface Country {
  /** - Format: uuid */
  id: string;
  name: string;
}

/** Adds nested create feature */

export interface CreateRevisionRequest {
  comment?: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface Crew {
  /** - Format: date-time */
  created: string;
  crew_name: string;
  /** - Format: uuid */
  id: string;
  location: LocationParameter;
  /** - Format: date-time */
  modified: string;
  /** - MaxLength: 255 */
  name: string;
  activities?: ActivityNameCode[];
  projects?: ProjectNameCode[];
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface CrewList {
  crew_name: string;
  /** - Format: uuid */
  id: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface CrewNameLocation {
  crew_name: string;
  /** - Format: uuid */
  id: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface CrewRequest {
  /** - Format: uuid */
  location: string;
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  name: string;
  activities?: string[];
  projects?: string[];
}

export interface Currency {
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  value: string;
}

export interface CurrencyRequest {
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  value: string;
}

export interface CustomUserDetails {
  id: number;
  profile: Profile;
  /**
   * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
   *
   * - MaxLength: 150
   * - Pattern: ^[\\\\w.@+-]+$
   */
  username: string;
  /**
   * Email address
   *
   * - Format: email
   * - MaxLength: 254
   */
  email?: string;
  /** - MaxLength: 150 */
  first_name?: string;
  /** - MaxLength: 150 */
  last_name?: string;
}

export interface CustomUserDetailsRequest {
  profile: ProfileRequest;
  /**
   * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
   *
   * - MaxLength: 150
   * - MinLength: 1
   * - Pattern: ^[\\\\w.@+-]+$
   */
  username: string;
  /**
   * Email address
   *
   * - Format: email
   * - MaxLength: 254
   */
  email?: string;
  /** - MaxLength: 150 */
  first_name?: string;
  /** - MaxLength: 150 */
  last_name?: string;
}

/** Adds nested create feature */

export interface DeductionReturn {
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount: string;
  approver: UserNameAvatar;
  attachments: Attachment[];
  company: CompanyName;
  /** - Format: uuid */
  contract: string;
  contract_counter: Counter;
  counter: string;
  /** - Format: date-time */
  created: string;
  created_by: string;
  currency: string;
  /** - Format: date */
  date: string;
  is_approvable: boolean;
  is_editable: boolean;
  /** - Format: date-time */
  modified: string;
  modified_by: string;
  project: ProjectNameCode;
  slug: string;
  status: State;
  subcontractor: SupplierName;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  total_deduction: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  total_deduction_returned: string;
  type: ProgressDeductionType;
  description?: string;
  /** - Format: uuid */
  id?: string;
  planned_payments?: DeductionReturnPlannedPayment[];
}

export interface DeductionReturnList {
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount: string;
  approver: UserNameAvatar;
  company: string;
  /** - Format: uuid */
  contract: string;
  contract_counter: Counter;
  counter: string;
  /** - Format: date-time */
  created: string;
  currency: string;
  /** - Format: date */
  date: string;
  /** - Format: uuid */
  id: string;
  is_approvable: boolean;
  is_editable: boolean;
  project: string;
  slug: string;
  status: string;
  subcontractor: string;
  type: string;
  created_by?: number;
}

export interface DeductionReturnPlannedPayment {
  /** - Format: uuid */
  id: string;
  /** - Format: date */
  payment_date: string;
  payment_method: PaymentMethod;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount?: string;
}

export interface DeductionReturnPlannedPaymentRequest {
  /** - Format: date */
  payment_date: string;
  /** - Format: uuid */
  payment_method: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount?: string;
}

/** Adds nested create feature */

export interface DeductionReturnRequest {
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount: string;
  /** - Format: uuid */
  contract: string;
  /** - Format: date */
  date: string;
  /** - Format: uuid */
  type: string;
  description?: string;
  /** - Format: uuid */
  id?: string;
  planned_payments?: DeductionReturnPlannedPaymentRequest[];
}

export interface DeleteCodesActivitiesIdQueryParams {
  search?: string;
}

export interface DeleteCodesResourcesIdQueryParams {
  search?: string;
}

export interface DeleteCodesWbsIdQueryParams {
  search?: string;
}

export interface DeleteProjectsProjectsSlugQueryParams {
  has_wbs?: boolean;
}

export interface DeleteWarehouseProductsIdQueryParams {
  /** Product status */
  status:
    | \\"CANCELLED\\"
    | \\"DAMAGED\\"
    | \\"EXPECTED\\"
    | \\"LOST\\"
    | \\"OVERDELIVERED\\"
    | \\"SOLD\\"
    | \\"STOCK\\"
    | \\"STOLEN\\"
    | \\"USED\\";
  /** Company Id */
  company?: string[];
  /** Order no */
  order_no__icontains?: string;
  /** Project Id */
  project?: string[];
  /** Supplier name */
  supplier__icontains?: string;
  /** Warehouse Id */
  warehouse?: string[];
}

/** - \`percent\` - percent \`amount\` - amount */

export type DiscountUnitChoices = \\"percent\\" | \\"amount\\";

export interface District {
  /** - Format: uuid */
  id: string;
  name: string;
}

/**
 * - \`PRIMARY\` - Primary \`SECONDARY\` - Secondary \`HIGH_SCHOOL\` - High School
 *   \`JUNIOR_COLLEGE\` - Junior College \`UNIVERSITY\` - University \`POST_GRADUATE\`
 *   - Post Graduate \`DOCTORATE\` - Doctorate \`OTHER\` - Other
 */

export type EducationLevelEnum =
  | \\"PRIMARY\\"
  | \\"SECONDARY\\"
  | \\"HIGH_SCHOOL\\"
  | \\"JUNIOR_COLLEGE\\"
  | \\"UNIVERSITY\\"
  | \\"POST_GRADUATE\\"
  | \\"DOCTORATE\\"
  | \\"OTHER\\";

export interface Expense {
  account_from: AccountTitleCurrencyBalance;
  account_to: AccountTitleCurrencyBalance;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount_from: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount_from_dc: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount_to: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount_to_dc: string;
  company: CompanyName;
  counter: string;
  /** - Format: date-time */
  created: string;
  created_by: string;
  /** - Format: uuid */
  id: string;
  /** - Format: date-time */
  modified: string;
  modified_by: string;
  project: ProjectNameCompanies;
  slug: string;
  /** - Format: date-time */
  txn_date: string;
  type: ExpenseTypeChoices;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  xrate_from: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  xrate_to: string;
  activity?: ActivityNameCode;
  description?: string;
  resource?: ResourceNameCodeName;
  wbs?: WBSNameCode;
}

export interface ExpenseList {
  account_from: string;
  account_to: string;
  activity: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount: string;
  company: string;
  counter: string;
  /** - Format: date-time */
  created: string;
  created_by: string;
  currency: string;
  /** - Format: uuid */
  id: string;
  project: string;
  resource: string;
  slug: string;
  /** - Format: date-time */
  txn_date: string;
  type: ExpenseTypeChoices;
}

export interface ExpenseRequest {
  /** - Format: uuid */
  account_from: string;
  /** - Format: uuid */
  account_to: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount_from: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount_to: string;
  /** - Format: uuid */
  company: string;
  /** - Format: uuid */
  project: string;
  /** - Format: date-time */
  txn_date: string;
  type: ExpenseTypeChoices;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  xrate_from: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  xrate_to: string;
  /** - Format: uuid */
  activity?: string;
  description?: string;
  /** - Format: uuid */
  resource?: string;
  /** - Format: uuid */
  wbs?: string;
}

/** - \`EXPENSE\` - Expense \`INCOME\` - Income \`REFUND\` - Refund \`TRANSFER\` - Transfer */

export type ExpenseTypeChoices = \\"EXPENSE\\" | \\"INCOME\\" | \\"REFUND\\" | \\"TRANSFER\\";

export interface FeatureFlags {
  flag1: boolean;
  flag2: boolean;
}

/** - \`MALE\` - Male \`FEMALE\` - Female */

export type GenderEnum = \\"MALE\\" | \\"FEMALE\\";

export interface GetApiSchemaQueryParams {
  format?: \\"json\\" | \\"yaml\\";
  lang?: \\"en\\" | \\"tr\\";
}

export interface GetCodesActivitiesIdQueryParams {
  search?: string;
}

export interface GetCodesActivitiesPermissionsQueryParams {
  search?: string;
}

export interface GetCodesActivitiesQueryParams {
  full_code__istartswith?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  path?: string;
  search?: string;
}

export interface GetCodesResourcesIdQueryParams {
  search?: string;
}

export interface GetCodesResourcesPermissionsQueryParams {
  search?: string;
}

export interface GetCodesResourcesQueryParams {
  full_code__istartswith?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  path?: string;
  search?: string;
}

export interface GetCodesWbsIdQueryParams {
  search?: string;
}

export interface GetCodesWbsPermissionsQueryParams {
  search?: string;
}

export interface GetCodesWbsProjectsQueryParams {
  search?: string;
}

export interface GetCodesWbsQueryParams {
  /** Which field to use when ordering the results. */
  ordering?: string;
  /** - Format: uuid */
  project?: string;
  search?: string;
}

export interface GetFinanceAccountsQueryParams {
  /** Currency */
  currency?: string[];
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  /** Project */
  project?: string[];
  /** A search term. */
  search?: string;
  /**
   * Account Type
   *
   * \`BANK\` - Bank Account \`CASH\` - Cash Account \`VENDOR\` - Vendor \`SUBCONTRACTOR\`
   * - Subcontractor \`CUSTOMER\` - Customer \`EMPLOYEE\` - Employee \`OTHER\` - Other
   * \`CHEQUE\` - Cheque \`BOND\` - Bond
   */
  type?:
    | \\"BANK\\"
    | \\"BOND\\"
    | \\"CASH\\"
    | \\"CHEQUE\\"
    | \\"CUSTOMER\\"
    | \\"EMPLOYEE\\"
    | \\"OTHER\\"
    | \\"SUBCONTRACTOR\\"
    | \\"VENDOR\\"[];
}

export interface GetFinanceBankAccountsQueryParams {
  /** Bank */
  bank?: string[];
  /** Company */
  company?: string[];
  /** Currency */
  currency?: string[];
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  /** Project */
  project?: string[];
  /** A search term. */
  search?: string;
  /**
   * Account type
   *
   * - \`TERM_DEPOSIT\` - Term Deposit \`CURRENT_ACCOUNT\` - Current Account
   *   \`CREDIT_CARD\` - Credit Card \`LEASING\` - Leasing \`FUNDING\` - Funding \`BOND\`
   *   - Bond
   */
  sub_type?:
    | \\"BOND\\"
    | \\"CREDIT_CARD\\"
    | \\"CURRENT_ACCOUNT\\"
    | \\"FUNDING\\"
    | \\"LEASING\\"
    | \\"TERM_DEPOSIT\\";
  /**
   * Account Type
   *
   * \`BANK\` - Bank Account \`CASH\` - Cash Account \`VENDOR\` - Vendor \`SUBCONTRACTOR\`
   * - Subcontractor \`CUSTOMER\` - Customer \`EMPLOYEE\` - Employee \`OTHER\` - Other
   * \`CHEQUE\` - Cheque \`BOND\` - Bond
   */
  type?:
    | \\"BANK\\"
    | \\"BOND\\"
    | \\"CASH\\"
    | \\"CHEQUE\\"
    | \\"CUSTOMER\\"
    | \\"EMPLOYEE\\"
    | \\"OTHER\\"
    | \\"SUBCONTRACTOR\\"
    | \\"VENDOR\\"[];
}

export interface GetFinanceCashAccountsQueryParams {
  /** Company */
  company?: string[];
  /** Currency */
  currency?: string[];
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  /** Project */
  project?: string[];
  /** A search term. */
  search?: string;
  /**
   * Account type
   *
   * - \`CASH\` - Cash \`WORK_ADVANCE\` - Work Advance \`OTHER\` - Other
   */
  sub_type?: \\"CASH\\" | \\"OTHER\\" | \\"WORK_ADVANCE\\";
  /**
   * Account Type
   *
   * \`BANK\` - Bank Account \`CASH\` - Cash Account \`VENDOR\` - Vendor \`SUBCONTRACTOR\`
   * - Subcontractor \`CUSTOMER\` - Customer \`EMPLOYEE\` - Employee \`OTHER\` - Other
   * \`CHEQUE\` - Cheque \`BOND\` - Bond
   */
  type?:
    | \\"BANK\\"
    | \\"BOND\\"
    | \\"CASH\\"
    | \\"CHEQUE\\"
    | \\"CUSTOMER\\"
    | \\"EMPLOYEE\\"
    | \\"OTHER\\"
    | \\"SUBCONTRACTOR\\"
    | \\"VENDOR\\"[];
}

export interface GetFinanceExpensesQueryParams {
  account_from?: string[];
  account_to?: string[];
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount_from_max?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount_from_min?: string;
  company?: string[];
  currency?: string[];
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  project?: string[];
  /** A search term. */
  search?: string;
  /** - Format: date-time */
  txn_date?: string;
  /** - \`EXPENSE\` - Expense \`INCOME\` - Income \`REFUND\` - Refund \`TRANSFER\` - Transfer */
  type?: \\"EXPENSE\\" | \\"INCOME\\" | \\"REFUND\\" | \\"TRANSFER\\";
}

export interface GetFinanceIncomeInvoiceCategoriesQueryParams {
  /** A search term. */
  search?: string;
}

export interface GetFinanceIncomeInvoicesCounter__slugApprovalHistoryQueryParams {
  approver?: number[] | number;
  /**
   * Balance between
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_max?: string;
  /**
   * Balance between
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_min?: string;
  /** - Format: uuid */
  category?: string;
  company?: string[] | string;
  counter?: string;
  /** - Format: date */
  created_after?: string;
  /** - Format: date */
  created_before?: string;
  finalized?: boolean;
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  project?: string[] | string;
  /** A search term. */
  search?: string;
  status?: string[] | string;
  supplier?: string;
}

export interface GetFinanceIncomeInvoicesQueryParams {
  approver?: number[] | number;
  /**
   * Balance between
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_max?: string;
  /**
   * Balance between
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_min?: string;
  /** - Format: uuid */
  category?: string;
  company?: string[] | string;
  counter?: string;
  /** - Format: date */
  created_after?: string;
  /** - Format: date */
  created_before?: string;
  finalized?: boolean;
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  project?: string[] | string;
  /** A search term. */
  search?: string;
  status?: string[] | string;
  supplier?: string;
}

export interface GetFinanceIncomeInvoicesStatesQueryParams {
  approver?: number[] | number;
  /**
   * Balance between
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_max?: string;
  /**
   * Balance between
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_min?: string;
  /** - Format: uuid */
  category?: string;
  company?: string[] | string;
  counter?: string;
  /** - Format: date */
  created_after?: string;
  /** - Format: date */
  created_before?: string;
  finalized?: boolean;
  /** Which field to use when ordering the results. */
  ordering?: string;
  project?: string[] | string;
  /** A search term. */
  search?: string;
  status?: string[] | string;
  supplier?: string;
}

export interface GetFinanceInstrumentsQueryParams {
  /** Amount between */
  amount_max?: string;
  /** Amount between */
  amount_min?: string;
  company?: string[] | string;
  /** Counter */
  counter?: string;
  currency?: string[] | string;
  /** - Format: uuid */
  id?: string;
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  /**
   * Payment Date
   *
   * - Format: date
   */
  payment_date_after?: string;
  /**
   * Payment Date
   *
   * - Format: date
   */
  payment_date_before?: string;
  payment_details?: string[] | string;
  /** Payment Method */
  payment_method?: string[];
  project?: string[] | string;
  /** A search term. */
  search?: string;
  /** Supplier */
  supplier?: string;
  /** Supplier Id */
  supplier_id?: string;
}

export interface GetFinancePaymentBondsQueryParams {
  amount?: number;
  company?: string[];
  counter_party?: string;
  counter_party_id?: string[];
  currency?: string[];
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  /** - Format: date */
  payment_date?: string;
  project?: string[];
  /** A search term. */
  search?: string;
  state?: string[];
}

export interface GetFinancePaymentChequesQueryParams {
  amount?: number;
  company?: string[];
  counter_party?: string;
  counter_party_id?: string[];
  currency?: string[];
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  /** - Format: date */
  payment_date?: string;
  project?: string[];
  /** A search term. */
  search?: string;
  state?: string[];
}

export interface GetFinancePaymentDetailsQueryParams {
  company?: string[];
  currency?: string[];
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  /** - Format: uuid */
  payment_method?: string;
  project?: string[];
  realized?: boolean;
  /** A search term. */
  search?: string;
}

export interface GetFinancePlannedPaymentsQueryParams {
  /** Amount between */
  amount_max?: string;
  /** Amount between */
  amount_min?: string;
  company?: string[] | string;
  /** Counter */
  counter?: string;
  currency?: string[] | string;
  /** - Format: uuid */
  id?: string;
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  /**
   * Payment Date
   *
   * - Format: date
   */
  payment_date_after?: string;
  /**
   * Payment Date
   *
   * - Format: date
   */
  payment_date_before?: string;
  payment_details?: string[] | string;
  /** Payment Method */
  payment_method?: string[];
  project?: string[] | string;
  /** A search term. */
  search?: string;
  /** Supplier */
  supplier?: string;
  /** Supplier Id */
  supplier_id?: string;
}

export interface GetFinancePlannedRevenueQueryParams {
  /** Amount between */
  amount_max?: string;
  /** Amount between */
  amount_min?: string;
  company?: string[] | string;
  /** Counter */
  counter?: string;
  currency?: string[] | string;
  /** - Format: uuid */
  id?: string;
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  /**
   * Payment Date
   *
   * - Format: date
   */
  payment_date_after?: string;
  /**
   * Payment Date
   *
   * - Format: date
   */
  payment_date_before?: string;
  payment_details?: string[] | string;
  /** Payment Method */
  payment_method?: string[];
  project?: string[] | string;
  /** A search term. */
  search?: string;
  /** Supplier */
  supplier?: string;
  /** Supplier Id */
  supplier_id?: string;
}

export interface GetFinanceRevenueBondsQueryParams {
  amount?: number;
  company?: string[];
  counter_party?: string;
  counter_party_id?: string[];
  currency?: string[];
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  /** - Format: date */
  payment_date?: string;
  project?: string[];
  /** A search term. */
  search?: string;
  state?: string[];
}

export interface GetFinanceRevenueChequesQueryParams {
  amount?: number;
  company?: string[];
  counter_party?: string;
  counter_party_id?: string[];
  currency?: string[];
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  /** - Format: date */
  payment_date?: string;
  project?: string[];
  /** A search term. */
  search?: string;
  state?: string[];
}

export interface GetFinanceRevenueDetailsQueryParams {
  company?: string[];
  currency?: string[];
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  /** - Format: uuid */
  payment_method?: string;
  project?: string[];
  realized?: boolean;
  /** A search term. */
  search?: string;
}

export interface GetFinanceSlipsQueryParams {
  /** Number of results to return per page. */
  limit?: string;
  /** - Format: uuid */
  object_id?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  /** A search term. */
  search?: string;
}

export interface GetFinanceSupplierAccountsQueryParams {
  /** Currency */
  currency?: string[];
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  /** Project */
  project?: string[];
  /** A search term. */
  search?: string;
  /**
   * - \`MAIN\` - Main \`ADVANCE\` - Advance \`RETENTION\` - Retention \`INSURANCE\` -
   *   Insurance \`TAX\` - Tax
   */
  sub_type?: \\"ADVANCE\\" | \\"INSURANCE\\" | \\"MAIN\\" | \\"RETENTION\\" | \\"TAX\\";
  supplier?: string;
  /**
   * Account Type
   *
   * \`BANK\` - Bank Account \`CASH\` - Cash Account \`VENDOR\` - Vendor \`SUBCONTRACTOR\`
   * - Subcontractor \`CUSTOMER\` - Customer \`EMPLOYEE\` - Employee \`OTHER\` - Other
   * \`CHEQUE\` - Cheque \`BOND\` - Bond
   */
  type?:
    | \\"BANK\\"
    | \\"BOND\\"
    | \\"CASH\\"
    | \\"CHEQUE\\"
    | \\"CUSTOMER\\"
    | \\"EMPLOYEE\\"
    | \\"OTHER\\"
    | \\"SUBCONTRACTOR\\"
    | \\"VENDOR\\"[];
}

export interface GetFinanceTxnsExportQueryParams {
  account?: string[];
  /** Account Name */
  account_name?: string;
  /**
   * Account Sub Type
   *
   * \`MAIN\` - Main \`ADVANCE\` - Advance \`RETENTION\` - Retention \`INSURANCE\` -
   * Insurance \`TAX\` - Tax
   */
  account_sub_type?: \\"ADVANCE\\" | \\"INSURANCE\\" | \\"MAIN\\" | \\"RETENTION\\" | \\"TAX\\";
  /**
   * Account Type
   *
   * \`BANK\` - Bank Account \`CASH\` - Cash Account \`VENDOR\` - Vendor \`SUBCONTRACTOR\`
   * - Subcontractor \`CUSTOMER\` - Customer \`EMPLOYEE\` - Employee \`OTHER\` - Other
   * \`CHEQUE\` - Cheque \`BOND\` - Bond
   */
  account_type?:
    | \\"BANK\\"
    | \\"BOND\\"
    | \\"CASH\\"
    | \\"CHEQUE\\"
    | \\"CUSTOMER\\"
    | \\"EMPLOYEE\\"
    | \\"OTHER\\"
    | \\"SUBCONTRACTOR\\"
    | \\"VENDOR\\";
  company?: string[];
  currency?: string[];
  /**
   * Export Format
   *
   * \`csv\` - csv \`xls\` - xls \`xlsx\` - xlsx \`tsv\` - tsv \`ods\` - ods \`yaml\` - yaml
   * \`json\` - json \`html\` - html
   */
  eformat?: \\"csv\\" | \\"html\\" | \\"json\\" | \\"ods\\" | \\"tsv\\" | \\"xls\\" | \\"xlsx\\" | \\"yaml\\";
  /** Source Object ID */
  object_id?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  project?: string[];
  /** A search term. */
  search?: string;
  /** - Format: uuid */
  slip?: string;
  /** - Format: date */
  txn_date_after?: string;
  /** - Format: date */
  txn_date_before?: string;
  /**
   * Transaction type
   *
   * Transaction Type
   */
  txn_type?: string;
}

export interface GetFinanceTxnsQueryParams {
  account?: string[];
  /** Account Name */
  account_name?: string;
  /**
   * Account Sub Type
   *
   * \`MAIN\` - Main \`ADVANCE\` - Advance \`RETENTION\` - Retention \`INSURANCE\` -
   * Insurance \`TAX\` - Tax
   */
  account_sub_type?: \\"ADVANCE\\" | \\"INSURANCE\\" | \\"MAIN\\" | \\"RETENTION\\" | \\"TAX\\";
  /**
   * Account Type
   *
   * \`BANK\` - Bank Account \`CASH\` - Cash Account \`VENDOR\` - Vendor \`SUBCONTRACTOR\`
   * - Subcontractor \`CUSTOMER\` - Customer \`EMPLOYEE\` - Employee \`OTHER\` - Other
   * \`CHEQUE\` - Cheque \`BOND\` - Bond
   */
  account_type?:
    | \\"BANK\\"
    | \\"BOND\\"
    | \\"CASH\\"
    | \\"CHEQUE\\"
    | \\"CUSTOMER\\"
    | \\"EMPLOYEE\\"
    | \\"OTHER\\"
    | \\"SUBCONTRACTOR\\"
    | \\"VENDOR\\";
  company?: string[];
  currency?: string[];
  /**
   * Export Format
   *
   * \`csv\` - csv \`xls\` - xls \`xlsx\` - xlsx \`tsv\` - tsv \`ods\` - ods \`yaml\` - yaml
   * \`json\` - json \`html\` - html
   */
  eformat?: \\"csv\\" | \\"html\\" | \\"json\\" | \\"ods\\" | \\"tsv\\" | \\"xls\\" | \\"xlsx\\" | \\"yaml\\";
  /** Number of results to return per page. */
  limit?: string;
  /** Source Object ID */
  object_id?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  project?: string[];
  /** A search term. */
  search?: string;
  /** - Format: uuid */
  slip?: string;
  /** - Format: date */
  txn_date_after?: string;
  /** - Format: date */
  txn_date_before?: string;
  /**
   * Transaction type
   *
   * Transaction Type
   */
  txn_type?: string;
}

export interface GetHrCrewsQueryParams {
  activities?: string[];
  /** Number of results to return per page. */
  limit?: string;
  /** - Format: uuid */
  location?: string;
  name?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  projects?: string[];
  /** A search term. */
  search?: string;
}

export interface GetHrDepartmentsQueryParams {
  value?: string;
}

export interface GetHrPersonnelQueryParams {
  /** - Format: uuid */
  company?: string;
  /** - Format: uuid */
  counter?: string;
  /** - Format: uuid */
  department?: string;
  /** Number of results to return per page. */
  limit?: string;
  /** - Format: uuid */
  location?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  /** - Format: uuid */
  position?: string;
  /** - Format: uuid */
  profession?: string;
  /** - Format: uuid */
  project?: string;
  /** - Format: date */
  project_start_date?: string;
  /** - Format: date */
  quit_date?: string;
  /** A search term. */
  search?: string;
  /** - Format: date */
  start_date?: string;
  /** - \`ACTIVE\` - Active \`DEACTIVE\` - Deactive */
  status?: \\"ACTIVE\\" | \\"DEACTIVE\\";
}

export interface GetHrPositionsQueryParams {
  value?: string;
}

export interface GetHrSalariesQueryParams {
  /** - Format: uuid */
  currency?: string;
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  /** - \`hourly\` - Hourly \`monthly\` - Monthly */
  salary_type?: \\"hourly\\" | \\"monthly\\";
  /** A search term. */
  search?: string;
}

export interface GetHrSalaryPermissionsQueryParams {
  can_edit_salary?: boolean;
  can_view_salary?: boolean;
  /** - Format: uuid */
  project?: string;
  user?: number;
}

export interface GetProcurementApprovedOrderItemsQueryParams {
  approver?: string[] | string;
  company?: string[] | string;
  counter?: string[] | string;
  description?: string;
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /**
   * Ordering
   *
   * \`counter\` - Counter \`-counter\` - Sayaç (descending) \`project\` - Project
   * \`-project\` - Proje (descending) \`company\` - Company \`-company\` - Şirket
   * (descending) \`approver\` - Approver \`-approver\` - Onaylayan (descending)
   * \`created\` - Created \`-created\` - Oluşturulan (descending) \`description\` -
   * Description \`-description\` - Açıklama (descending) \`supplier\` - Supplier
   * \`-supplier\` - Supplier (descending) \`quantity\` - Quantity \`-quantity\` -
   * Quantity (descending) \`resource\` - Resource \`-resource\` - Kaynak (descending)
   * \`activity\` - Activity \`-activity\` - Aktivite (descending) \`wbs\` - Wbs \`-wbs\`
   * - Wbs (descending) \`delivery_date\` - Delivery date \`-delivery_date\` -
   * Delivery date (descending) \`ordered_quantity\` - Ordered quantity
   * \`-ordered_quantity\` - Ordered quantity (descending) \`remaining_quantity\` -
   * Remaining quantity \`-remaining_quantity\` - Remaining quantity (descending)
   */
  ordering?:
    | \\"-activity\\"
    | \\"-approver\\"
    | \\"-company\\"
    | \\"-counter\\"
    | \\"-created\\"
    | \\"-delivery_date\\"
    | \\"-description\\"
    | \\"-ordered_quantity\\"
    | \\"-project\\"
    | \\"-quantity\\"
    | \\"-remaining_quantity\\"
    | \\"-resource\\"
    | \\"-supplier\\"
    | \\"-wbs\\"
    | \\"activity\\"
    | \\"approver\\"
    | \\"company\\"
    | \\"counter\\"
    | \\"created\\"
    | \\"delivery_date\\"
    | \\"description\\"
    | \\"ordered_quantity\\"
    | \\"project\\"
    | \\"quantity\\"
    | \\"remaining_quantity\\"
    | \\"resource\\"
    | \\"supplier\\"
    | \\"wbs\\"[];
  project?: string[] | string;
  /** A search term. */
  search?: string;
  /**
   * Order Status
   *
   * \`NOT_INVOICED\` - Not yet invoiced \`PARTIALLY_INVOICED\` - Partially Invoiced
   * \`COMPLETELY_INVOICED\` - Completely Invoiced \`CANCELLED\` - Order Cancelled
   */
  status?:
    | \\"CANCELLED\\"
    | \\"COMPLETELY_INVOICED\\"
    | \\"NOT_INVOICED\\"
    | \\"PARTIALLY_INVOICED\\";
  supplier?: string;
}

export interface GetProcurementApprovedRequestItemsQueryParams {
  approver?: string[] | string;
  company?: string[] | string;
  counter?: string[] | string;
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  project?: string[] | string;
  /** A search term. */
  search?: string;
  /**
   * - \`NOT_ORDERED\` - Not yet ordered \`PARTIALLY_ORDERED\` - Partially Ordered
   *   \`COMPLETELY_ORDERED\` - Completely Ordered \`CANCELLED\` - Order Cancelled
   */
  status?:
    | \\"CANCELLED\\"
    | \\"COMPLETELY_ORDERED\\"
    | \\"NOT_ORDERED\\"
    | \\"PARTIALLY_ORDERED\\";
}

export interface GetProcurementInvoiceAdvanceBalanceCounter__slugQueryParams {
  /** Currency code */
  currency: string;
}

export interface GetProcurementInvoiceItemsQueryParams {
  /** A search term. */
  search?: string;
  \\"var-activity_group\\"?: string;
  \\"var-company\\"?: string;
  \\"var-project\\"?: string;
  \\"var-resource_group\\"?: string;
}

export interface GetProcurementInvoicesCounter__slugApprovalHistoryQueryParams {
  approver?: number[] | number;
  /**
   * Balance between
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_max?: string;
  /**
   * Balance between
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_min?: string;
  company?: string[] | string;
  counter?: string;
  /** - Format: date */
  created_after?: string;
  /** - Format: date */
  created_before?: string;
  finalized?: boolean;
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  project?: string[] | string;
  /** A search term. */
  search?: string;
  status?: string[] | string;
  supplier?: string;
}

export interface GetProcurementInvoicesQueryParams {
  approver?: number[] | number;
  /**
   * Balance between
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_max?: string;
  /**
   * Balance between
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_min?: string;
  company?: string[] | string;
  counter?: string;
  /** - Format: date */
  created_after?: string;
  /** - Format: date */
  created_before?: string;
  finalized?: boolean;
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  project?: string[] | string;
  /** A search term. */
  search?: string;
  status?: string[] | string;
  supplier?: string;
}

export interface GetProcurementInvoicesStatesQueryParams {
  approver?: number[] | number;
  /**
   * Balance between
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_max?: string;
  /**
   * Balance between
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_min?: string;
  company?: string[] | string;
  counter?: string;
  /** - Format: date */
  created_after?: string;
  /** - Format: date */
  created_before?: string;
  finalized?: boolean;
  /** Which field to use when ordering the results. */
  ordering?: string;
  project?: string[] | string;
  /** A search term. */
  search?: string;
  status?: string[] | string;
  supplier?: string;
}

export interface GetProcurementOrdersCounter__slugApprovalHistoryQueryParams {
  approver?: number[] | number;
  company?: string[] | string;
  counter?: string;
  /** - Format: date */
  created_after?: string;
  /** - Format: date */
  created_before?: string;
  finalized?: boolean;
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  project?: string[] | string;
  /** A search term. */
  search?: string;
  status?: string[] | string;
  supplier?: string;
  /**
   * Total with vat
   *
   * Order total between
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  totals_with_vat_max?: string;
  /**
   * Total with vat
   *
   * Order total between
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  totals_with_vat_min?: string;
}

export interface GetProcurementOrdersQueryParams {
  approver?: number[] | number;
  company?: string[] | string;
  counter?: string;
  /** - Format: date */
  created_after?: string;
  /** - Format: date */
  created_before?: string;
  finalized?: boolean;
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  project?: string[] | string;
  /** A search term. */
  search?: string;
  status?: string[] | string;
  supplier?: string;
  /**
   * Total with vat
   *
   * Order total between
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  totals_with_vat_max?: string;
  /**
   * Total with vat
   *
   * Order total between
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  totals_with_vat_min?: string;
}

export interface GetProcurementOrdersStatesQueryParams {
  approver?: number[] | number;
  company?: string[] | string;
  counter?: string;
  /** - Format: date */
  created_after?: string;
  /** - Format: date */
  created_before?: string;
  finalized?: boolean;
  /** Which field to use when ordering the results. */
  ordering?: string;
  project?: string[] | string;
  /** A search term. */
  search?: string;
  status?: string[] | string;
  supplier?: string;
  /**
   * Total with vat
   *
   * Order total between
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  totals_with_vat_max?: string;
  /**
   * Total with vat
   *
   * Order total between
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  totals_with_vat_min?: string;
}

export interface GetProcurementRequestTypesQueryParams {
  /** A search term. */
  search?: string;
}

export interface GetProcurementRequestsCounter__slugApprovalHistoryQueryParams {
  approver?: number[] | number;
  company?: string[] | string;
  counter?: string;
  /** - Format: date */
  created_after?: string;
  /** - Format: date */
  created_before?: string;
  finalized?: boolean;
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  project?: string[] | string;
  /** A search term. */
  search?: string;
  status?: string[] | string;
  /** - Format: uuid */
  type?: string;
}

export interface GetProcurementRequestsQueryParams {
  approver?: number[] | number;
  company?: string[] | string;
  counter?: string;
  /** - Format: date */
  created_after?: string;
  /** - Format: date */
  created_before?: string;
  finalized?: boolean;
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  project?: string[] | string;
  /** A search term. */
  search?: string;
  status?: string[] | string;
  /** - Format: uuid */
  type?: string;
}

export interface GetProcurementRequestsStatesQueryParams {
  approver?: number[] | number;
  company?: string[] | string;
  counter?: string;
  /** - Format: date */
  created_after?: string;
  /** - Format: date */
  created_before?: string;
  finalized?: boolean;
  /** Which field to use when ordering the results. */
  ordering?: string;
  project?: string[] | string;
  /** A search term. */
  search?: string;
  status?: string[] | string;
  /** - Format: uuid */
  type?: string;
}

export interface GetProcurementSpecialInvoiceItemsQueryParams {
  /** A search term. */
  search?: string;
  \\"var-activity_group\\"?: string;
  \\"var-company\\"?: string;
  \\"var-project\\"?: string;
  \\"var-resource_group\\"?: string;
}

export interface GetProcurementSpecialInvoiceTypesQueryParams {
  /** A search term. */
  search?: string;
}

export interface GetProcurementSpecialInvoicesCounter__slugApprovalHistoryQueryParams {
  approver?: number[] | number;
  /**
   * Balance between
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_max?: string;
  /**
   * Balance between
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_min?: string;
  company?: string[] | string;
  counter?: string;
  /** - Format: date */
  created_after?: string;
  /** - Format: date */
  created_before?: string;
  finalized?: boolean;
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  project?: string[] | string;
  /** A search term. */
  search?: string;
  status?: string[] | string;
  supplier?: string;
  /** - Format: uuid */
  type?: string;
}

export interface GetProcurementSpecialInvoicesQueryParams {
  approver?: number[] | number;
  /**
   * Balance between
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_max?: string;
  /**
   * Balance between
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_min?: string;
  company?: string[] | string;
  counter?: string;
  /** - Format: date */
  created_after?: string;
  /** - Format: date */
  created_before?: string;
  finalized?: boolean;
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  project?: string[] | string;
  /** A search term. */
  search?: string;
  status?: string[] | string;
  supplier?: string;
  /** - Format: uuid */
  type?: string;
}

export interface GetProcurementSpecialInvoicesStatesQueryParams {
  approver?: number[] | number;
  /**
   * Balance between
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_max?: string;
  /**
   * Balance between
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_min?: string;
  company?: string[] | string;
  counter?: string;
  /** - Format: date */
  created_after?: string;
  /** - Format: date */
  created_before?: string;
  finalized?: boolean;
  /** Which field to use when ordering the results. */
  ordering?: string;
  project?: string[] | string;
  /** A search term. */
  search?: string;
  status?: string[] | string;
  supplier?: string;
  /** - Format: uuid */
  type?: string;
}

export interface GetProjectsCitiesQueryParams {
  /** - Format: uuid */
  country?: string;
  /** A search term. */
  search?: string;
}

export interface GetProjectsCompaniesAvailableQueryParams {
  company_code?: string;
  name?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  /** A search term. */
  search?: string;
}

export interface GetProjectsCompaniesQueryParams {
  company_code?: string;
  /** Number of results to return per page. */
  limit?: string;
  name?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  /** A search term. */
  search?: string;
}

export interface GetProjectsCountriesQueryParams {
  /** A search term. */
  search?: string;
}

export interface GetProjectsDistrictsQueryParams {
  /** - Format: uuid */
  city?: string;
  /** A search term. */
  search?: string;
}

export interface GetProjectsProjectsAvailableQueryParams {
  has_wbs?: boolean;
  name?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  project_code?: string;
  /** A search term. */
  search?: string;
  wbs?: string[];
}

export interface GetProjectsProjectsPermissionsQueryParams {
  has_wbs?: boolean;
}

export interface GetProjectsProjectsQueryParams {
  has_wbs?: boolean;
  /** Number of results to return per page. */
  limit?: string;
  name?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  project_code?: string;
  /** A search term. */
  search?: string;
  wbs?: string[];
}

export interface GetProjectsProjectsSlugHistoryQueryParams {
  has_wbs?: boolean;
}

export interface GetProjectsProjectsSlugQueryParams {
  has_wbs?: boolean;
}

export interface GetProjectsProjectsSlugResponsibilitiesQueryParams {
  has_wbs?: boolean;
}

export interface GetRatesRatesQueryParams {
  /** - Format: date */
  date: string;
  /** - Format: uuid */
  rate_from?: string;
  rate_from_value?: string;
  /** - Format: uuid */
  rate_to?: string;
  rate_to_value?: string;
}

export interface GetSubcontractsContractCategoriesQueryParams {
  /** A search term. */
  search?: string;
}

export interface GetSubcontractsContractCollateralReasonQueryParams {
  /** A search term. */
  search?: string;
}

export interface GetSubcontractsContractCollateralStatusQueryParams {
  /** A search term. */
  search?: string;
}

export interface GetSubcontractsContractCollateralTypesQueryParams {
  /** A search term. */
  search?: string;
}

export interface GetSubcontractsContractCollateralsQueryParams {
  /**
   * Collateral amount between
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount_max?: string;
  /**
   * Collateral amount between
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount_min?: string;
  contract_code?: string;
  contract_company?: string[] | string;
  contract_project?: string[] | string;
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  reason?: string[] | string;
  /** - Format: date */
  received_At_after?: string;
  /** - Format: date */
  received_At_before?: string;
  /** - Format: date */
  received_at?: string;
  /** A search term. */
  search?: string;
  status?: string[] | string;
  type?: string[] | string;
  /** - Format: date */
  valid_until_after?: string;
  /** - Format: date */
  valid_until_before?: string;
}

export interface GetSubcontractsContractsCounter__slugApprovalHistoryQueryParams {
  approver?: number[] | number;
  /** - Format: uuid */
  category?: string;
  company?: string[] | string;
  counter?: string;
  /** - Format: date */
  created_after?: string;
  /** - Format: date */
  created_before?: string;
  finalized?: boolean;
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  project?: string[] | string;
  /** A search term. */
  search?: string;
  status?: string[] | string;
  /** Supplier name */
  subcontractor?: string;
}

export interface GetSubcontractsContractsQueryParams {
  approver?: number[] | number;
  /** - Format: uuid */
  category?: string;
  company?: string[] | string;
  counter?: string;
  /** - Format: date */
  created_after?: string;
  /** - Format: date */
  created_before?: string;
  finalized?: boolean;
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  project?: string[] | string;
  /** A search term. */
  search?: string;
  status?: string[] | string;
  /** Supplier name */
  subcontractor?: string;
}

export interface GetSubcontractsContractsStatesQueryParams {
  approver?: number[] | number;
  /** - Format: uuid */
  category?: string;
  company?: string[] | string;
  counter?: string;
  /** - Format: date */
  created_after?: string;
  /** - Format: date */
  created_before?: string;
  finalized?: boolean;
  /** Which field to use when ordering the results. */
  ordering?: string;
  project?: string[] | string;
  /** A search term. */
  search?: string;
  status?: string[] | string;
  /** Supplier name */
  subcontractor?: string;
}

export interface GetSubcontractsDeductionReturnsCounter__slugApprovalHistoryQueryParams {
  approver?: number[] | number;
  company?: string[] | string;
  /** - Format: uuid */
  contract__category?: string;
  contract_code?: string;
  counter?: string;
  /** - Format: date */
  created_after?: string;
  /** - Format: date */
  created_before?: string;
  finalized?: boolean;
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  project?: string[] | string;
  /** A search term. */
  search?: string;
  status?: string[] | string;
  /** Supplier name */
  subcontractor?: string;
  /** - Format: uuid */
  type?: string;
}

export interface GetSubcontractsDeductionReturnsQueryParams {
  approver?: number[] | number;
  company?: string[] | string;
  /** - Format: uuid */
  contract__category?: string;
  contract_code?: string;
  counter?: string;
  /** - Format: date */
  created_after?: string;
  /** - Format: date */
  created_before?: string;
  finalized?: boolean;
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  project?: string[] | string;
  /** A search term. */
  search?: string;
  status?: string[] | string;
  /** Supplier name */
  subcontractor?: string;
  /** - Format: uuid */
  type?: string;
}

export interface GetSubcontractsDeductionReturnsStatesQueryParams {
  approver?: number[] | number;
  company?: string[] | string;
  /** - Format: uuid */
  contract__category?: string;
  contract_code?: string;
  counter?: string;
  /** - Format: date */
  created_after?: string;
  /** - Format: date */
  created_before?: string;
  finalized?: boolean;
  /** Which field to use when ordering the results. */
  ordering?: string;
  project?: string[] | string;
  /** A search term. */
  search?: string;
  status?: string[] | string;
  /** Supplier name */
  subcontractor?: string;
  /** - Format: uuid */
  type?: string;
}

export interface GetSubcontractsProgressAdditionTypesQueryParams {
  /** A search term. */
  search?: string;
}

export interface GetSubcontractsProgressDeductionTypesQueryParams {
  is_invoiceable?: boolean;
  is_returnable?: boolean;
  /** A search term. */
  search?: string;
}

export interface GetSubcontractsProgressItemsQueryParams {
  \\"var-activity_group\\"?: string;
  \\"var-company\\"?: string;
  \\"var-project\\"?: string;
  \\"var-resource_group\\"?: string;
}

export interface GetSubcontractsProgressesCounter__slugApprovalHistoryQueryParams {
  approver?: number[] | number;
  company?: string[] | string;
  /** - Format: uuid */
  contract__category?: string;
  contract_code?: string;
  counter?: string;
  /** - Format: date */
  created_after?: string;
  /** - Format: date */
  created_before?: string;
  finalized?: boolean;
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  /** - Format: date */
  progress_date?: string;
  project?: string[] | string;
  /** A search term. */
  search?: string;
  status?: string[] | string;
  /** Supplier name */
  subcontractor?: string;
  totals?: number;
}

export interface GetSubcontractsProgressesQueryParams {
  approver?: number[] | number;
  company?: string[] | string;
  /** - Format: uuid */
  contract__category?: string;
  contract_code?: string;
  counter?: string;
  /** - Format: date */
  created_after?: string;
  /** - Format: date */
  created_before?: string;
  finalized?: boolean;
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  /** - Format: date */
  progress_date?: string;
  project?: string[] | string;
  /** A search term. */
  search?: string;
  status?: string[] | string;
  /** Supplier name */
  subcontractor?: string;
  totals?: number;
}

export interface GetSubcontractsProgressesStatesQueryParams {
  approver?: number[] | number;
  company?: string[] | string;
  /** - Format: uuid */
  contract__category?: string;
  contract_code?: string;
  counter?: string;
  /** - Format: date */
  created_after?: string;
  /** - Format: date */
  created_before?: string;
  finalized?: boolean;
  /** Which field to use when ordering the results. */
  ordering?: string;
  /** - Format: date */
  progress_date?: string;
  project?: string[] | string;
  /** A search term. */
  search?: string;
  status?: string[] | string;
  /** Supplier name */
  subcontractor?: string;
  totals?: number;
}

export interface GetSubcontractsRevisionsQueryParams {
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
}

export interface GetSuppliersAccountingCodesQueryParams {
  code?: string;
  /** - Format: uuid */
  currency?: string;
  /** A search term. */
  search?: string;
  supplier__slug?: string;
}

export interface GetSuppliersAdvanceBalancesSlugQueryParams {
  /** Currency code */
  currency: string;
}

export interface GetSuppliersBankAccountsQueryParams {
  /** - Format: uuid */
  bank_name?: string;
  /** - Format: uuid */
  currency?: string;
  /** A search term. */
  search?: string;
  supplier__slug?: string;
}

export interface GetSuppliersContactsQueryParams {
  /** A search term. */
  search?: string;
  supplier__slug?: string;
}

export interface GetSuppliersReviewAnswersQueryParams {
  /** - Format: uuid */
  review?: string;
  score__gte?: number;
  score__lte?: number;
  /** Multiple values may be separated by commas. */
  score__range?: number[];
  /** A search term. */
  search?: string;
}

export interface GetSuppliersReviewFormsQueryParams {
  /** - Format: date */
  created_after?: string;
  /** - Format: date */
  created_before?: string;
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  /**
   * Score is greater than
   *
   * - Max: 32767
   */
  score_max?: number;
  /**
   * Score is greater than
   *
   * - Max: 32767
   */
  score_min?: number;
  /** A search term. */
  search?: string;
  supplier__name?: string;
  supplier__slug?: string;
  template?: string[] | string;
}

export interface GetSuppliersReviewQuestionsQueryParams {
  /** A search term. */
  search?: string;
  /** - Format: uuid */
  template?: string;
}

export interface GetSuppliersReviewTemplatesQueryParams {
  pass_mark?: number;
  review_type?: string;
  /** A search term. */
  search?: string;
}

export interface GetSuppliersSupplierActivityTypesQueryParams {
  /** A search term. */
  search?: string;
}

export interface GetSuppliersSupplierBranchesQueryParams {
  /** A search term. */
  search?: string;
}

export interface GetSuppliersSupplierTypesQueryParams {
  /** A search term. */
  search?: string;
}

export interface GetSuppliersSuppliersAutocompleteQueryParams {
  /** Which field to use when ordering the results. */
  ordering?: string;
  /** A search term. */
  search?: string;
  search_value?: string;
}

export interface GetSuppliersSuppliersQueryParams {
  activity_type?: string[] | string;
  branch?: string[] | string;
  country?: string;
  country__name?: string;
  /** - Format: date */
  created_after?: string;
  /** - Format: date */
  created_before?: string;
  /** Number of results to return per page. */
  limit?: string;
  /** - Format: date */
  modified_after?: string;
  /** - Format: date */
  modified_before?: string;
  name?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  /** A search term. */
  search?: string;
  type?: string[] | string;
}

export interface GetWarehouseProductsIdAttachmentsQueryParams {
  /** Product status */
  status:
    | \\"CANCELLED\\"
    | \\"DAMAGED\\"
    | \\"EXPECTED\\"
    | \\"LOST\\"
    | \\"OVERDELIVERED\\"
    | \\"SOLD\\"
    | \\"STOCK\\"
    | \\"STOLEN\\"
    | \\"USED\\";
  /** Company Id */
  company?: string[];
  /** Order no */
  order_no__icontains?: string;
  /** Project Id */
  project?: string[];
  /** Supplier name */
  supplier__icontains?: string;
  /** Warehouse Id */
  warehouse?: string[];
}

export interface GetWarehouseProductsIdHistoryQueryParams {
  /** Product status */
  status:
    | \\"CANCELLED\\"
    | \\"DAMAGED\\"
    | \\"EXPECTED\\"
    | \\"LOST\\"
    | \\"OVERDELIVERED\\"
    | \\"SOLD\\"
    | \\"STOCK\\"
    | \\"STOLEN\\"
    | \\"USED\\";
  /** Company Id */
  company?: string[];
  /** Order no */
  order_no__icontains?: string;
  /** Project Id */
  project?: string[];
  /** Supplier name */
  supplier__icontains?: string;
  /** Warehouse Id */
  warehouse?: string[];
}

export interface GetWarehouseProductsIdQueryParams {
  /** Product status */
  status:
    | \\"CANCELLED\\"
    | \\"DAMAGED\\"
    | \\"EXPECTED\\"
    | \\"LOST\\"
    | \\"OVERDELIVERED\\"
    | \\"SOLD\\"
    | \\"STOCK\\"
    | \\"STOLEN\\"
    | \\"USED\\";
  /** Company Id */
  company?: string[];
  /** Order no */
  order_no__icontains?: string;
  /** Project Id */
  project?: string[];
  /** Supplier name */
  supplier__icontains?: string;
  /** Warehouse Id */
  warehouse?: string[];
}

export interface GetWarehouseProductsIdTransactionsQueryParams {
  /** Product status */
  status:
    | \\"CANCELLED\\"
    | \\"DAMAGED\\"
    | \\"EXPECTED\\"
    | \\"LOST\\"
    | \\"OVERDELIVERED\\"
    | \\"SOLD\\"
    | \\"STOCK\\"
    | \\"STOLEN\\"
    | \\"USED\\";
  /** Company Id */
  company?: string[];
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Order no */
  order_no__icontains?: string;
  /** Project Id */
  project?: string[];
  /** A search term. */
  search?: string;
  /** Supplier name */
  supplier__icontains?: string;
  /** - Format: date */
  txn_date_after?: string;
  /** - Format: date */
  txn_date_before?: string;
  /** Warehouse Id */
  warehouse?: string[];
}

export interface GetWarehouseProductsPermissionsQueryParams {
  /** Product status */
  status:
    | \\"CANCELLED\\"
    | \\"DAMAGED\\"
    | \\"EXPECTED\\"
    | \\"LOST\\"
    | \\"OVERDELIVERED\\"
    | \\"SOLD\\"
    | \\"STOCK\\"
    | \\"STOLEN\\"
    | \\"USED\\";
  /** Company Id */
  company?: string[];
  /** Order no */
  order_no__icontains?: string;
  /** Project Id */
  project?: string[];
  /** Supplier name */
  supplier__icontains?: string;
  /** Warehouse Id */
  warehouse?: string[];
}

export interface GetWarehouseProductsQueryParams {
  /** Product status */
  status:
    | \\"CANCELLED\\"
    | \\"DAMAGED\\"
    | \\"EXPECTED\\"
    | \\"LOST\\"
    | \\"OVERDELIVERED\\"
    | \\"SOLD\\"
    | \\"STOCK\\"
    | \\"STOLEN\\"
    | \\"USED\\";
  /** Company Id */
  company?: string[];
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Order No */
  order_no?: string;
  /** Order no */
  order_no__icontains?: string;
  /**
   * Ordering
   *
   * \`description\` - Description \`-description\` - Açıklama (descending) \`resource\`
   * - Resource \`-resource\` - Kaynak (descending) \`quantity_float\` - Quantity
   * float \`-quantity_float\` - Quantity float (descending) \`project\` - Project
   * \`-project\` - Proje (descending) \`company\` - Company \`-company\` - Şirket
   * (descending) \`warehouse\` - Warehouse \`-warehouse\` - Warehouse (descending)
   * \`supplier\` - Supplier \`-supplier\` - Supplier (descending) \`order_no\` - Order
   * no \`-order_no\` - Order no (descending) \`expected_delivery_date\` - Expected
   * delivery date \`-expected_delivery_date\` - Expected delivery date
   * (descending)
   */
  ordering?:
    | \\"-company\\"
    | \\"-description\\"
    | \\"-expected_delivery_date\\"
    | \\"-order_no\\"
    | \\"-project\\"
    | \\"-quantity_float\\"
    | \\"-resource\\"
    | \\"-supplier\\"
    | \\"-warehouse\\"
    | \\"company\\"
    | \\"description\\"
    | \\"expected_delivery_date\\"
    | \\"order_no\\"
    | \\"project\\"
    | \\"quantity_float\\"
    | \\"resource\\"
    | \\"supplier\\"
    | \\"warehouse\\"[];
  /** Project Id */
  project?: string[];
  resource?: string[];
  /** A search term. */
  search?: string;
  /** Supplier */
  supplier?: string;
  /** Supplier name */
  supplier__icontains?: string;
  /** Warehouse Id */
  warehouse?: string[];
}

export interface GetWarehouseWarehousesAvailableQueryParams {
  /** Which field to use when ordering the results. */
  ordering?: string;
  /** A search term. */
  search?: string;
}

export interface GetWarehouseWarehousesQueryParams {
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  /** A search term. */
  search?: string;
}

export interface Group {
  id: number;
  /** - MaxLength: 150 */
  name: string;
}

export interface GroupMember {
  id: number;
  members: Member[];
  /** - MaxLength: 150 */
  name: string;
}

export interface GroupMemberRequest {
  /**
   * - MaxLength: 150
   * - MinLength: 1
   */
  name: string;
}

export interface GroupRequest {
  /**
   * - MaxLength: 150
   * - MinLength: 1
   */
  name: string;
}

/** Adds nested create feature */

export interface IncomeInvoice {
  approver: UserNameAvatar;
  attachments: Attachment[];
  category: IncomeInvoiceCategory;
  company: CompanyName;
  counter: string;
  /** - Format: date-time */
  created: string;
  created_by: string;
  currency: Currency;
  /** - Format: uuid */
  id: string;
  is_approvable: boolean;
  is_editable: boolean;
  /** - Format: date-time */
  modified: string;
  modified_by: string;
  planned_payments: IncomeInvoicePlannedPayment[];
  project: ProjectNameCodeCompany;
  slug: string;
  status: State;
  supplier: SupplierForm;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  total_vat: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  totals: string;
  agreed_exchange_currency?: Currency;
  /**
   * Agreed currency rate
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,6}(?:.\\\\d{0,4})?$
   */
  agreed_exchange_rate?: string;
  has_vat_witholding?: boolean;
  /** - Format: date */
  invoice_date?: string;
  /** - MaxLength: 255 */
  invoice_no?: string;
  invoice_type?: InvoiceTypeEnum | BlankEnum | NullEnum;
  items?: IncomeInvoiceItem[];
  realized_payments?: IncomeInvoiceRealizedPayment[];
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface IncomeInvoiceCategory {
  description: string;
  /** - Format: uuid */
  id: string;
  value: string;
  /** Income invoices that creates a negative cost, e.g Refunds? */
  is_refund?: boolean;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface IncomeInvoiceCategoryRequest {
  /** Income invoices that creates a negative cost, e.g Refunds? */
  is_refund?: boolean;
}

/** Adds nested create feature */

export interface IncomeInvoiceItem {
  activity: ActivityNameCode;
  /** - Format: uuid */
  id: string;
  resource: ResourceNameCodeUnit;
  selected: boolean;
  unit: ResourceUnit;
  wbs: WBSNameCode;
  description?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  discount_amount?: string;
  discount_unit?: DiscountUnitChoices;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  quantity?: string;
  taxes?: Tax[];
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  unit_price?: string;
  /** - Max: 32767 */
  vat_ratio?: VatRatioChoices;
  vat_witholding?: Vatwitholding;
}

/** Adds nested create feature */

export interface IncomeInvoiceItemRequest {
  /** - Format: uuid */
  activity: string;
  /** - Format: uuid */
  id: string;
  /** - Format: uuid */
  resource: string;
  /** - Format: uuid */
  unit: string;
  /** - Format: uuid */
  wbs: string;
  description?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  discount_amount?: string;
  discount_unit?: DiscountUnitChoices;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  quantity?: string;
  taxes?: TaxRequest[];
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  unit_price?: string;
  /** - Max: 32767 */
  vat_ratio?: VatRatioChoices;
  /** - Format: uuid */
  vat_witholding?: string;
}

/** Adds nested create feature */

export interface IncomeInvoiceList {
  approver: UserNameAvatar;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  balance: string;
  category: string;
  company: string;
  counter: string;
  /** - Format: date-time */
  created: string;
  created_by: string;
  currency: string;
  /** - Format: uuid */
  id: string;
  /** - Format: date-time */
  modified: string;
  modified_by: string;
  project: string;
  slug: string;
  status: string;
  /** Supplier name */
  supplier: string;
}

export interface IncomeInvoicePlannedPayment {
  /** - Format: uuid */
  id: string;
  /** - Format: date */
  payment_date: string;
  payment_method: PaymentMethod;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount?: string;
  condition?: string;
  has_condition?: boolean;
}

export interface IncomeInvoicePlannedPaymentRequest {
  /** - Format: date */
  payment_date: string;
  /** - Format: uuid */
  payment_method: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount?: string;
  condition?: string;
  has_condition?: boolean;
}

export interface IncomeInvoiceRealizedPayment {
  /** - Format: uuid */
  id: string;
  /** - Format: date-time */
  payment_date: string;
  payment_method: PaymentMethod;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount?: string;
}

export interface IncomeInvoiceRealizedPaymentRequest {
  /** - Format: date-time */
  payment_date: string;
  /** - Format: uuid */
  payment_method: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount?: string;
}

/** Adds nested create feature */

export interface IncomeInvoiceRequest {
  /** - Format: uuid */
  category: string;
  /** - Format: uuid */
  company: string;
  /** - Format: uuid */
  currency: string;
  /** - Format: uuid */
  id: string;
  planned_payments: IncomeInvoicePlannedPaymentRequest[];
  /** - Format: uuid */
  project: string;
  /** - Format: uuid */
  supplier: string;
  /** - Format: uuid */
  agreed_exchange_currency?: string;
  /**
   * Agreed currency rate
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,6}(?:.\\\\d{0,4})?$
   */
  agreed_exchange_rate?: string;
  has_vat_witholding?: boolean;
  /** - Format: date */
  invoice_date?: string;
  /** - MaxLength: 255 */
  invoice_no?: string;
  invoice_type?: InvoiceTypeEnum | BlankEnum | NullEnum;
  items?: IncomeInvoiceItemRequest[];
  realized_payments?: IncomeInvoiceRealizedPaymentRequest[];
}

export interface InlineUserRequest {
  from_user_id: number;
}

export interface InstrumentListDiscovery {
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount: string;
  company: string;
  content_type: string;
  counter: string;
  counter_party: string;
  /** - Format: date-time */
  created: string;
  created_by: string;
  currency: string;
  /** - Format: date */
  entry_date: string;
  /** - Format: uuid */
  id: string;
  /** - Format: date-time */
  modified: string;
  modified_by: string;
  /** - Format: date */
  payment_date: string;
  project: string;
  slug: string;
  state: string;
  title: string;
  type: string;
  url: string;
  description?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,6}(?:.\\\\d{0,4})?$
   */
  exchange_rate_dc?: string;
}

/** Adds nested create feature */

export interface Invoice {
  approver: UserNameAvatar;
  attachments: Attachment[];
  company: CompanyNameCode;
  counter: string;
  /** - Format: date-time */
  created: string;
  created_by: string;
  currency: Currency;
  /** - Format: uuid */
  id: string;
  is_approvable: boolean;
  is_editable: boolean;
  /** - Format: date-time */
  modified: string;
  modified_by: string;
  order_currency: string;
  order_nos: any[];
  planned_payments: InvoicePlannedPayment[];
  project: ProjectNameCodeCompany;
  realized_payments: InvoiceRealizedPayment[];
  request_nos: any[];
  slug: string;
  status: State;
  supplier: SupplierForm;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  total_deducted_advance: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  total_given_advance: string;
  unsaved: boolean;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  advance_deduction?: string;
  agreed_exchange_currency?: Currency;
  /**
   * Agreed currency rate
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,6}(?:.\\\\d{0,4})?$
   */
  agreed_exchange_rate?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  correction?: string;
  has_vat_witholding?: boolean;
  /** - Format: date */
  invoice_date?: string;
  /** - MaxLength: 255 */
  invoice_no?: string;
  items?: InvoiceItem[];
  /** - Format: date */
  waybill_date?: string;
  /** - MaxLength: 255 */
  waybill_no?: string;
}

export interface InvoiceAdvanceBalance {
  deduction_rate: string;
  given_advances: any[];
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  total_deducted_advance: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  total_given_advance: string;
}

/** Adds nested create feature */

export interface InvoiceItem {
  /** - Format: uuid */
  id: string;
  is_additional: boolean;
  order_item: OrderItem;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  remaining_quantity: string;
  selected: boolean;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  total_invoiced_quantity: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  discount_amount?: string;
  discount_unit?: DiscountUnitChoices;
  /**
   * Invoiced quantity
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  quantity?: string;
  request_item?: RequestItem;
  taxes?: Tax[];
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  unit_price?: string;
  /** - Max: 32767 */
  vat_ratio?: VatRatioChoices;
  vat_witholding?: Vatwitholding;
}

export interface InvoiceItemList {
  activity: string;
  activity_tree: any[];
  company: string;
  currency: string;
  exchange_rates: undefined;
  invoice_date: string;
  invoice_no: string;
  project: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  quantity: string;
  resource: string;
  resource_tree: any[];
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  total: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  total_vat: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  unit_price: string;
  vat_ratio: number;
  wbs: string;
  wbs_tree: any[];
}

/** Adds nested create feature */

export interface InvoiceItemRequest {
  /** - Format: uuid */
  id: string;
  /** - Format: uuid */
  order_item: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  discount_amount?: string;
  discount_unit?: DiscountUnitChoices;
  /**
   * Invoiced quantity
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  quantity?: string;
  /** - Format: uuid */
  request_item?: string;
  taxes?: TaxRequest[];
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  unit_price?: string;
  /** - Max: 32767 */
  vat_ratio?: VatRatioChoices;
  /** - Format: uuid */
  vat_witholding?: string;
}

/** Adds nested create feature */

export interface InvoiceList {
  approver: UserNameAvatar;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  balance: string;
  company: string;
  counter: string;
  /** - Format: date-time */
  created: string;
  created_by: string;
  currency: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,11}(?:.\\\\d{0,8})?$
   */
  exchange_rate_usd: string;
  exchange_rates: { [x: string]: any };
  /** - Format: uuid */
  id: string;
  /** - Format: date-time */
  modified: string;
  modified_by: string;
  project: string;
  slug: string;
  status: string;
  /** Supplier name */
  supplier: string;
  url: string;
}

export interface InvoicePlannedPayment {
  /** - Format: uuid */
  id: string;
  /** - Format: date */
  payment_date: string;
  payment_method: PaymentMethod;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount?: string;
  condition?: string;
  has_condition?: boolean;
}

export interface InvoicePlannedPaymentRequest {
  /** - Format: date */
  payment_date: string;
  /** - Format: uuid */
  payment_method: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount?: string;
  condition?: string;
  has_condition?: boolean;
}

/** Adds nested create feature */

export interface InvoicePrepareRequest {
  items: any[];
}

export interface InvoiceRealizedPayment {
  /** - Format: uuid */
  id: string;
  /** - Format: date-time */
  payment_date: string;
  payment_method: PaymentMethod;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount?: string;
}

export interface InvoiceRealizedPaymentRequest {
  /** - Format: date-time */
  payment_date: string;
  /** - Format: uuid */
  payment_method: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount?: string;
}

/** Adds nested create feature */

export interface InvoiceRequest {
  /** - Format: uuid */
  company: string;
  /** - Format: uuid */
  currency: string;
  /** - Format: uuid */
  id: string;
  planned_payments: InvoicePlannedPaymentRequest[];
  /** - Format: uuid */
  project: string;
  /** - Format: uuid */
  supplier: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  advance_deduction?: string;
  /** - Format: uuid */
  agreed_exchange_currency?: string;
  /**
   * Agreed currency rate
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,6}(?:.\\\\d{0,4})?$
   */
  agreed_exchange_rate?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  correction?: string;
  has_vat_witholding?: boolean;
  /** - Format: date */
  invoice_date?: string;
  /** - MaxLength: 255 */
  invoice_no?: string;
  items?: InvoiceItemRequest[];
  /** - Format: date */
  waybill_date?: string;
  /** - MaxLength: 255 */
  waybill_no?: string;
}

/** - \`TEMELFATURA\` - Basic Invoice \`TICARIFATURA\` - Commercial Invoice */

export type InvoiceTypeEnum = \\"TEMELFATURA\\" | \\"TICARIFATURA\\";

export interface LocationParameter {
  /** - Format: uuid */
  country: string;
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  value: string;
}

export interface LocationParameterRequest {
  /** - Format: uuid */
  country: string;
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  value: string;
}

export interface MainDepartment {
  /** - Format: uuid */
  id: string;
  sub_departments: SubDepartment[];
  /** - MaxLength: 255 */
  value: string;
}

export interface MainDepartmentRequest {
  sub_departments: string[];
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  value: string;
}

export interface MainPosition {
  /** - Format: uuid */
  id: string;
  sub_positions: SubPosition[];
  /** - MaxLength: 255 */
  value: string;
}

export interface MainPositionRequest {
  sub_positions: string[];
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  value: string;
}

/** - \`SINGLE\` - Single \`MARRIED\` - Married */

export type MaritalStatusEnum = \\"SINGLE\\" | \\"MARRIED\\";

export interface Member {
  id: number;
  name: string;
}

export interface Notification {
  status_type: StatusTypeEnum;
  subscription: {
    browser?: string;
    endpoint?: string;
    keys?: { auth?: string; p256dh?: string };
    user_agent?: string;
  };
  /** - MaxLength: 255 */
  browser?: string;
  /** - MaxLength: 255 */
  group?: string;
  /** - MaxLength: 255 */
  user_agent?: string;
}

export interface NotificationRequest {
  status_type: StatusTypeEnum;
  subscription: {
    browser?: string;
    endpoint?: string;
    keys?: { auth?: string; p256dh?: string };
    user_agent?: string;
  };
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  browser?: string;
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  group?: string;
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  user_agent?: string;
}

export type NullEnum = null;

export interface OfferComparisonRequestRequest {
  items: string[];
}

export interface OfferComparisonResponse {
  api_response: undefined;
  message: string;
  /** - Format: uri */
  offer_url: string;
  success: boolean;
}

/** Adds nested create feature */

export interface Order {
  approver: UserNameAvatar;
  attachments: Attachment[];
  company: CompanyNameCode;
  counter: string;
  /** - Format: date-time */
  created: string;
  created_by: string;
  currency: Currency;
  delivery_contact: UserFullName;
  /** - Format: uuid */
  id: string;
  is_approvable: boolean;
  is_editable: boolean;
  /** - Format: date-time */
  modified: string;
  modified_by: string;
  planned_payments: OrderPlannedPayment[];
  project: ProjectNameCodeCompany;
  request_nos: any[];
  slug: string;
  status: State;
  supplier: SupplierName;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  total_vat: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  totals: string;
  unsaved: boolean;
  advance_payments?: OrderAdvancePayment[];
  agreed_exchange_currency?: Currency;
  /**
   * Agreed currency rate
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,6}(?:.\\\\d{0,4})?$
   */
  agreed_exchange_rate?: string;
  /** - MaxLength: 255 */
  delivery_contact_phone?: string;
  /**
   * Expected order delivery date
   *
   * - Format: date
   */
  delivery_date?: string;
  delivery_note?: string;
  delivery_warehouse?: WarehouseName;
  has_vat_witholding?: boolean;
  items?: OrderItem[];
  packaging_methods?: any[];
}

export interface OrderAdvancePayment {
  /** - Format: uuid */
  id: string;
  /** - Format: date */
  payment_date: string;
  payment_method: PaymentMethod;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount?: string;
}

export interface OrderAdvancePaymentRequest {
  /** - Format: date */
  payment_date: string;
  /** - Format: uuid */
  payment_method: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount?: string;
}

export interface OrderItem {
  /** - Format: uuid */
  id: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  invoiced_quantity: string;
  is_additional: boolean;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  remaining_quantity: string;
  request_item: RequestItem;
  selected: boolean;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  total: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  total_ordered_quantity: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  total_vat: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  discount_amount?: string;
  discount_unit?: DiscountUnitChoices;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  ordered_quantity?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  unit_price?: string;
  /** - Max: 32767 */
  vat_ratio?: VatRatioChoices;
  vat_witholding?: Vatwitholding;
}

export interface OrderItemRequest {
  /** - Format: uuid */
  id: string;
  /** - Format: uuid */
  request_item: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  discount_amount?: string;
  discount_unit?: DiscountUnitChoices;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  ordered_quantity?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  unit_price?: string;
  /** - Max: 32767 */
  vat_ratio?: VatRatioChoices;
  /** - Format: uuid */
  vat_witholding?: string;
}

/** Adds nested create feature */

export interface OrderList {
  approver: UserNameAvatar;
  company: string;
  counter: string;
  /** - Format: date-time */
  created: string;
  created_by: string;
  currency: string;
  /** - Format: uuid */
  id: string;
  /** - Format: date-time */
  modified: string;
  modified_by: string;
  project: string;
  slug: string;
  status: string;
  /** Supplier name */
  supplier: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  totals_with_vat: string;
}

export interface OrderPlannedPayment {
  /** - Format: uuid */
  id: string;
  /** - Format: date */
  payment_date: string;
  payment_method: PaymentMethod;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount?: string;
  /** - MaxLength: 255 */
  payment_term?: string;
}

export interface OrderPlannedPaymentRequest {
  /** - Format: date */
  payment_date: string;
  /** - Format: uuid */
  payment_method: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount?: string;
  /** - MaxLength: 255 */
  payment_term?: string;
}

/** Adds nested create feature */

export interface OrderPrepareRequest {
  items: any[];
}

/** Adds nested create feature */

export interface OrderRequest {
  /** - Format: uuid */
  company: string;
  /** - Format: uuid */
  currency: string;
  /** - Format: uuid */
  id: string;
  planned_payments: OrderPlannedPaymentRequest[];
  /** - Format: uuid */
  project: string;
  /** - Format: uuid */
  supplier: string;
  advance_payments?: OrderAdvancePaymentRequest[];
  /** - Format: uuid */
  agreed_exchange_currency?: string;
  /**
   * Agreed currency rate
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,6}(?:.\\\\d{0,4})?$
   */
  agreed_exchange_rate?: string;
  /** - MaxLength: 255 */
  delivery_contact_phone?: string;
  /**
   * Expected order delivery date
   *
   * - Format: date
   */
  delivery_date?: string;
  delivery_note?: string;
  /** - Format: uuid */
  delivery_warehouse?: string;
  has_vat_witholding?: boolean;
  items?: OrderItemRequest[];
  packaging_methods?: any[];
}

export interface PackagingMethod {
  /**
   * Value [en]
   *
   * - MaxLength: 255
   */
  value_en?: string;
  /**
   * Value [tr]
   *
   * - MaxLength: 255
   */
  value_tr?: string;
}

export interface PackagingMethodRequest {
  /**
   * Value [en]
   *
   * - MaxLength: 255
   */
  value_en?: string;
  /**
   * Value [tr]
   *
   * - MaxLength: 255
   */
  value_tr?: string;
}

export interface PaginatedAccountList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: Account[];
}

export interface PaginatedActivityListList {
  count?: number;
  results?: ActivityList[];
}

export interface PaginatedApprovalHistoryList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: ApprovalHistory[];
}

export interface PaginatedApprovedOrderItemList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: ApprovedOrderItem[];
}

export interface PaginatedApprovedRequestItemList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: ApprovedRequestItem[];
}

export interface PaginatedBankAccountListList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: BankAccountList[];
}

export interface PaginatedCashAccountListList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: CashAccountList[];
}

export interface PaginatedCompanyList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: Company[];
}

export interface PaginatedContractCollateralListList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: ContractCollateralList[];
}

export interface PaginatedContractListList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: ContractList[];
}

export interface PaginatedCrewListList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: CrewList[];
}

export interface PaginatedDeductionReturnListList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: DeductionReturnList[];
}

export interface PaginatedExpenseListList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: ExpenseList[];
}

export interface PaginatedIncomeInvoiceListList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: IncomeInvoiceList[];
}

export interface PaginatedInstrumentListDiscoveryList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: InstrumentListDiscovery[];
}

export interface PaginatedInvoiceListList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: InvoiceList[];
}

export interface PaginatedOrderListList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: OrderList[];
}

export interface PaginatedPaymentBondListList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: PaymentBondList[];
}

export interface PaginatedPaymentChequeListList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: PaymentChequeList[];
}

export interface PaginatedPaymentDetailList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: PaymentDetail[];
}

export interface PaginatedPaymentPlan2TypeDiscoveryList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: PaymentPlan2TypeDiscovery[];
}

export interface PaginatedPersonListList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: PersonList[];
}

export interface PaginatedProductListList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: ProductList[];
}

export interface PaginatedProgressListList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: ProgressList[];
}

export interface PaginatedProjectListList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: ProjectList[];
}

export interface PaginatedRequestListList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: RequestList[];
}

export interface PaginatedResourceListList {
  count?: number;
  results?: ResourceList[];
}

export interface PaginatedRevenueBondListList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: RevenueBondList[];
}

export interface PaginatedRevenueChequeListList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: RevenueChequeList[];
}

export interface PaginatedRevenueDetailList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: RevenueDetail[];
}

export interface PaginatedReviewsListList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: ReviewsList[];
}

export interface PaginatedRevisionList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: Revision[];
}

export interface PaginatedSalaryList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: Salary[];
}

export interface PaginatedSlipList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: Slip[];
}

export interface PaginatedSpecialInvoiceListList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: SpecialInvoiceList[];
}

export interface PaginatedSupplierAccountListList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: SupplierAccountList[];
}

export interface PaginatedSupplierList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: Supplier[];
}

export interface PaginatedTransactionList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: Transaction[];
}

export interface PaginatedTransactionListList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: TransactionList[];
}

export interface PaginatedTransitionList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: Transition[];
}

export interface PaginatedWBSListList {
  count?: number;
  results?: WBSList[];
}

export interface PaginatedWarehouseList {
  count?: number;
  next?: string;
  page_count?: number;
  previous?: string;
  results?: Warehouse[];
}

export interface PatchCodesActivitiesIdQueryParams {
  search?: string;
}

export interface PatchCodesResourcesIdQueryParams {
  search?: string;
}

export interface PatchCodesWbsIdQueryParams {
  search?: string;
}

export interface PatchProjectsProjectsSlugQueryParams {
  has_wbs?: boolean;
}

export interface PatchWarehouseProductsIdQueryParams {
  /** Product status */
  status:
    | \\"CANCELLED\\"
    | \\"DAMAGED\\"
    | \\"EXPECTED\\"
    | \\"LOST\\"
    | \\"OVERDELIVERED\\"
    | \\"SOLD\\"
    | \\"STOCK\\"
    | \\"STOLEN\\"
    | \\"USED\\";
  /** Company Id */
  company?: string[];
  /** Order no */
  order_no__icontains?: string;
  /** Project Id */
  project?: string[];
  /** Supplier name */
  supplier__icontains?: string;
  /** Warehouse Id */
  warehouse?: string[];
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface PatchedAccountRequest {
  /** - MaxLength: 20 */
  accounting_code?: string;
  comments?: string;
  /** - Format: uuid */
  currency?: string;
  /** - Format: uuid */
  project?: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface PatchedAccountingTypeRequest {
  /**
   * Value [en]
   *
   * - MaxLength: 255
   */
  value_en?: string;
  /**
   * Value [tr]
   *
   * - MaxLength: 255
   */
  value_tr?: string;
}

export interface PatchedActivityRequest {
  accounting_codes?: PatchedCodeAccountingCodeRequest[];
  /**
   * - MaxLength: 2
   * - MinLength: 1
   */
  code?: string;
  /**
   * Name [en]
   *
   * - MaxLength: 255
   */
  name_en?: string;
  /**
   * Name [tr]
   *
   * - MaxLength: 255
   */
  name_tr?: string;
}

export interface PatchedActivityTypeRequest {
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  value?: string;
}

export interface PatchedAnswerRequest {
  /** - Max: 32767 */
  score?: number;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface PatchedBankAccountRequest {
  /** - MaxLength: 255 */
  account_number?: string;
  /** - MaxLength: 20 */
  accounting_code?: string;
  /** - Format: uuid */
  bank?: string;
  /** - MaxLength: 255 */
  branch?: string;
  comments?: string;
  /** - Format: uuid */
  company?: string;
  /** - Format: uuid */
  currency?: string;
  /** - MaxLength: 255 */
  iban?: string;
  /** - Format: uuid */
  payment_method?: string;
  /** - Format: uuid */
  project?: string;
  sub_type?: BankAccountSubTypeEnum;
}

export interface PatchedBankNameRequest {
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  value?: string;
}

export interface PatchedBranchRequest {
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  value?: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface PatchedCashAccountRequest {
  /** - MaxLength: 20 */
  accounting_code?: string;
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  cash_account_name?: string;
  comments?: string;
  /** - Format: uuid */
  company?: string;
  /** - Format: uuid */
  currency?: string;
  /** - Format: uuid */
  payment_method?: string;
  /** - Format: uuid */
  project?: string;
  sub_type?: CashAccountSubTypeEnum;
}

export interface PatchedCodeAccountingCodeRequest {
  /**
   * - MaxLength: 20
   * - MinLength: 1
   */
  code?: string;
  /** - Format: uuid */
  type?: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface PatchedCompanyRequest {
  /**
   * Haritadan seçim yaparak, profilinizde konumunuzun görünmesini
   * sağlayabilirsiniz.
   *
   * - MaxLength: 255
   */
  address?: string;
  /**
   * Commercial ID No
   *
   * - MaxLength: 255
   */
  commercial_reg_id?: string;
  /**
   * - MaxLength: 4
   * - MinLength: 4
   */
  company_code?: string;
  /**
   * E-mail (1)
   *
   * - Format: email
   * - MaxLength: 255
   */
  email1?: string;
  /**
   * E-mail (2)
   *
   * - Format: email
   * - MaxLength: 255
   */
  email2?: string;
  /**
   * Fax (1)
   *
   * - MaxLength: 255
   */
  fax?: string;
  /**
   * Coordinates
   *
   * - MaxLength: 255
   * - Pattern: ^-?[0-9]+.[0-9]+,-?[0-9]+.[0-9]+$
   */
  geolocation?: string;
  /** - MaxLength: 255 */
  legal_name?: string;
  /**
   * - MaxLength: 16
   * - MinLength: 16
   */
  mersis_no?: string;
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  name?: string;
  /**
   * Phone No (1)
   *
   * - MaxLength: 255
   */
  phone1?: string;
  /**
   * Phone No (2)
   *
   * - MaxLength: 255
   */
  phone2?: string;
  /**
   * Tax/TC ID No
   *
   * - MaxLength: 20
   */
  tax_no?: string;
  /** - MaxLength: 255 */
  tax_office?: string;
  /**
   * Website
   *
   * - Format: uri
   * - MaxLength: 255
   */
  website_url?: string;
}

export interface PatchedContactRequest {
  /**
   * E-mail
   *
   * - Format: email
   * - MaxLength: 254
   */
  email?: string;
  /**
   * Name and surname
   *
   * - MaxLength: 255
   * - MinLength: 1
   */
  name?: string;
  /**
   * Internal phone
   *
   * - MaxLength: 20
   */
  phone_internal?: string;
  /**
   * Mobile phone
   *
   * - MaxLength: 20
   */
  phone_mobile?: string;
  /** - MaxLength: 255 */
  position?: string;
  /** - MinLength: 1 */
  supplier?: string;
}

/**
 * Moves \`UniqueValidator\`'s from the validation stage to the save stage. It
 * solves the problem with nested validation for unique fields on update.
 *
 * If you want more details, you can read related issues and articles:
 * https://github.com/beda-software/drf-writable-nested/issues/1
 * http://www.django-rest-framework.org/api-guide/validators/#updating-nested-serializers
 *
 * Example of usage:
 *
 *         class Child(models.Model):
 *         field = models.CharField(unique=True)
 *
 *
 *     class Parent(models.Model):
 *         child = models.ForeignKey('Child')
 *
 *
 *     class ChildSerializer(UniqueFieldsMixin, serializers.ModelSerializer):
 *         class Meta:
 *             model = Child
 *
 *
 *     class ParentSerializer(NestedUpdateMixin, serializers.ModelSerializer):
 *         child = ChildSerializer()
 *
 *         class Meta:
 *             model = Parent
 *
 * Note: \`UniqueFieldsMixin\` must be applied only on the serializer which has
 * unique fields.
 *
 * Note: When you are using both mixins (\`UniqueFieldsMixin\` and
 * \`NestedCreateMixin\` or \`NestedUpdateMixin\`) you should put
 * \`UniqueFieldsMixin\` ahead.
 */

export interface PatchedContractRequest {
  advance_payments?: ContractAdvancePaymentRequest[];
  /** - Format: uuid */
  category?: string;
  collaterals?: ContractCollateralRequest[];
  /** - Format: uuid */
  company?: string;
  /** - Format: date */
  contract_date?: string;
  contract_description?: string;
  /** - MaxLength: 255 */
  contract_number?: string;
  /** - Format: uuid */
  currency?: string;
  current_revision?: RevisionRequest;
  deductions?: ContractDeductionRequest[];
  /** - Format: uuid */
  id?: string;
  is_lump_sum?: boolean;
  /** - Format: uuid */
  main_contractor?: string;
  planned_payments?: ContractPlannedPaymentRequest[];
  /** - Format: uuid */
  project?: string;
  /** - Format: uuid */
  subcontractor?: string;
  /** - Format: date */
  work_end_date?: string;
  /** - Format: date */
  work_start_date?: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface PatchedCrewRequest {
  activities?: string[];
  /** - Format: uuid */
  location?: string;
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  name?: string;
  projects?: string[];
}

export interface PatchedCurrencyRequest {
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  value?: string;
}

export interface PatchedCustomUserDetailsRequest {
  /**
   * Email address
   *
   * - Format: email
   * - MaxLength: 254
   */
  email?: string;
  /** - MaxLength: 150 */
  first_name?: string;
  /** - MaxLength: 150 */
  last_name?: string;
  profile?: ProfileRequest;
  /**
   * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
   *
   * - MaxLength: 150
   * - MinLength: 1
   * - Pattern: ^[\\\\w.@+-]+$
   */
  username?: string;
}

/** Adds nested create feature */

export interface PatchedDeductionReturnRequest {
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount?: string;
  /** - Format: uuid */
  contract?: string;
  /** - Format: date */
  date?: string;
  description?: string;
  /** - Format: uuid */
  id?: string;
  planned_payments?: DeductionReturnPlannedPaymentRequest[];
  /** - Format: uuid */
  type?: string;
}

export interface PatchedExpenseRequest {
  /** - Format: uuid */
  account_from?: string;
  /** - Format: uuid */
  account_to?: string;
  /** - Format: uuid */
  activity?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount_from?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount_to?: string;
  /** - Format: uuid */
  company?: string;
  description?: string;
  /** - Format: uuid */
  project?: string;
  /** - Format: uuid */
  resource?: string;
  /** - Format: date-time */
  txn_date?: string;
  type?: ExpenseTypeChoices;
  /** - Format: uuid */
  wbs?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  xrate_from?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  xrate_to?: string;
}

export interface PatchedGroupMemberRequest {
  /**
   * - MaxLength: 150
   * - MinLength: 1
   */
  name?: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface PatchedIncomeInvoiceCategoryRequest {
  /** Income invoices that creates a negative cost, e.g Refunds? */
  is_refund?: boolean;
}

/** Adds nested create feature */

export interface PatchedIncomeInvoiceRequest {
  /** - Format: uuid */
  agreed_exchange_currency?: string;
  /**
   * Agreed currency rate
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,6}(?:.\\\\d{0,4})?$
   */
  agreed_exchange_rate?: string;
  /** - Format: uuid */
  category?: string;
  /** - Format: uuid */
  company?: string;
  /** - Format: uuid */
  currency?: string;
  has_vat_witholding?: boolean;
  /** - Format: uuid */
  id?: string;
  /** - Format: date */
  invoice_date?: string;
  /** - MaxLength: 255 */
  invoice_no?: string;
  invoice_type?: InvoiceTypeEnum | BlankEnum | NullEnum;
  items?: IncomeInvoiceItemRequest[];
  planned_payments?: IncomeInvoicePlannedPaymentRequest[];
  /** - Format: uuid */
  project?: string;
  realized_payments?: IncomeInvoiceRealizedPaymentRequest[];
  /** - Format: uuid */
  supplier?: string;
}

/** Adds nested create feature */

export interface PatchedInvoiceRequest {
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  advance_deduction?: string;
  /** - Format: uuid */
  agreed_exchange_currency?: string;
  /**
   * Agreed currency rate
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,6}(?:.\\\\d{0,4})?$
   */
  agreed_exchange_rate?: string;
  /** - Format: uuid */
  company?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  correction?: string;
  /** - Format: uuid */
  currency?: string;
  has_vat_witholding?: boolean;
  /** - Format: uuid */
  id?: string;
  /** - Format: date */
  invoice_date?: string;
  /** - MaxLength: 255 */
  invoice_no?: string;
  items?: InvoiceItemRequest[];
  planned_payments?: InvoicePlannedPaymentRequest[];
  /** - Format: uuid */
  project?: string;
  /** - Format: uuid */
  supplier?: string;
  /** - Format: date */
  waybill_date?: string;
  /** - MaxLength: 255 */
  waybill_no?: string;
}

export interface PatchedLocationParameterRequest {
  /** - Format: uuid */
  country?: string;
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  value?: string;
}

export interface PatchedMainDepartmentRequest {
  sub_departments?: string[];
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  value?: string;
}

export interface PatchedMainPositionRequest {
  sub_positions?: string[];
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  value?: string;
}

export interface PatchedOrderAdvancePaymentRequest {
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount?: string;
  /** - Format: date */
  payment_date?: string;
  /** - Format: uuid */
  payment_method?: string;
}

/** Adds nested create feature */

export interface PatchedOrderRequest {
  advance_payments?: OrderAdvancePaymentRequest[];
  /** - Format: uuid */
  agreed_exchange_currency?: string;
  /**
   * Agreed currency rate
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,6}(?:.\\\\d{0,4})?$
   */
  agreed_exchange_rate?: string;
  /** - Format: uuid */
  company?: string;
  /** - Format: uuid */
  currency?: string;
  /** - MaxLength: 255 */
  delivery_contact_phone?: string;
  /**
   * Expected order delivery date
   *
   * - Format: date
   */
  delivery_date?: string;
  delivery_note?: string;
  /** - Format: uuid */
  delivery_warehouse?: string;
  has_vat_witholding?: boolean;
  /** - Format: uuid */
  id?: string;
  items?: OrderItemRequest[];
  packaging_methods?: any[];
  planned_payments?: OrderPlannedPaymentRequest[];
  /** - Format: uuid */
  project?: string;
  /** - Format: uuid */
  supplier?: string;
}

export interface PatchedPackagingMethodRequest {
  /**
   * Value [en]
   *
   * - MaxLength: 255
   */
  value_en?: string;
  /**
   * Value [tr]
   *
   * - MaxLength: 255
   */
  value_tr?: string;
}

export interface PatchedPaymentBondRequest {
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount?: string;
  bond_address?: string;
  /** - MaxLength: 255 */
  bond_no?: string;
  /** - Format: uuid */
  company?: string;
  /** - Format: uuid */
  counter_party?: string;
  /** - Format: uuid */
  currency?: string;
  description?: string;
  /** - Format: date */
  entry_date?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,6}(?:.\\\\d{0,4})?$
   */
  exchange_rate_dc?: string;
  /** - Format: date */
  payment_date?: string;
  /** - Format: uuid */
  project?: string;
  /** - MaxLength: 255 */
  warranter?: string;
}

export interface PatchedPaymentChequeRequest {
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount?: string;
  /** - MaxLength: 255 */
  bank_account_no?: string;
  /** - Format: uuid */
  bank_name?: string;
  /** - MaxLength: 255 */
  branch_name?: string;
  /** - MaxLength: 255 */
  cheque_no?: string;
  /** - Format: uuid */
  company?: string;
  /** - Format: uuid */
  counter_party?: string;
  /** - Format: uuid */
  currency?: string;
  description?: string;
  /** - Format: date */
  entry_date?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,6}(?:.\\\\d{0,4})?$
   */
  exchange_rate_dc?: string;
  /** - MaxLength: 255 */
  iban?: string;
  /** - Format: date */
  payment_date?: string;
  /** - Format: uuid */
  project?: string;
}

export interface PatchedPaymentDetailRequest {
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount?: string;
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  description?: string;
  paid_together?: boolean;
  /** - Format: date-time */
  payment_date?: string;
  /** - Format: date-time */
  realized_at?: string;
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  txn_type?: string;
}

export interface PatchedPaymentMethodRequest {
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  value?: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface PatchedPersonRequest {
  address?: string;
  /** - Format: date */
  birth_date?: string;
  /** - MaxLength: 100 */
  birth_place?: string;
  blood_type?: BloodTypeEnum | BlankEnum;
  /** - Format: uuid */
  company?: string;
  /** - Format: uuid */
  crew?: string;
  /** - Format: uuid */
  department?: string;
  /** - MaxLength: 255 */
  education_department?: string;
  /** - Format: date */
  education_end_date?: string;
  education_level?: EducationLevelEnum | BlankEnum;
  /** - MaxLength: 255 */
  education_school?: string;
  /** - Format: date */
  education_start_date?: string;
  /**
   * - Format: email
   * - MaxLength: 255
   */
  email?: string;
  /**
   * - MaxLength: 100
   * - MinLength: 1
   */
  first_name?: string;
  gender?: GenderEnum | BlankEnum;
  /**
   * - MaxLength: 100
   * - MinLength: 1
   */
  last_name?: string;
  /** - Format: uuid */
  location?: string;
  marital_status?: MaritalStatusEnum | BlankEnum;
  /** - Format: uuid */
  nationality?: string;
  /** - Format: date */
  passport_expire_date?: string;
  /** - Format: date */
  passport_issue_date?: string;
  /** - MaxLength: 100 */
  passport_issue_place?: string;
  /** - MaxLength: 11 */
  passport_number?: string;
  /** - MaxLength: 20 */
  phone_home?: string;
  /** - MaxLength: 20 */
  phone_mobile?: string;
  /** - MaxLength: 20 */
  phone_other?: string;
  /** - Format: binary */
  photo?: string;
  /** - Format: uuid */
  position?: string;
  /** - Format: uuid */
  profession?: string;
  /** - Format: uuid */
  project?: string;
  /** - Format: date */
  project_start_date?: string;
  /** - Format: date */
  quit_date?: string;
  /** - Format: uuid */
  quit_reason?: string;
  /** - Format: uuid */
  quit_record?: string;
  /** - Format: date */
  start_date?: string;
  status?: Status386Enum;
  /** - MaxLength: 11 */
  tckn?: string;
}

export interface PatchedProductCreateRequest {
  /** - Format: uuid */
  activity?: string;
  brand?: string;
  /** - Format: uuid */
  company?: string;
  description?: string;
  /** - Format: uuid */
  project?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,16}(?:.\\\\d{0,4})?$
   */
  quantity?: string;
  /** - Format: uuid */
  resource?: string;
  serial_number?: string;
  /** - Format: uuid */
  supplier?: string;
  /** - Format: uuid */
  unit?: string;
  /** - Format: double */
  volume?: number;
  /** - Format: uuid */
  warehouse?: string;
  /** - Format: date-time */
  waybill_date?: string;
  waybill_no?: string;
  /** - Format: uuid */
  wbs?: string;
  /** - Format: double */
  weight?: number;
}

export interface PatchedProfessionRequest {
  /**
   * Profession Code
   *
   * - MaxLength: 50
   * - MinLength: 1
   */
  code?: string;
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  value?: string;
}

/** Adds nested create feature */

export interface PatchedProgressRequest {
  additions?: ProgressAdditionRequest[];
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  advance_deduction?: string;
  /** - Format: uuid */
  contract?: string;
  deductions?: ProgressDeductionRequest[];
  /** - Format: uuid */
  id?: string;
  /** - Format: date */
  invoice_date?: string;
  /** - MaxLength: 255 */
  invoice_no?: string;
  items?: ProgressItemRequest[];
  planned_payments?: ProgressPlannedPaymentRequest[];
  /** - Format: date */
  progress_date?: string;
  /** - MaxLength: 255 */
  progress_no?: string;
  /** - Max: 2147483647 */
  progress_order?: number;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface PatchedProjectRequest {
  /** - MaxLength: 255 */
  accounting_code_prefix?: string;
  /** - Format: uuid */
  accounting_type?: string;
  /**
   * Haritadan seçim yaparak, profilinizde konumunuzun görünmesini
   * sağlayabilirsiniz.
   *
   * - MaxLength: 255
   */
  address?: string;
  /** - Format: uuid */
  city?: string;
  companies?: string[];
  /** - Format: uuid */
  country?: string;
  /**
   * Default reporting currency
   *
   * - Format: uuid
   */
  currency?: string;
  /** - Format: uuid */
  district?: string;
  /** - MaxLength: 10 */
  duration?: string;
  /**
   * E-mail (1)
   *
   * - Format: email
   * - MaxLength: 255
   */
  email1?: string;
  /**
   * E-mail (2)
   *
   * - Format: email
   * - MaxLength: 255
   */
  email2?: string;
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  name?: string;
  /**
   * Phone No (1)
   *
   * - MaxLength: 255
   */
  phone1?: string;
  /**
   * Phone No (2)
   *
   * - MaxLength: 255
   */
  phone2?: string;
  project_active?: boolean;
  /** - MinLength: 1 */
  project_code?: string;
  /** - Format: uuid */
  project_type?: string;
  responsibles?: ResponsibleUserTypeRequest[];
  use_budget_codes?: boolean;
  use_wbs?: boolean;
  /**
   * Website
   *
   * - Format: uri
   * - MaxLength: 255
   */
  website_url?: string;
}

export interface PatchedProjectSalaryPermissionRequest {
  can_edit_salary?: boolean;
  can_view_salary?: boolean;
  /** - Format: uuid */
  project?: string;
  user?: number;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface PatchedProjectTypeParamRequest {
  responsibilities?: string[];
  /**
   * Value [en]
   *
   * - MaxLength: 255
   */
  value_en?: string;
  /**
   * Value [tr]
   *
   * - MaxLength: 255
   */
  value_tr?: string;
}

export interface PatchedQuitReasonRequest {
  /**
   * Quit Reason Code
   *
   * - MaxLength: 50
   * - MinLength: 1
   */
  code?: string;
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  value?: string;
}

export interface PatchedQuitRecordRequest {
  /** If this is checked, the person will not be able to work in the company. */
  blacklist?: boolean;
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  value?: string;
}

export interface PatchedRateRequest {
  /** - MinLength: 1 */
  rate_from?: string;
  /** - MinLength: 1 */
  rate_to?: string;
}

/** Adds nested create feature */

export interface PatchedRequestRequest {
  /** - Format: uuid */
  company?: string;
  /**
   * Requested delivery date
   *
   * - Format: date
   */
  delivery_date?: string;
  /** - Format: uuid */
  id?: string;
  items?: RequestItemRequest[];
  /** Request notes */
  notes?: string;
  /** - Format: uuid */
  project?: string;
  /** - Format: uuid */
  type?: string;
}

/** Adds nested create feature */

export interface PatchedResourceRequest {
  accounting_codes?: PatchedCodeAccountingCodeRequest[];
  /**
   * - MaxLength: 2
   * - MinLength: 1
   */
  code?: string;
  /**
   * Name [en]
   *
   * - MaxLength: 255
   */
  name_en?: string;
  /**
   * Name [tr]
   *
   * - MaxLength: 255
   */
  name_tr?: string;
  /** - Max: 2147483647 */
  numchild?: number;
  type?: ResourceTypeEnum;
  units?: string[];
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface PatchedResponsibleRequest {
  /** - Format: uuid */
  project?: string;
  /** - Format: uuid */
  type?: string;
  user?: CustomUserDetailsRequest;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface PatchedResponsibleTypeParamRequest {
  unique?: boolean;
  /**
   * Value [en]
   *
   * - MaxLength: 255
   */
  value_en?: string;
  /**
   * Value [tr]
   *
   * - MaxLength: 255
   */
  value_tr?: string;
}

export interface PatchedRevenueBondRequest {
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount?: string;
  bond_address?: string;
  /** - MaxLength: 255 */
  bond_no?: string;
  /** - Format: uuid */
  company?: string;
  /** - Format: uuid */
  counter_party?: string;
  /** - Format: uuid */
  currency?: string;
  description?: string;
  /** - Format: date */
  entry_date?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,6}(?:.\\\\d{0,4})?$
   */
  exchange_rate_dc?: string;
  /** - Format: date */
  payment_date?: string;
  /** - Format: uuid */
  project?: string;
  /** - MaxLength: 255 */
  warranter?: string;
}

export interface PatchedRevenueChequeRequest {
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount?: string;
  /** - MaxLength: 255 */
  bank_account_no?: string;
  /** - Format: uuid */
  bank_name?: string;
  /** - MaxLength: 255 */
  branch_name?: string;
  /** - MaxLength: 255 */
  cheque_no?: string;
  /** - Format: uuid */
  company?: string;
  /** - Format: uuid */
  counter_party?: string;
  /** - Format: uuid */
  currency?: string;
  description?: string;
  /** - Format: date */
  entry_date?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,6}(?:.\\\\d{0,4})?$
   */
  exchange_rate_dc?: string;
  /** - MaxLength: 255 */
  iban?: string;
  /** - Format: date */
  payment_date?: string;
  /** - Format: uuid */
  project?: string;
}

export interface PatchedRevenueDetailRequest {
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount?: string;
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  description?: string;
  paid_together?: boolean;
  /** - Format: date-time */
  payment_date?: string;
  /** - Format: date-time */
  realized_at?: string;
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  txn_type?: string;
}

/** Adds nested create feature */

export interface PatchedReviewQuestionRequest {
  /**
   * - Minimum: 1
   * - Max: 32767
   */
  maximum_score?: number;
  /**
   * - Minimum: -2147483648
   * - Max: 2147483647
   */
  sort_order?: number;
  /** - MinLength: 1 */
  value?: string;
}

/** Adds nested create feature */

export interface PatchedReviewRequest {
  answers?: PatchedAnswerRequest[];
  /** - MaxLength: 255 */
  description?: string;
  /** - MinLength: 1 */
  supplier?: string;
  /** - Format: uuid */
  template?: string;
}

/** Adds nested create feature */

export interface PatchedReviewTemplateRequest {
  /**
   * - Minimum: -2147483648
   * - Max: 2147483647
   */
  pass_mark?: number;
  questions?: ReviewQuestionRequest[];
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  review_type?: string;
}

/** Adds nested create feature */

export interface PatchedRevisionRequest {
  /** - Format: uuid */
  contract?: string;
  items?: ContractItemRequest[];
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface PatchedSalaryRequest {
  /** - Format: uuid */
  currency?: string;
  is_active?: boolean;
  /** - Format: uuid */
  person?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,10}(?:.\\\\d{0,2})?$
   */
  salary?: string;
  /** - Format: date */
  salary_date?: string;
  salary_type?: SalaryTypeEnum;
}

export interface PatchedSlipRequest {
  /** - Format: date-time */
  date?: string;
}

/** Adds nested create feature */

export interface PatchedSpecialInvoiceRequest {
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  advance_deduction?: string;
  /** - Format: uuid */
  agreed_exchange_currency?: string;
  /**
   * Agreed currency rate
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,6}(?:.\\\\d{0,4})?$
   */
  agreed_exchange_rate?: string;
  /** - Format: uuid */
  company?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  correction?: string;
  /** - Format: uuid */
  currency?: string;
  has_vat_witholding?: boolean;
  /** - Format: uuid */
  id?: string;
  /** - Format: date */
  invoice_date?: string;
  /** - MaxLength: 255 */
  invoice_no?: string;
  items?: SpecialInvoiceItemRequest[];
  planned_payments?: SpecialInvoicePlannedPaymentRequest[];
  /** - Format: uuid */
  prepaid_from?: string;
  /** - Format: uuid */
  project?: string;
  /** - Format: uuid */
  supplier?: string;
  /** - Format: uuid */
  type?: string;
  /** - Format: uuid */
  warehouse?: string;
  /** - Format: date */
  waybill_date?: string;
  /** - MaxLength: 255 */
  waybill_no?: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface PatchedSupplierAccountRequest {
  /** - MaxLength: 20 */
  accounting_code?: string;
  /** - Format: uuid */
  currency?: string;
  /** - Format: uuid */
  project?: string;
  sub_type?: SupplierAccountSubTypeEnum;
  /** - Format: uuid */
  supplier?: string;
}

export interface PatchedSupplierAccountingCodeRequest {
  account_owner?: AccountOwnerEnum;
  /**
   * Account code
   *
   * - MaxLength: 30
   * - MinLength: 1
   */
  code?: string;
  /** - Format: uuid */
  currency?: string;
  /** - MinLength: 1 */
  supplier?: string;
  type?: SupplierAccountingCodeTypeEnum;
}

export interface PatchedSupplierBankAccountRequest {
  /** - Format: uuid */
  bank_name?: string;
  /** - Format: uuid */
  currency?: string;
  /** - MaxLength: 50 */
  iban?: string;
  /** - MinLength: 1 */
  supplier?: string;
  /** - MaxLength: 20 */
  swift_no?: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface PatchedSupplierRequest {
  activity_type?: string[];
  /**
   * Haritadan seçim yaparak, profilinizde konumunuzun görünmesini
   * sağlayabilirsiniz.
   *
   * - MaxLength: 255
   */
  address?: string;
  branch?: string[];
  /** - Format: uuid */
  city?: string;
  /**
   * Commercial ID No
   *
   * - MaxLength: 255
   */
  commercial_reg_id?: string;
  /** - Format: uuid */
  country?: string;
  /** - Format: uuid */
  district?: string;
  /**
   * E-mail (1)
   *
   * - Format: email
   * - MaxLength: 255
   */
  email1?: string;
  /**
   * E-mail (2)
   *
   * - Format: email
   * - MaxLength: 255
   */
  email2?: string;
  /**
   * Fax (1)
   *
   * - MaxLength: 255
   */
  fax?: string;
  /**
   * Coordinates
   *
   * - MaxLength: 255
   * - Pattern: ^-?[0-9]+.[0-9]+,-?[0-9]+.[0-9]+$
   */
  geolocation?: string;
  /** - MaxLength: 255 */
  legal_name?: string;
  /**
   * - MaxLength: 16
   * - MinLength: 16
   */
  mersis_no?: string;
  /**
   * Supplier name
   *
   * - MaxLength: 255
   * - MinLength: 1
   */
  name?: string;
  /**
   * Phone No (1)
   *
   * - MaxLength: 255
   */
  phone1?: string;
  /**
   * Phone No (2)
   *
   * - MaxLength: 255
   */
  phone2?: string;
  /**
   * Tax/TC ID No
   *
   * - MaxLength: 20
   */
  tax_no?: string;
  /** - MaxLength: 255 */
  tax_office?: string;
  /** - Format: uuid */
  type?: string;
  /**
   * Website
   *
   * - Format: uri
   * - MaxLength: 255
   */
  website_url?: string;
}

export interface PatchedSupplierTypeRequest {
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  value?: string;
}

export interface PatchedTaxParameterRequest {
  /** Include Vat */
  add_to_vat?: boolean;
  /**
   * Tax Ratio
   *
   * - Max: 100
   */
  ratio?: number;
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  value?: string;
}

export interface PatchedTransactionListCreateRequest {
  transactions?: TransactionCreateRequest[];
}

export interface PatchedTransactionRequest {
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount_dc?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_credit?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_credit_dc?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_debit?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_debit_dc?: string;
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  description?: string;
  direction?: TransactionDirectionEnum;
  /** - Format: uuid */
  slip?: string;
  /** - Format: date-time */
  txn_date?: string;
}

export interface PatchedVatwitholdingRequest {
  /**
   * Vat witholding Ratio
   *
   * - Max: 100
   */
  ratio?: number;
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  value?: string;
}

export interface PatchedWBSRequest {
  /**
   * - MaxLength: 2
   * - MinLength: 1
   */
  code?: string;
  /**
   * Name [en]
   *
   * - MaxLength: 255
   */
  name_en?: string;
  /**
   * Name [tr]
   *
   * - MaxLength: 255
   */
  name_tr?: string;
  /** - Max: 2147483647 */
  numchild?: number;
  /** - Format: uuid */
  project?: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface PatchedWarehouseRequest {
  /**
   * Haritadan seçim yaparak, profilinizde konumunuzun görünmesini
   * sağlayabilirsiniz.
   *
   * - MaxLength: 255
   */
  address?: string;
  /**
   * E-mail (1)
   *
   * - Format: email
   * - MaxLength: 255
   */
  email1?: string;
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  name?: string;
  /**
   * Phone No (1)
   *
   * - MaxLength: 255
   */
  phone1?: string;
  responsibles?: UserNameAvatarRequest[];
}

export interface PayByBond {
  instrument: PaymentBond;
  /** - Format: date-time */
  payment_date: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  exchange_rate?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  xrate_from?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  xrate_to?: string;
}

export interface PayByBondRequest {
  /** - Format: uuid */
  instrument: string;
  /** - Format: date-time */
  payment_date: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  exchange_rate?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  xrate_from?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  xrate_to?: string;
}

export interface PayByCheque {
  instrument: PaymentCheque;
  /** - Format: date-time */
  payment_date: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  exchange_rate?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  xrate_from?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  xrate_to?: string;
}

export interface PayByChequeRequest {
  /** - Format: uuid */
  instrument: string;
  /** - Format: date-time */
  payment_date: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  exchange_rate?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  xrate_from?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  xrate_to?: string;
}

export interface PayByFilter {
  account: Account;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount_from: string;
  description: string;
  /** - Format: date-time */
  payment_date: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount_to?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  xrate_from?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  xrate_to?: string;
}

export interface PayByFilterRequest {
  /** - Format: uuid */
  account: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount_from: string;
  /** - MinLength: 1 */
  description: string;
  /** - Format: date-time */
  payment_date: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount_to?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  xrate_from?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  xrate_to?: string;
}

export interface PaySelected {
  account: Account;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount_from: string;
  description: string;
  /** - Format: date-time */
  payment_date: string;
  to_be_paid: ToBePaid[];
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount_to?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  xrate_from?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  xrate_to?: string;
}

export interface PaySelectedRequest {
  /** - Format: uuid */
  account: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount_from: string;
  /** - MinLength: 1 */
  description: string;
  /** - Format: date-time */
  payment_date: string;
  to_be_paid: ToBePaidRequest[];
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount_to?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  xrate_from?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  xrate_to?: string;
}

export interface PaymentBond {
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount: string;
  company: CompanyName;
  content_type: string;
  counter: string;
  counter_party: SupplierName;
  /** - Format: date-time */
  created: string;
  created_by: string;
  currency: Currency;
  /** - Format: date */
  entry_date: string;
  /** - Format: uuid */
  id: string;
  /** - Format: date-time */
  modified: string;
  modified_by: string;
  /** - Format: date */
  payment_date: string;
  project: ProjectNameCodeCompany;
  slug: string;
  state: PaymentBondStateEnum;
  title: string;
  url: string;
  bond_address?: string;
  /** - MaxLength: 255 */
  bond_no?: string;
  description?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,6}(?:.\\\\d{0,4})?$
   */
  exchange_rate_dc?: string;
  /** - MaxLength: 255 */
  warranter?: string;
}

export interface PaymentBondList {
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount: string;
  company: string;
  content_type: string;
  counter: string;
  counter_party: string;
  /** - Format: date-time */
  created: string;
  created_by: string;
  currency: string;
  /** - Format: date */
  entry_date: string;
  /** - Format: uuid */
  id: string;
  /** - Format: date-time */
  modified: string;
  modified_by: string;
  /** - Format: date */
  payment_date: string;
  project: string;
  slug: string;
  state: string;
  title: string;
  url: string;
  bond_address?: string;
  /** - MaxLength: 255 */
  bond_no?: string;
  description?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,6}(?:.\\\\d{0,4})?$
   */
  exchange_rate_dc?: string;
  /** - MaxLength: 255 */
  warranter?: string;
}

export interface PaymentBondRequest {
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount: string;
  /** - Format: uuid */
  company: string;
  /** - Format: uuid */
  counter_party: string;
  /** - Format: uuid */
  currency: string;
  /** - Format: date */
  entry_date: string;
  /** - Format: date */
  payment_date: string;
  /** - Format: uuid */
  project: string;
  bond_address?: string;
  /** - MaxLength: 255 */
  bond_no?: string;
  description?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,6}(?:.\\\\d{0,4})?$
   */
  exchange_rate_dc?: string;
  /** - MaxLength: 255 */
  warranter?: string;
}

export type PaymentBondStateEnum = unknown;

export interface PaymentCheque {
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount: string;
  company: CompanyName;
  content_type: string;
  counter: string;
  counter_party: SupplierName;
  /** - Format: date-time */
  created: string;
  created_by: string;
  currency: Currency;
  /** - Format: date */
  entry_date: string;
  /** - Format: uuid */
  id: string;
  /** - Format: date-time */
  modified: string;
  modified_by: string;
  /** - Format: date */
  payment_date: string;
  project: ProjectNameCodeCompany;
  slug: string;
  state: PaymentChequeStateEnum;
  title: string;
  url: string;
  /** - MaxLength: 255 */
  bank_account_no?: string;
  bank_name?: BankName;
  /** - MaxLength: 255 */
  branch_name?: string;
  /** - MaxLength: 255 */
  cheque_no?: string;
  description?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,6}(?:.\\\\d{0,4})?$
   */
  exchange_rate_dc?: string;
  /** - MaxLength: 255 */
  iban?: string;
}

export interface PaymentChequeList {
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount: string;
  bank_name: string;
  company: string;
  content_type: string;
  counter: string;
  counter_party: string;
  /** - Format: date-time */
  created: string;
  created_by: string;
  currency: string;
  /** - Format: date */
  entry_date: string;
  /** - Format: uuid */
  id: string;
  /** - Format: date-time */
  modified: string;
  modified_by: string;
  /** - Format: date */
  payment_date: string;
  project: string;
  slug: string;
  state: string;
  title: string;
  url: string;
  /** - MaxLength: 255 */
  bank_account_no?: string;
  /** - MaxLength: 255 */
  branch_name?: string;
  /** - MaxLength: 255 */
  cheque_no?: string;
  description?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,6}(?:.\\\\d{0,4})?$
   */
  exchange_rate_dc?: string;
  /** - MaxLength: 255 */
  iban?: string;
}

export interface PaymentChequeRequest {
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount: string;
  /** - Format: uuid */
  company: string;
  /** - Format: uuid */
  counter_party: string;
  /** - Format: uuid */
  currency: string;
  /** - Format: date */
  entry_date: string;
  /** - Format: date */
  payment_date: string;
  /** - Format: uuid */
  project: string;
  /** - MaxLength: 255 */
  bank_account_no?: string;
  /** - Format: uuid */
  bank_name?: string;
  /** - MaxLength: 255 */
  branch_name?: string;
  /** - MaxLength: 255 */
  cheque_no?: string;
  description?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,6}(?:.\\\\d{0,4})?$
   */
  exchange_rate_dc?: string;
  /** - MaxLength: 255 */
  iban?: string;
}

/**
 * - \`UNDEFINED\` - Undefined \`PORTFOLIO\` - Portfolio \`OUT\` - Out \`PAID\` - Paid
 *   \`RETURNOUT\` - Returned To Owner \`CANCEL\` - Cancelled
 */

export type PaymentChequeStateEnum =
  | \\"UNDEFINED\\"
  | \\"PORTFOLIO\\"
  | \\"OUT\\"
  | \\"PAID\\"
  | \\"RETURNOUT\\"
  | \\"CANCEL\\";

export interface PaymentDetail {
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount: string;
  company: string;
  currency: string;
  /** - Format: uuid */
  id: string;
  paid_together: boolean;
  /** - Format: date-time */
  payment_date: string;
  payment_from: string;
  payment_method: string;
  payment_to: string;
  project: string;
  /** - Format: date-time */
  realized_at: string;
  realized_by: string;
  /** - MaxLength: 255 */
  description?: string;
  /** - MaxLength: 255 */
  txn_type?: string;
}

export interface PaymentDetailDelete {
  /** - MaxLength: 255 */
  delete_note: string;
}

export interface PaymentDetailDeleteRequest {
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  delete_note: string;
}

export interface PaymentDetailRealize {
  ids: string[];
}

export interface PaymentDetailRealizeRequest {
  ids: string[];
}

export interface PaymentDetailRequest {
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount: string;
  paid_together: boolean;
  /** - Format: date-time */
  payment_date: string;
  /** - Format: date-time */
  realized_at: string;
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  description?: string;
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  txn_type?: string;
}

export interface PaymentMethod {
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  value: string;
}

export interface PaymentMethodRequest {
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  value: string;
}

export interface PaymentPlan2TypeDiscovery {
  company: CompanyName;
  content_type: number;
  counter: Counter;
  currency: Currency;
  document_no: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  due_total: string;
  /** - Format: date */
  first_payment_date: string;
  first_payment_method: string;
  /** - Format: uuid */
  id: string;
  module: string;
  object_type: number;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  paid_total: string;
  payment_description: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  planned_total: string;
  project: ProjectNameSerailizer;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  realized_total: string;
  supplier: SupplierName;
  type: string;
}

export interface Permissions {
  permissions: any[];
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface Person {
  company: CompanyName;
  counter: string;
  crew: CrewNameLocation;
  department: SubDepartment;
  /** - MaxLength: 100 */
  first_name: string;
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 100 */
  last_name: string;
  location: LocationParameter;
  position: SubPosition;
  profession: Profession;
  project: ProjectName;
  /** - Format: date */
  start_date: string;
  address?: string;
  /** - Format: date */
  birth_date?: string;
  /** - MaxLength: 100 */
  birth_place?: string;
  blood_type?: BloodTypeEnum | BlankEnum;
  /** - MaxLength: 255 */
  education_department?: string;
  /** - Format: date */
  education_end_date?: string;
  education_level?: EducationLevelEnum | BlankEnum;
  /** - MaxLength: 255 */
  education_school?: string;
  /** - Format: date */
  education_start_date?: string;
  /**
   * - Format: email
   * - MaxLength: 255
   */
  email?: string;
  gender?: GenderEnum | BlankEnum;
  marital_status?: MaritalStatusEnum | BlankEnum;
  /** - Format: uuid */
  nationality?: string;
  /** - Format: date */
  passport_expire_date?: string;
  /** - Format: date */
  passport_issue_date?: string;
  /** - MaxLength: 100 */
  passport_issue_place?: string;
  /** - MaxLength: 11 */
  passport_number?: string;
  /** - MaxLength: 20 */
  phone_home?: string;
  /** - MaxLength: 20 */
  phone_mobile?: string;
  /** - MaxLength: 20 */
  phone_other?: string;
  /** - Format: uri */
  photo?: string;
  /** - Format: date */
  project_start_date?: string;
  /** - Format: date */
  quit_date?: string;
  quit_reason?: QuitReason;
  quit_record?: QuitRecord;
  status?: Status386Enum;
  /** - MaxLength: 11 */
  tckn?: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface PersonList {
  company: string;
  counter: string;
  crew: string;
  department: string;
  first_name: string;
  /** - Format: uuid */
  id: string;
  last_name: string;
  location: string;
  position: string;
  profession: string;
  project: string;
  status: Status386Enum;
  /** - Format: date */
  quit_date?: string;
  /** - Format: uuid */
  quit_reason?: string;
  /** - Format: uuid */
  quit_record?: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface PersonRequest {
  /** - Format: uuid */
  company: string;
  /** - Format: uuid */
  crew: string;
  /** - Format: uuid */
  department: string;
  /**
   * - MaxLength: 100
   * - MinLength: 1
   */
  first_name: string;
  /**
   * - MaxLength: 100
   * - MinLength: 1
   */
  last_name: string;
  /** - Format: uuid */
  location: string;
  /** - Format: uuid */
  position: string;
  /** - Format: uuid */
  profession: string;
  /** - Format: uuid */
  project: string;
  /** - Format: date */
  start_date: string;
  address?: string;
  /** - Format: date */
  birth_date?: string;
  /** - MaxLength: 100 */
  birth_place?: string;
  blood_type?: BloodTypeEnum | BlankEnum;
  /** - MaxLength: 255 */
  education_department?: string;
  /** - Format: date */
  education_end_date?: string;
  education_level?: EducationLevelEnum | BlankEnum;
  /** - MaxLength: 255 */
  education_school?: string;
  /** - Format: date */
  education_start_date?: string;
  /**
   * - Format: email
   * - MaxLength: 255
   */
  email?: string;
  gender?: GenderEnum | BlankEnum;
  marital_status?: MaritalStatusEnum | BlankEnum;
  /** - Format: uuid */
  nationality?: string;
  /** - Format: date */
  passport_expire_date?: string;
  /** - Format: date */
  passport_issue_date?: string;
  /** - MaxLength: 100 */
  passport_issue_place?: string;
  /** - MaxLength: 11 */
  passport_number?: string;
  /** - MaxLength: 20 */
  phone_home?: string;
  /** - MaxLength: 20 */
  phone_mobile?: string;
  /** - MaxLength: 20 */
  phone_other?: string;
  /** - Format: binary */
  photo?: string;
  /** - Format: date */
  project_start_date?: string;
  /** - Format: date */
  quit_date?: string;
  /** - Format: uuid */
  quit_reason?: string;
  /** - Format: uuid */
  quit_record?: string;
  status?: Status386Enum;
  /** - MaxLength: 11 */
  tckn?: string;
}

export interface PostCodesActivitiesAdd_rootQueryParams {
  search?: string;
}

export interface PostCodesActivitiesIdAdd_childQueryParams {
  search?: string;
}

export interface PostCodesActivitiesIdAdd_siblingQueryParams {
  search?: string;
}

export interface PostCodesActivitiesIdMove_underQueryParams {
  search?: string;
}

export interface PostCodesResourcesAdd_rootQueryParams {
  search?: string;
}

export interface PostCodesResourcesIdAdd_childQueryParams {
  search?: string;
}

export interface PostCodesResourcesIdAdd_siblingQueryParams {
  search?: string;
}

export interface PostCodesResourcesIdMove_underQueryParams {
  search?: string;
}

export interface PostCodesWbsAdd_rootQueryParams {
  search?: string;
}

export interface PostCodesWbsIdAdd_childQueryParams {
  search?: string;
}

export interface PostCodesWbsIdAdd_siblingQueryParams {
  search?: string;
}

export interface PostCodesWbsIdMove_underQueryParams {
  search?: string;
}

export interface PostFinanceIncomeInvoicesApprovalsQueryParams {
  approver?: number[] | number;
  /**
   * Balance between
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_max?: string;
  /**
   * Balance between
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_min?: string;
  /** - Format: uuid */
  category?: string;
  company?: string[] | string;
  counter?: string;
  /** - Format: date */
  created_after?: string;
  /** - Format: date */
  created_before?: string;
  finalized?: boolean;
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  project?: string[] | string;
  /** A search term. */
  search?: string;
  status?: string[] | string;
  supplier?: string;
}

export interface PostFinancePlannedPaymentsPay_by_bondQueryParams {
  company?: string[];
  /** - Format: uuid */
  currency?: string;
  project?: string[];
  /** - Format: uuid */
  supplier_id?: string;
}

export interface PostFinancePlannedPaymentsPay_by_chequeQueryParams {
  company?: string[];
  /** - Format: uuid */
  currency?: string;
  project?: string[];
  /** - Format: uuid */
  supplier_id?: string;
}

export interface PostFinancePlannedPaymentsPay_by_filterQueryParams {
  company?: string[];
  /** - Format: uuid */
  currency?: string;
  project?: string[];
  /** - Format: uuid */
  supplier_id?: string;
}

export interface PostFinancePlannedRevenuePay_by_bondQueryParams {
  company?: string[];
  /** - Format: uuid */
  currency?: string;
  project?: string[];
  /** - Format: uuid */
  supplier_id?: string;
}

export interface PostFinancePlannedRevenuePay_by_chequeQueryParams {
  company?: string[];
  /** - Format: uuid */
  currency?: string;
  project?: string[];
  /** - Format: uuid */
  supplier_id?: string;
}

export interface PostFinancePlannedRevenuePay_by_filterQueryParams {
  company?: string[];
  /** - Format: uuid */
  currency?: string;
  project?: string[];
  /** - Format: uuid */
  supplier_id?: string;
}

export interface PostProcurementInvoicesApprovalsQueryParams {
  approver?: number[] | number;
  /**
   * Balance between
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_max?: string;
  /**
   * Balance between
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_min?: string;
  company?: string[] | string;
  counter?: string;
  /** - Format: date */
  created_after?: string;
  /** - Format: date */
  created_before?: string;
  finalized?: boolean;
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  project?: string[] | string;
  /** A search term. */
  search?: string;
  status?: string[] | string;
  supplier?: string;
}

export interface PostProcurementOrdersApprovalsQueryParams {
  approver?: number[] | number;
  company?: string[] | string;
  counter?: string;
  /** - Format: date */
  created_after?: string;
  /** - Format: date */
  created_before?: string;
  finalized?: boolean;
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  project?: string[] | string;
  /** A search term. */
  search?: string;
  status?: string[] | string;
  supplier?: string;
  /**
   * Total with vat
   *
   * Order total between
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  totals_with_vat_max?: string;
  /**
   * Total with vat
   *
   * Order total between
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  totals_with_vat_min?: string;
}

export interface PostProcurementRequestsApprovalsQueryParams {
  approver?: number[] | number;
  company?: string[] | string;
  counter?: string;
  /** - Format: date */
  created_after?: string;
  /** - Format: date */
  created_before?: string;
  finalized?: boolean;
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  project?: string[] | string;
  /** A search term. */
  search?: string;
  status?: string[] | string;
  /** - Format: uuid */
  type?: string;
}

export interface PostProcurementSpecialInvoicesApprovalsQueryParams {
  approver?: number[] | number;
  /**
   * Balance between
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_max?: string;
  /**
   * Balance between
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_min?: string;
  company?: string[] | string;
  counter?: string;
  /** - Format: date */
  created_after?: string;
  /** - Format: date */
  created_before?: string;
  finalized?: boolean;
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  project?: string[] | string;
  /** A search term. */
  search?: string;
  status?: string[] | string;
  supplier?: string;
  /** - Format: uuid */
  type?: string;
}

export interface PostProjectsProjectsQueryParams {
  has_wbs?: boolean;
}

export interface PostSubcontractsContractsApprovalsQueryParams {
  approver?: number[] | number;
  /** - Format: uuid */
  category?: string;
  company?: string[] | string;
  counter?: string;
  /** - Format: date */
  created_after?: string;
  /** - Format: date */
  created_before?: string;
  finalized?: boolean;
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  project?: string[] | string;
  /** A search term. */
  search?: string;
  status?: string[] | string;
  /** Supplier name */
  subcontractor?: string;
}

export interface PostSubcontractsDeductionReturnsApprovalsQueryParams {
  approver?: number[] | number;
  company?: string[] | string;
  /** - Format: uuid */
  contract__category?: string;
  contract_code?: string;
  counter?: string;
  /** - Format: date */
  created_after?: string;
  /** - Format: date */
  created_before?: string;
  finalized?: boolean;
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  project?: string[] | string;
  /** A search term. */
  search?: string;
  status?: string[] | string;
  /** Supplier name */
  subcontractor?: string;
  /** - Format: uuid */
  type?: string;
}

export interface PostSubcontractsProgressesApprovalsQueryParams {
  approver?: number[] | number;
  company?: string[] | string;
  /** - Format: uuid */
  contract__category?: string;
  contract_code?: string;
  counter?: string;
  /** - Format: date */
  created_after?: string;
  /** - Format: date */
  created_before?: string;
  finalized?: boolean;
  /** Number of results to return per page. */
  limit?: string;
  /** The initial index from which to return the results. */
  offset?: string;
  /** Which field to use when ordering the results. */
  ordering?: string;
  /** - Format: date */
  progress_date?: string;
  project?: string[] | string;
  /** A search term. */
  search?: string;
  status?: string[] | string;
  /** Supplier name */
  subcontractor?: string;
  totals?: number;
}

export interface PostWarehouseProductsAdd_attachmentQueryParams {
  /** Product status */
  status:
    | \\"CANCELLED\\"
    | \\"DAMAGED\\"
    | \\"EXPECTED\\"
    | \\"LOST\\"
    | \\"OVERDELIVERED\\"
    | \\"SOLD\\"
    | \\"STOCK\\"
    | \\"STOLEN\\"
    | \\"USED\\";
  /** Company Id */
  company?: string[];
  /** Order no */
  order_no__icontains?: string;
  /** Project Id */
  project?: string[];
  /** Supplier name */
  supplier__icontains?: string;
  /** Warehouse Id */
  warehouse?: string[];
}

export interface PostWarehouseProductsDeliver_productsQueryParams {
  /** Product status */
  status:
    | \\"CANCELLED\\"
    | \\"DAMAGED\\"
    | \\"EXPECTED\\"
    | \\"LOST\\"
    | \\"OVERDELIVERED\\"
    | \\"SOLD\\"
    | \\"STOCK\\"
    | \\"STOLEN\\"
    | \\"USED\\";
  /** Company Id */
  company?: string[];
  /** Order no */
  order_no__icontains?: string;
  /** Project Id */
  project?: string[];
  /** Supplier name */
  supplier__icontains?: string;
  /** Warehouse Id */
  warehouse?: string[];
}

export interface PostWarehouseProductsQueryParams {
  /** Product status */
  status:
    | \\"CANCELLED\\"
    | \\"DAMAGED\\"
    | \\"EXPECTED\\"
    | \\"LOST\\"
    | \\"OVERDELIVERED\\"
    | \\"SOLD\\"
    | \\"STOCK\\"
    | \\"STOLEN\\"
    | \\"USED\\";
  /** Company Id */
  company?: string[];
  /** Order no */
  order_no__icontains?: string;
  /** Project Id */
  project?: string[];
  /** Supplier name */
  supplier__icontains?: string;
  /** Warehouse Id */
  warehouse?: string[];
}

export interface Product {
  activity: ActivityNameCode;
  attachments: Attachment[];
  company: string;
  /** - Format: date-time */
  created: string;
  created_by: string;
  /** - Format: uuid */
  id: string;
  /** - Format: date-time */
  modified: string;
  modified_by: string;
  order_slug: string;
  project: string;
  request_slug: string;
  resource: ResourceNameCode;
  special_invoice_slug: string;
  supplier: string;
  unit: ResourceUnit;
  warehouse: string;
  wbs: WBSNameCode;
  /** - MaxLength: 255 */
  brand?: string;
  description?: string;
  /** - MaxLength: 255 */
  serial_number?: string;
  /**
   * Volume m³
   *
   * - Format: double
   */
  volume?: number;
  /**
   * Weight kg
   *
   * - Format: double
   */
  weight?: number;
}

export interface ProductCreate {
  activity: ActivityNameCode;
  /** - Format: uuid */
  id: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,16}(?:.\\\\d{0,4})?$
   */
  quantity: string;
  resource: ResourceNameCode;
  unit: ResourceUnit;
  /** - Format: date-time */
  waybill_date: string;
  wbs: WBSNameCode;
  brand?: string;
  company?: CompanyName;
  description?: string;
  project?: ProjectName;
  serial_number?: string;
  supplier?: SupplierName;
  /** - Format: double */
  volume?: number;
  warehouse?: WarehouseName;
  waybill_no?: string;
  /** - Format: double */
  weight?: number;
}

export interface ProductCreateRequest {
  /** - Format: uuid */
  activity: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,16}(?:.\\\\d{0,4})?$
   */
  quantity: string;
  /** - Format: uuid */
  resource: string;
  /** - Format: uuid */
  unit: string;
  /** - Format: date-time */
  waybill_date: string;
  /** - Format: uuid */
  wbs: string;
  brand?: string;
  /** - Format: uuid */
  company?: string;
  description?: string;
  /** - Format: uuid */
  project?: string;
  serial_number?: string;
  /** - Format: uuid */
  supplier?: string;
  /** - Format: double */
  volume?: number;
  /** - Format: uuid */
  warehouse?: string;
  waybill_no?: string;
  /** - Format: double */
  weight?: number;
}

export interface ProductDeliveryListCreateRequest {
  products: ProductDeliveryRequest[];
}

export interface ProductDeliveryRequest {
  /** - Format: uuid */
  product: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  quantity: string;
  /** - Format: uuid */
  warehouse: string;
  /** - Format: date-time */
  waybill_date: string;
  /** - MinLength: 1 */
  waybill_no: string;
}

export interface ProductList {
  activity: ActivityNameCode;
  company: string;
  description: string;
  /** - Format: date */
  expected_delivery_date: string;
  /** - Format: uuid */
  id: string;
  order_no: string;
  project: string;
  quantity: string;
  request_no: string;
  resource: ResourceNameCode;
  supplier: string;
  unit: string;
  warehouse: WarehouseName;
  wbs: WBSNameCode;
}

export interface Profession {
  /**
   * Profession Code
   *
   * - MaxLength: 50
   */
  code: string;
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  value: string;
}

export interface ProfessionRequest {
  /**
   * Profession Code
   *
   * - MaxLength: 50
   * - MinLength: 1
   */
  code: string;
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  value: string;
}

export interface Profile {
  /** - Format: uri */
  avatar: string;
  notificate_by: any[];
  delegated_to?: number;
  /** - Format: date */
  delegated_until?: string;
  is_removed?: boolean;
  /** - MaxLength: 15 */
  phone_number?: string;
  /** - MaxLength: 6 */
  primary_code?: string;
  /** - MaxLength: 50 */
  title?: string;
}

export interface ProfileRequest {
  /** - Format: binary */
  avatar: string;
  notificate_by: any[];
  delegated_to?: number;
  /** - Format: date */
  delegated_until?: string;
  is_removed?: boolean;
  /** - MaxLength: 15 */
  phone_number?: string;
  /** - MaxLength: 6 */
  primary_code?: string;
  /** - MaxLength: 50 */
  title?: string;
}

/** Adds nested create feature */

export interface Progress {
  approver: UserNameAvatar;
  attachments: Attachment[];
  company: CompanyName;
  /** - Format: uuid */
  contract: string;
  contract_category: ContractCategory;
  contract_counter: Counter;
  counter: string;
  /** - Format: date-time */
  created: string;
  created_by: string;
  currency: string;
  is_approvable: boolean;
  is_editable: boolean;
  /** - Format: date-time */
  modified: string;
  modified_by: string;
  project: ProjectNameCode;
  slug: string;
  status: State;
  subcontractor: SupplierName;
  additions?: ProgressAddition[];
  /**
   * Additions
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  additions_total?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  advance_deduction?: string;
  deductions?: ProgressDeduction[];
  /** - Format: uuid */
  id?: string;
  /** - Format: date */
  invoice_date?: string;
  /** - MaxLength: 255 */
  invoice_no?: string;
  /**
   * Invoiced deductions
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  invoiced_deductions_total?: string;
  items?: ProgressItem[];
  /**
   * Non invoiced deductions
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  non_invoiced_deductions_total?: string;
  planned_payments?: ProgressPlannedPayment[];
  /** - Format: date */
  progress_date?: string;
  /** - MaxLength: 255 */
  progress_no?: string;
  /** - Max: 2147483647 */
  progress_order?: number;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  total_vat?: string;
  /**
   * Total
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  totals?: string;
}

export interface ProgressAddition {
  /** - Format: uuid */
  id: string;
  type: ProgressAdditionType;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  cumulative_amount?: string;
  description?: string;
  /** - Max: 32767 */
  vat_ratio?: VatRatioChoices;
}

export interface ProgressAdditionRequest {
  /** - Format: uuid */
  type: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount?: string;
  description?: string;
  /** - Max: 32767 */
  vat_ratio?: VatRatioChoices;
}

export interface ProgressAdditionType {
  /** - Format: uuid */
  id: string;
  /** - Pattern: ^[-a-zA-Z0-9_]+$ */
  slug: string;
  /** - MaxLength: 255 */
  value: string;
}

export interface ProgressDeduction {
  contract_percentage: number;
  /** - Format: uuid */
  id: string;
  total_returned: string;
  type: ProgressDeductionType;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  cumulative_amount?: string;
  description?: string;
}

export interface ProgressDeductionRequest {
  /** - Format: uuid */
  type: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount?: string;
  description?: string;
}

export interface ProgressDeductionType {
  /** - Format: uuid */
  id: string;
  /** - Pattern: ^[-a-zA-Z0-9_]+$ */
  slug: string;
  /** - MaxLength: 255 */
  value: string;
  /** Is this an advance deduction? */
  is_advance?: boolean;
  /** Contract defined deductions can be pre deined in the contract as percentage */
  is_contract_defined?: boolean;
  /** Invoiceable deductions doesn't affect the balance of progress */
  is_invoiceable?: boolean;
  /** Returnable deductions can be returned thru a deduction return form */
  is_returnable?: boolean;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface ProgressItem {
  contract_item: ContractItem;
  /** - Format: uuid */
  id: string;
  selected: boolean;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  total: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  total_vat: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  cumulative_quantity?: string;
  /**
   * Progressed quantity
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  quantity?: string;
  sort_order?: number;
}

export interface ProgressItemList {
  activity: string;
  activity_tree: any[];
  company: string;
  currency: string;
  exchange_rates: undefined;
  invoice_no: string;
  project: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  quantity: string;
  resource: string;
  resource_tree: any[];
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  total: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  total_vat: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  unit_price: string;
  vat_ratio: number;
  wbs: string;
  wbs_tree: any[];
  /** - Format: date */
  invoice_date?: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface ProgressItemRequest {
  /** - Format: uuid */
  contract_item: string;
  /** - Format: uuid */
  id: string;
  /**
   * Progressed quantity
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  quantity?: string;
  sort_order?: number;
}

/** Adds nested create feature */

export interface ProgressList {
  approver: UserNameAvatar;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  balance: string;
  company: string;
  /** - Format: uuid */
  contract: string;
  contract_category: string;
  contract_counter: Counter;
  counter: string;
  /** - Format: date-time */
  created: string;
  created_by: string;
  currency: string;
  project: string;
  slug: string;
  status: string;
  subcontractor: string;
  url: string;
  /** - Format: uuid */
  id?: string;
  /** - Format: date */
  progress_date?: string;
  /** - MaxLength: 255 */
  progress_no?: string;
  /** - Max: 2147483647 */
  progress_order?: number;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  total_vat?: string;
  /**
   * Total
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  totals?: string;
}

export interface ProgressPlannedPayment {
  /** - Format: uuid */
  id: string;
  /** - Format: date */
  payment_date: string;
  payment_method: PaymentMethod;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount?: string;
}

export interface ProgressPlannedPaymentRequest {
  /** - Format: date */
  payment_date: string;
  /** - Format: uuid */
  payment_method: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount?: string;
}

/** Adds nested create feature */

export interface ProgressRequest {
  /** - Format: uuid */
  contract: string;
  additions?: ProgressAdditionRequest[];
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  advance_deduction?: string;
  deductions?: ProgressDeductionRequest[];
  /** - Format: uuid */
  id?: string;
  /** - Format: date */
  invoice_date?: string;
  /** - MaxLength: 255 */
  invoice_no?: string;
  items?: ProgressItemRequest[];
  planned_payments?: ProgressPlannedPaymentRequest[];
  /** - Format: date */
  progress_date?: string;
  /** - MaxLength: 255 */
  progress_no?: string;
  /** - Max: 2147483647 */
  progress_order?: number;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface Project {
  accounting_type: AccountingTypeValue;
  city: City;
  country: Country;
  district: District;
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  name: string;
  project_code: string;
  project_type: ProjectTypeValue;
  /** - MaxLength: 255 */
  accounting_code_prefix?: string;
  /**
   * Haritadan seçim yaparak, profilinizde konumunuzun görünmesini
   * sağlayabilirsiniz.
   *
   * - MaxLength: 255
   */
  address?: string;
  companies?: CompanyName[];
  /**
   * Default reporting currency
   *
   * - Format: uuid
   */
  currency?: string;
  /** - MaxLength: 10 */
  duration?: string;
  /**
   * E-mail (1)
   *
   * - Format: email
   * - MaxLength: 255
   */
  email1?: string;
  /**
   * E-mail (2)
   *
   * - Format: email
   * - MaxLength: 255
   */
  email2?: string;
  /**
   * Phone No (1)
   *
   * - MaxLength: 255
   */
  phone1?: string;
  /**
   * Phone No (2)
   *
   * - MaxLength: 255
   */
  phone2?: string;
  project_active?: boolean;
  responsibles?: ResponsibleUserType[];
  /** - Pattern: ^[-a-zA-Z0-9_]+$ */
  slug?: string;
  use_budget_codes?: boolean;
  use_wbs?: boolean;
  /**
   * Website
   *
   * - Format: uri
   * - MaxLength: 255
   */
  website_url?: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface ProjectAvailable {
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  name: string;
  companies?: CompanyName[];
}

export interface ProjectList {
  city: string;
  country: string;
  /** - Format: date-time */
  created: string;
  district: string;
  /** - Format: uuid */
  id: string;
  /** - Format: date-time */
  modified: string;
  /** - MaxLength: 255 */
  name: string;
  /**
   * - MaxLength: 4
   * - MinLength: 4
   */
  project_code: string;
  responsibles: ResponsiblesList[];
  /** - MaxLength: 10 */
  duration?: string;
  project_active?: boolean;
  /** - Pattern: ^[-a-zA-Z0-9_]+$ */
  slug?: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface ProjectName {
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  name: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface ProjectNameCode {
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  name: string;
  project_code: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface ProjectNameCodeCompaniesName {
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  name: string;
  project_code: string;
  companies?: CompanyName[];
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface ProjectNameCodeCompany {
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  name: string;
  project_code: string;
  companies?: CompanyName[];
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface ProjectNameCodeRequest {
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  name: string;
  /** - MinLength: 1 */
  project_code: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface ProjectNameCompanies {
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  name: string;
  companies?: CompanyName[];
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface ProjectNameCompany {
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  name: string;
  companies?: CompanyName[];
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface ProjectNameSerailizer {
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  name: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface ProjectRequest {
  /** - Format: uuid */
  accounting_type: string;
  /** - Format: uuid */
  city: string;
  /** - Format: uuid */
  country: string;
  /** - Format: uuid */
  district: string;
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  name: string;
  /** - MinLength: 1 */
  project_code: string;
  /** - Format: uuid */
  project_type: string;
  /** - MaxLength: 255 */
  accounting_code_prefix?: string;
  /**
   * Haritadan seçim yaparak, profilinizde konumunuzun görünmesini
   * sağlayabilirsiniz.
   *
   * - MaxLength: 255
   */
  address?: string;
  companies?: string[];
  /**
   * Default reporting currency
   *
   * - Format: uuid
   */
  currency?: string;
  /** - MaxLength: 10 */
  duration?: string;
  /**
   * E-mail (1)
   *
   * - Format: email
   * - MaxLength: 255
   */
  email1?: string;
  /**
   * E-mail (2)
   *
   * - Format: email
   * - MaxLength: 255
   */
  email2?: string;
  /**
   * Phone No (1)
   *
   * - MaxLength: 255
   */
  phone1?: string;
  /**
   * Phone No (2)
   *
   * - MaxLength: 255
   */
  phone2?: string;
  project_active?: boolean;
  responsibles?: ResponsibleUserTypeRequest[];
  use_budget_codes?: boolean;
  use_wbs?: boolean;
  /**
   * Website
   *
   * - Format: uri
   * - MaxLength: 255
   */
  website_url?: string;
}

export interface ProjectSalaryPermission {
  id: number;
  /** - Format: uuid */
  project: string;
  user: number;
  can_edit_salary?: boolean;
  can_view_salary?: boolean;
}

export interface ProjectSalaryPermissionRequest {
  /** - Format: uuid */
  project: string;
  user: number;
  can_edit_salary?: boolean;
  can_view_salary?: boolean;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface ProjectTypeParam {
  /** - Format: uuid */
  id: string;
  responsibilities: ResponsibleTypeParam[];
  value: string;
  /**
   * Value [en]
   *
   * - MaxLength: 255
   */
  value_en?: string;
  /**
   * Value [tr]
   *
   * - MaxLength: 255
   */
  value_tr?: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface ProjectTypeParamRequest {
  responsibilities: string[];
  /**
   * Value [en]
   *
   * - MaxLength: 255
   */
  value_en?: string;
  /**
   * Value [tr]
   *
   * - MaxLength: 255
   */
  value_tr?: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface ProjectTypeValue {
  /** - Format: uuid */
  id: string;
  value: string;
}

export interface PutCodesActivitiesIdQueryParams {
  search?: string;
}

export interface PutCodesResourcesIdQueryParams {
  search?: string;
}

export interface PutCodesWbsIdQueryParams {
  search?: string;
}

export interface PutProjectsProjectsSlugQueryParams {
  has_wbs?: boolean;
}

export interface PutWarehouseProductsIdQueryParams {
  /** Product status */
  status:
    | \\"CANCELLED\\"
    | \\"DAMAGED\\"
    | \\"EXPECTED\\"
    | \\"LOST\\"
    | \\"OVERDELIVERED\\"
    | \\"SOLD\\"
    | \\"STOCK\\"
    | \\"STOLEN\\"
    | \\"USED\\";
  /** Company Id */
  company?: string[];
  /** Order no */
  order_no__icontains?: string;
  /** Project Id */
  project?: string[];
  /** Supplier name */
  supplier__icontains?: string;
  /** Warehouse Id */
  warehouse?: string[];
}

export interface QuitReason {
  /**
   * Quit Reason Code
   *
   * - MaxLength: 50
   */
  code: string;
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  value: string;
}

export interface QuitReasonRequest {
  /**
   * Quit Reason Code
   *
   * - MaxLength: 50
   * - MinLength: 1
   */
  code: string;
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  value: string;
}

export interface QuitRecord {
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  value: string;
  /** If this is checked, the person will not be able to work in the company. */
  blacklist?: boolean;
}

export interface QuitRecordRequest {
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  value: string;
  /** If this is checked, the person will not be able to work in the company. */
  blacklist?: boolean;
}

export interface Rate {
  /** - Format: date */
  date: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,8}(?:.\\\\d{0,8})?$
   */
  rate_buy: string;
  rate_from: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,8}(?:.\\\\d{0,8})?$
   */
  rate_sell: string;
  rate_to: string;
}

export interface RateRequest {
  /** - MinLength: 1 */
  rate_from: string;
  /** - MinLength: 1 */
  rate_to: string;
}

/** Adds nested create feature */

export interface Request {
  approver: UserNameAvatar;
  attachments: Attachment[];
  company: CompanyNameCode;
  counter: string;
  /** - Format: date-time */
  created: string;
  created_by: string;
  /** - Format: uuid */
  id: string;
  is_approvable: boolean;
  is_editable: boolean;
  /** - Format: date-time */
  modified: string;
  modified_by: string;
  project: ProjectNameCodeCompaniesName;
  slug: string;
  status: State;
  type: RequestTypeValue;
  /**
   * Requested delivery date
   *
   * - Format: date
   */
  delivery_date?: string;
  items?: RequestItem[];
  /** Request notes */
  notes?: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface RequestItem {
  activity: ActivityNameCode;
  /** - Format: uuid */
  id: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  ordered_quantity: string;
  resource: ResourceNameCodeUnitsName;
  selected: boolean;
  unit: ResourceUnit;
  wbs: WBSNameCode;
  /**
   * Requested delivery date
   *
   * - Format: date
   */
  delivery_date?: string;
  description?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  quantity?: string;
  sort_order?: number;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface RequestItemRequest {
  /** - Format: uuid */
  activity: string;
  /** - Format: uuid */
  id: string;
  /** - Format: uuid */
  resource: string;
  /** - Format: uuid */
  unit: string;
  /** - Format: uuid */
  wbs: string;
  description?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  quantity?: string;
  sort_order?: number;
}

/** Adds nested create feature */

export interface RequestList {
  approver: UserNameAvatar;
  company: string;
  counter: string;
  /** - Format: date-time */
  created: string;
  created_by: string;
  /** - Format: uuid */
  id: string;
  /** - Format: date-time */
  modified: string;
  modified_by: string;
  project: string;
  slug: string;
  status: string;
  type: string;
  /**
   * Requested delivery date
   *
   * - Format: date
   */
  delivery_date?: string;
  /** Request notes */
  notes?: string;
}

/** Adds nested create feature */

export interface RequestRequest {
  /** - Format: uuid */
  company: string;
  /** - Format: uuid */
  id: string;
  /** - Format: uuid */
  project: string;
  /** - Format: uuid */
  type: string;
  /**
   * Requested delivery date
   *
   * - Format: date
   */
  delivery_date?: string;
  items?: RequestItemRequest[];
  /** Request notes */
  notes?: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface RequestType {
  /** - Format: uuid */
  id: string;
  value: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface RequestTypeValue {
  /** - Format: uuid */
  id: string;
  value: string;
}

/** Adds nested create feature */

export interface Resource {
  /** - MaxLength: 2 */
  code: string;
  /** - Format: date-time */
  created: string;
  depth: number;
  full_code: string;
  /** - Format: uuid */
  id: string;
  /** - Format: date-time */
  modified: string;
  name: string;
  parent_id: string;
  type: ResourceTypeEnum;
  units: ResourceUnit[];
  accounting_codes?: CodeAccountingCode[];
  /**
   * Name [en]
   *
   * - MaxLength: 255
   */
  name_en?: string;
  /**
   * Name [tr]
   *
   * - MaxLength: 255
   */
  name_tr?: string;
  /** - Max: 2147483647 */
  numchild?: number;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface ResourceList {
  /** - MaxLength: 2 */
  code: string;
  full_code: string;
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  name: string;
  numchild: number;
  units: ResourceUnit[];
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface ResourceNameCode {
  /** - MaxLength: 2 */
  code: string;
  full_code: string;
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  name: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface ResourceNameCodeName {
  /** - MaxLength: 2 */
  code: string;
  full_code: string;
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  name: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface ResourceNameCodeUnit {
  /** - MaxLength: 2 */
  code: string;
  full_code: string;
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  name: string;
  units: ResourceUnit[];
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface ResourceNameCodeUnits {
  /** - MaxLength: 2 */
  code: string;
  full_code: string;
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  name: string;
  units: ResourceUnit[];
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface ResourceNameCodeUnitsName {
  /** - MaxLength: 2 */
  code: string;
  full_code: string;
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  name: string;
  units: ResourceUnit[];
}

/** Adds nested create feature */

export interface ResourceRequest {
  /**
   * - MaxLength: 2
   * - MinLength: 1
   */
  code: string;
  type: ResourceTypeEnum;
  units: string[];
  accounting_codes?: PatchedCodeAccountingCodeRequest[];
  /**
   * Name [en]
   *
   * - MaxLength: 255
   */
  name_en?: string;
  /**
   * Name [tr]
   *
   * - MaxLength: 255
   */
  name_tr?: string;
  /** - Max: 2147483647 */
  numchild?: number;
}

/** - \`L\` - Labor \`M\` - Material */

export type ResourceTypeEnum = \\"L\\" | \\"M\\";

export interface ResourceUnit {
  /** - Format: uuid */
  id: string;
  value: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface Responsible {
  /** - Format: uuid */
  id: string;
  /** - Format: uuid */
  project: string;
  type: ResponsibleTypeParam;
  user: CustomUserDetails;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface ResponsibleRequest {
  /** - Format: uuid */
  project: string;
  /** - Format: uuid */
  type: string;
  user: CustomUserDetailsRequest;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface ResponsibleTypeParam {
  /** - Format: uuid */
  id: string;
  value: string;
  unique?: boolean;
  /**
   * Value [en]
   *
   * - MaxLength: 255
   */
  value_en?: string;
  /**
   * Value [tr]
   *
   * - MaxLength: 255
   */
  value_tr?: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface ResponsibleTypeParamRequest {
  unique?: boolean;
  /**
   * Value [en]
   *
   * - MaxLength: 255
   */
  value_en?: string;
  /**
   * Value [tr]
   *
   * - MaxLength: 255
   */
  value_tr?: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface ResponsibleUserType {
  /** - Format: uuid */
  id: string;
  type: ResponsibleTypeParam;
  user: CustomUserDetails;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface ResponsibleUserTypeRequest {
  /** - Format: uuid */
  type: string;
  user: CustomUserDetailsRequest;
}

export interface ResponsiblesList {
  user: UserFullNameAvatar;
}

export interface RevenueBond {
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount: string;
  company: CompanyName;
  content_type: string;
  counter: string;
  counter_party: SupplierName;
  /** - Format: date-time */
  created: string;
  created_by: string;
  currency: Currency;
  /** - Format: date */
  entry_date: string;
  /** - Format: uuid */
  id: string;
  /** - Format: date-time */
  modified: string;
  modified_by: string;
  /** - Format: date */
  payment_date: string;
  project: ProjectNameCodeCompany;
  slug: string;
  state: State99dEnum;
  title: string;
  url: string;
  bond_address?: string;
  /** - MaxLength: 255 */
  bond_no?: string;
  description?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,6}(?:.\\\\d{0,4})?$
   */
  exchange_rate_dc?: string;
  /** - MaxLength: 255 */
  warranter?: string;
}

export interface RevenueBondList {
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount: string;
  company: string;
  content_type: string;
  counter: string;
  counter_party: string;
  /** - Format: date-time */
  created: string;
  created_by: string;
  currency: string;
  /** - Format: date */
  entry_date: string;
  /** - Format: uuid */
  id: string;
  /** - Format: date-time */
  modified: string;
  modified_by: string;
  /** - Format: date */
  payment_date: string;
  project: string;
  slug: string;
  state: string;
  title: string;
  url: string;
  bond_address?: string;
  /** - MaxLength: 255 */
  bond_no?: string;
  description?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,6}(?:.\\\\d{0,4})?$
   */
  exchange_rate_dc?: string;
  /** - MaxLength: 255 */
  warranter?: string;
}

export interface RevenueBondRequest {
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount: string;
  /** - Format: uuid */
  company: string;
  /** - Format: uuid */
  counter_party: string;
  /** - Format: uuid */
  currency: string;
  /** - Format: date */
  entry_date: string;
  /** - Format: date */
  payment_date: string;
  /** - Format: uuid */
  project: string;
  bond_address?: string;
  /** - MaxLength: 255 */
  bond_no?: string;
  description?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,6}(?:.\\\\d{0,4})?$
   */
  exchange_rate_dc?: string;
  /** - MaxLength: 255 */
  warranter?: string;
}

export interface RevenueCheque {
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount: string;
  company: CompanyName;
  content_type: string;
  counter: string;
  counter_party: SupplierName;
  /** - Format: date-time */
  created: string;
  created_by: string;
  currency: Currency;
  /** - Format: date */
  entry_date: string;
  /** - Format: uuid */
  id: string;
  /** - Format: date-time */
  modified: string;
  modified_by: string;
  /** - Format: date */
  payment_date: string;
  project: ProjectNameCodeCompany;
  slug: string;
  state: State99dEnum;
  title: string;
  url: string;
  /** - MaxLength: 255 */
  bank_account_no?: string;
  bank_name?: BankName;
  /** - MaxLength: 255 */
  branch_name?: string;
  /** - MaxLength: 255 */
  cheque_no?: string;
  description?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,6}(?:.\\\\d{0,4})?$
   */
  exchange_rate_dc?: string;
  /** - MaxLength: 255 */
  iban?: string;
}

export interface RevenueChequeList {
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount: string;
  bank_name: string;
  company: string;
  content_type: string;
  counter: string;
  counter_party: string;
  /** - Format: date-time */
  created: string;
  created_by: string;
  currency: string;
  /** - Format: date */
  entry_date: string;
  /** - Format: uuid */
  id: string;
  /** - Format: date-time */
  modified: string;
  modified_by: string;
  /** - Format: date */
  payment_date: string;
  project: string;
  slug: string;
  state: string;
  title: string;
  url: string;
  /** - MaxLength: 255 */
  bank_account_no?: string;
  /** - MaxLength: 255 */
  branch_name?: string;
  /** - MaxLength: 255 */
  cheque_no?: string;
  description?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,6}(?:.\\\\d{0,4})?$
   */
  exchange_rate_dc?: string;
  /** - MaxLength: 255 */
  iban?: string;
}

export interface RevenueChequeRequest {
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount: string;
  /** - Format: uuid */
  company: string;
  /** - Format: uuid */
  counter_party: string;
  /** - Format: uuid */
  currency: string;
  /** - Format: date */
  entry_date: string;
  /** - Format: date */
  payment_date: string;
  /** - Format: uuid */
  project: string;
  /** - MaxLength: 255 */
  bank_account_no?: string;
  /** - Format: uuid */
  bank_name?: string;
  /** - MaxLength: 255 */
  branch_name?: string;
  /** - MaxLength: 255 */
  cheque_no?: string;
  description?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,6}(?:.\\\\d{0,4})?$
   */
  exchange_rate_dc?: string;
  /** - MaxLength: 255 */
  iban?: string;
}

export interface RevenueDetail {
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount: string;
  company: string;
  currency: string;
  /** - Format: uuid */
  id: string;
  paid_together: boolean;
  /** - Format: date-time */
  payment_date: string;
  payment_from: string;
  payment_method: string;
  payment_to: string;
  project: string;
  /** - Format: date-time */
  realized_at: string;
  realized_by: string;
  /** - MaxLength: 255 */
  description?: string;
  /** - MaxLength: 255 */
  txn_type?: string;
}

export interface RevenueDetailDelete {
  /** - MaxLength: 255 */
  delete_note: string;
}

export interface RevenueDetailDeleteRequest {
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  delete_note: string;
}

export interface RevenueDetailRealize {
  ids: string[];
}

export interface RevenueDetailRealizeRequest {
  ids: string[];
}

export interface RevenueDetailRequest {
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount: string;
  paid_together: boolean;
  /** - Format: date-time */
  payment_date: string;
  /** - Format: date-time */
  realized_at: string;
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  description?: string;
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  txn_type?: string;
}

/** Adds nested create feature */

export interface Review {
  /** - Format: date-time */
  created: string;
  /** - Format: uuid */
  id: string;
  /** - Format: date-time */
  modified: string;
  score: number;
  supplier_name: string;
  template: ReviewTemplate;
  answers?: Answer[];
  created_by?: number;
  /** - MaxLength: 255 */
  description?: string;
  modified_by?: number;
  /** - Pattern: ^[-a-zA-Z0-9_]+$ */
  slug?: string;
  supplier?: string;
}

/** Adds nested create feature */

export interface ReviewQuestion {
  /** - Format: uuid */
  id: string;
  value: string;
  /**
   * - Minimum: 1
   * - Max: 32767
   */
  maximum_score?: number;
  /**
   * - Minimum: -2147483648
   * - Max: 2147483647
   */
  sort_order?: number;
}

/** Adds nested create feature */

export interface ReviewQuestionRequest {
  /** - MinLength: 1 */
  value: string;
  /**
   * - Minimum: 1
   * - Max: 32767
   */
  maximum_score?: number;
  /**
   * - Minimum: -2147483648
   * - Max: 2147483647
   */
  sort_order?: number;
}

/** Adds nested create feature */

export interface ReviewRequest {
  /** - Format: uuid */
  template: string;
  answers?: PatchedAnswerRequest[];
  /** - MaxLength: 255 */
  description?: string;
  /** - MinLength: 1 */
  supplier?: string;
}

/** Adds nested create feature */

export interface ReviewTemplate {
  /** - Format: date-time */
  created: string;
  /** - Format: uuid */
  id: string;
  /** - Format: date-time */
  modified: string;
  /**
   * - Minimum: -2147483648
   * - Max: 2147483647
   */
  pass_mark: number;
  /** - MaxLength: 255 */
  review_type: string;
  created_by?: number;
  modified_by?: number;
  questions?: ReviewQuestion[];
  /** - Pattern: ^[-a-zA-Z0-9_]+$ */
  slug?: string;
}

export interface ReviewTemplateList {
  /** - Format: uuid */
  id: string;
  /**
   * - Minimum: -2147483648
   * - Max: 2147483647
   */
  pass_mark: number;
  /** - MaxLength: 255 */
  review_type: string;
  /** - Pattern: ^[-a-zA-Z0-9_]+$ */
  slug?: string;
}

/** Adds nested create feature */

export interface ReviewTemplateRequest {
  /**
   * - Minimum: -2147483648
   * - Max: 2147483647
   */
  pass_mark: number;
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  review_type: string;
  questions?: ReviewQuestionRequest[];
}

export interface ReviewsList {
  /** - Format: date-time */
  created: string;
  /** - Format: uuid */
  id: string;
  pass_mark: number;
  score: number;
  supplier: string;
  template: string;
  /** - MaxLength: 255 */
  description?: string;
  /** - Pattern: ^[-a-zA-Z0-9_]+$ */
  slug?: string;
}

/** Adds nested create feature */

export interface Revision {
  /** - Format: uuid */
  contract: string;
  /** - Format: uuid */
  id: string;
  items?: ContractItem[];
}

/** Adds nested create feature */

export interface RevisionCreate {
  /** - Format: uuid */
  id: string;
  current?: boolean;
  items?: ContractItem[];
}

/** Adds nested create feature */

export interface RevisionCreateRequest {
  current?: boolean;
  items?: ContractItemRequest[];
}

/** Adds nested create feature */

export interface RevisionRequest {
  /** - Format: uuid */
  contract: string;
  items?: ContractItemRequest[];
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface Salary {
  /** - Format: date-time */
  created: string;
  currency: Currency;
  /** - Format: uuid */
  id: string;
  /** - Format: date-time */
  modified: string;
  person: Person;
  /** - Format: date */
  salary_date: string;
  salary_type_display: string;
  is_active?: boolean;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,10}(?:.\\\\d{0,2})?$
   */
  salary?: string;
  salary_type?: SalaryTypeEnum;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface SalaryRequest {
  /** - Format: uuid */
  currency: string;
  /** - Format: uuid */
  person: string;
  /** - Format: date */
  salary_date: string;
  is_active?: boolean;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,10}(?:.\\\\d{0,2})?$
   */
  salary?: string;
  salary_type?: SalaryTypeEnum;
}

/** - \`hourly\` - Hourly \`monthly\` - Monthly */

export type SalaryTypeEnum = \\"hourly\\" | \\"monthly\\";

export interface Slip {
  /** - Format: date-time */
  date: string;
  /** - Format: uuid */
  id: string;
  source_url: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  total_credit_dc: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  total_debit_dc: string;
  /** Transaction count */
  txn_count: number;
}

export interface SlipRequest {
  /** - Format: date-time */
  date: string;
}

/** Adds nested create feature */

export interface SpecialInvoice {
  approver: UserNameAvatar;
  attachments: Attachment[];
  company: CompanyName;
  counter: string;
  /** - Format: date-time */
  created: string;
  created_by: string;
  currency: Currency;
  /** - Format: uuid */
  id: string;
  is_approvable: boolean;
  is_editable: boolean;
  /** - Format: date-time */
  modified: string;
  modified_by: string;
  planned_payments: SpecialInvoicePlannedPayment[];
  project: ProjectNameCodeCompany;
  realized_payments: SpecialInvoiceRealizedPayment[];
  slug: string;
  status: State;
  supplier: SupplierForm;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  total_deducted_advance: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  total_given_advance: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  total_vat: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  totals: string;
  type: SpecialInvoiceType;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  advance_deduction?: string;
  agreed_exchange_currency?: Currency;
  /**
   * Agreed currency rate
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,6}(?:.\\\\d{0,4})?$
   */
  agreed_exchange_rate?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  correction?: string;
  has_vat_witholding?: boolean;
  /** - Format: date */
  invoice_date?: string;
  /** - MaxLength: 255 */
  invoice_no?: string;
  items?: SpecialInvoiceItem[];
  prepaid_from?: AccountName;
  warehouse?: WarehouseName;
  /** - Format: date */
  waybill_date?: string;
  /** - MaxLength: 255 */
  waybill_no?: string;
}

/** Adds nested create feature */

export interface SpecialInvoiceItem {
  activity: ActivityNameCode;
  /** - Format: uuid */
  id: string;
  resource: ResourceNameCodeUnits;
  selected: boolean;
  unit: ResourceUnit;
  wbs: WBSNameCode;
  description?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  discount_amount?: string;
  discount_unit?: DiscountUnitChoices;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  quantity?: string;
  taxes?: Tax[];
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  unit_price?: string;
  /** - Max: 32767 */
  vat_ratio?: VatRatioChoices;
  vat_witholding?: Vatwitholding;
}

export interface SpecialInvoiceItemList {
  activity: string;
  activity_tree: any[];
  company: string;
  currency: string;
  /** - Format: double */
  exchange_rate_usd: number;
  exchange_rates: undefined;
  invoice_no: string;
  project: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  quantity: string;
  resource: string;
  resource_tree: any[];
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  total: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  total_vat: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  unit_price: string;
  vat_ratio: number;
  wbs: string;
  wbs_tree: any[];
  /** - Format: date */
  invoice_date?: string;
}

/** Adds nested create feature */

export interface SpecialInvoiceItemRequest {
  /** - Format: uuid */
  activity: string;
  /** - Format: uuid */
  id: string;
  /** - Format: uuid */
  resource: string;
  /** - Format: uuid */
  unit: string;
  /** - Format: uuid */
  wbs: string;
  description?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  discount_amount?: string;
  discount_unit?: DiscountUnitChoices;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  quantity?: string;
  taxes?: TaxRequest[];
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  unit_price?: string;
  /** - Max: 32767 */
  vat_ratio?: VatRatioChoices;
  /** - Format: uuid */
  vat_witholding?: string;
}

/** Adds nested create feature */

export interface SpecialInvoiceList {
  approver: UserNameAvatar;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  balance: string;
  company: string;
  counter: string;
  /** - Format: date-time */
  created: string;
  created_by: string;
  currency: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,11}(?:.\\\\d{0,8})?$
   */
  exchange_rate_usd: string;
  /** - Format: uuid */
  id: string;
  /** - Format: date-time */
  modified: string;
  modified_by: string;
  project: string;
  slug: string;
  status: string;
  /** Supplier name */
  supplier: string;
  url: string;
}

export interface SpecialInvoicePlannedPayment {
  /** - Format: uuid */
  id: string;
  /** - Format: date */
  payment_date: string;
  payment_method: PaymentMethod;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount?: string;
  condition?: string;
  has_condition?: boolean;
}

export interface SpecialInvoicePlannedPaymentRequest {
  /** - Format: date */
  payment_date: string;
  /** - Format: uuid */
  payment_method: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount?: string;
  condition?: string;
  has_condition?: boolean;
}

export interface SpecialInvoiceRealizedPayment {
  /** - Format: uuid */
  id: string;
  /** - Format: date-time */
  payment_date: string;
  payment_method: PaymentMethod;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount?: string;
}

export interface SpecialInvoiceRealizedPaymentRequest {
  /** - Format: date-time */
  payment_date: string;
  /** - Format: uuid */
  payment_method: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  amount?: string;
}

/** Adds nested create feature */

export interface SpecialInvoiceRequest {
  /** - Format: uuid */
  company: string;
  /** - Format: uuid */
  currency: string;
  /** - Format: uuid */
  id: string;
  planned_payments: SpecialInvoicePlannedPaymentRequest[];
  /** - Format: uuid */
  project: string;
  /** - Format: uuid */
  supplier: string;
  /** - Format: uuid */
  type: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  advance_deduction?: string;
  /** - Format: uuid */
  agreed_exchange_currency?: string;
  /**
   * Agreed currency rate
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,6}(?:.\\\\d{0,4})?$
   */
  agreed_exchange_rate?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,17}(?:.\\\\d{0,2})?$
   */
  correction?: string;
  has_vat_witholding?: boolean;
  /** - Format: date */
  invoice_date?: string;
  /** - MaxLength: 255 */
  invoice_no?: string;
  items?: SpecialInvoiceItemRequest[];
  /** - Format: uuid */
  prepaid_from?: string;
  /** - Format: uuid */
  warehouse?: string;
  /** - Format: date */
  waybill_date?: string;
  /** - MaxLength: 255 */
  waybill_no?: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface SpecialInvoiceType {
  /** - Format: uuid */
  id: string;
  /**
   * Include in stocks
   *
   * If this is a stockable item, it will be added to the inventory.
   */
  stockable: boolean;
  value: string;
  description?: string;
}

export interface State {
  id: string;
  /** - MaxLength: 50 */
  label: string;
}

/**
 * - \`UNDEFINED\` - Undefined \`PORTFOLIO\` - Portfolio \`CASHED\` - Cashed \`CANCEL\` -
 *   Cancelled
 */

export type State99dEnum = \\"UNDEFINED\\" | \\"PORTFOLIO\\" | \\"CASHED\\" | \\"CANCEL\\";

export interface StateRequest {
  /** - MinLength: 1 */
  id: string;
  /**
   * - MaxLength: 50
   * - MinLength: 1
   */
  label: string;
}

/** - \`ACTIVE\` - Active \`DEACTIVE\` - Deactive */

export type Status386Enum = \\"ACTIVE\\" | \\"DEACTIVE\\";

/** - \`subscribe\` - subscribe \`unsubscribe\` - unsubscribe */

export type StatusTypeEnum = \\"subscribe\\" | \\"unsubscribe\\";

export interface SubDepartment {
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  value: string;
}

export interface SubPosition {
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  value: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface Supplier {
  activity_type: ActivityType[];
  branch: Branch[];
  city: City;
  country: Country;
  /** - Format: date-time */
  created: string;
  district: District;
  /** - Format: uuid */
  id: string;
  /** - Format: date-time */
  modified: string;
  /**
   * Supplier name
   *
   * - MaxLength: 255
   */
  name: string;
  type: SupplierType;
  /**
   * Haritadan seçim yaparak, profilinizde konumunuzun görünmesini
   * sağlayabilirsiniz.
   *
   * - MaxLength: 255
   */
  address?: string;
  /**
   * Commercial ID No
   *
   * - MaxLength: 255
   */
  commercial_reg_id?: string;
  created_by?: number;
  /**
   * E-mail (1)
   *
   * - Format: email
   * - MaxLength: 255
   */
  email1?: string;
  /**
   * E-mail (2)
   *
   * - Format: email
   * - MaxLength: 255
   */
  email2?: string;
  /**
   * Fax (1)
   *
   * - MaxLength: 255
   */
  fax?: string;
  /**
   * Coordinates
   *
   * - MaxLength: 255
   * - Pattern: ^-?[0-9]+.[0-9]+,-?[0-9]+.[0-9]+$
   */
  geolocation?: string;
  /** - MaxLength: 255 */
  legal_name?: string;
  /**
   * - MaxLength: 16
   * - MinLength: 16
   */
  mersis_no?: string;
  modified_by?: number;
  /**
   * Phone No (1)
   *
   * - MaxLength: 255
   */
  phone1?: string;
  /**
   * Phone No (2)
   *
   * - MaxLength: 255
   */
  phone2?: string;
  /** - Pattern: ^[-a-zA-Z0-9_]+$ */
  slug?: string;
  /**
   * Tax/TC ID No
   *
   * - MaxLength: 20
   */
  tax_no?: string;
  /** - MaxLength: 255 */
  tax_office?: string;
  /**
   * Website
   *
   * - Format: uri
   * - MaxLength: 255
   */
  website_url?: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface SupplierAccount {
  currency: Currency;
  has_transactions: boolean;
  /** - Format: uuid */
  id: string;
  project: ProjectNameCompany;
  sub_type: SupplierAccountSubTypeEnum;
  supplier: SupplierName;
  type: string;
  /** - MaxLength: 20 */
  accounting_code?: string;
}

export interface SupplierAccountList {
  accounting_code: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_credit: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_credit_dc: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_debit: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_debit_dc: string;
  currency: string;
  /** - Format: uuid */
  id: string;
  name: string;
  project: string;
  sub_type: string;
  supplier: string;
  type: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface SupplierAccountRequest {
  /** - Format: uuid */
  currency: string;
  /** - Format: uuid */
  project: string;
  sub_type: SupplierAccountSubTypeEnum;
  /** - Format: uuid */
  supplier: string;
  /** - MaxLength: 20 */
  accounting_code?: string;
}

/**
 * - \`MAIN\` - Main \`ADVANCE\` - Advance \`RETENTION\` - Retention \`INSURANCE\` -
 *   Insurance \`TAX\` - Tax
 */

export type SupplierAccountSubTypeEnum =
  | \\"MAIN\\"
  | \\"ADVANCE\\"
  | \\"RETENTION\\"
  | \\"INSURANCE\\"
  | \\"TAX\\";

export interface SupplierAccountingCode {
  /**
   * Account code
   *
   * - MaxLength: 30
   */
  code: string;
  /** - Format: date-time */
  created: string;
  currency: Currency;
  /** - Format: uuid */
  id: string;
  /** - Format: date-time */
  modified: string;
  account_owner?: AccountOwnerEnum;
  created_by?: number;
  modified_by?: number;
  supplier?: string;
  type?: SupplierAccountingCodeTypeEnum;
}

export interface SupplierAccountingCodeRequest {
  /**
   * Account code
   *
   * - MaxLength: 30
   * - MinLength: 1
   */
  code: string;
  /** - Format: uuid */
  currency: string;
  account_owner?: AccountOwnerEnum;
  /** - MinLength: 1 */
  supplier?: string;
  type?: SupplierAccountingCodeTypeEnum;
}

/** - \`MAIN\` - main \`ADVANCE\` - advance \`GUARANTEE\` - guarantee */

export type SupplierAccountingCodeTypeEnum = \\"MAIN\\" | \\"ADVANCE\\" | \\"GUARANTEE\\";

export interface SupplierAutocomplete {
  sr: string;
}

export interface SupplierBankAccount {
  bank_name: BankName;
  /** - Format: date-time */
  created: string;
  currency: Currency;
  /** - Format: uuid */
  id: string;
  /** - Format: date-time */
  modified: string;
  created_by?: number;
  /** - MaxLength: 50 */
  iban?: string;
  modified_by?: number;
  supplier?: string;
  /** - MaxLength: 20 */
  swift_no?: string;
}

export interface SupplierBankAccountRequest {
  /** - Format: uuid */
  bank_name: string;
  /** - Format: uuid */
  currency: string;
  /** - MaxLength: 50 */
  iban?: string;
  /** - MinLength: 1 */
  supplier?: string;
  /** - MaxLength: 20 */
  swift_no?: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface SupplierForm {
  city: City;
  country: Country;
  district: District;
  /** - Format: uuid */
  id: string;
  /**
   * Supplier name
   *
   * - MaxLength: 255
   */
  name: string;
  /**
   * Haritadan seçim yaparak, profilinizde konumunuzun görünmesini
   * sağlayabilirsiniz.
   *
   * - MaxLength: 255
   */
  address?: string;
  /**
   * E-mail (1)
   *
   * - Format: email
   * - MaxLength: 255
   */
  email1?: string;
  /**
   * Phone No (1)
   *
   * - MaxLength: 255
   */
  phone1?: string;
  /** - Pattern: ^[-a-zA-Z0-9_]+$ */
  slug?: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface SupplierName {
  /** - Format: uuid */
  id: string;
  /**
   * Supplier name
   *
   * - MaxLength: 255
   */
  name: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface SupplierNameRequest {
  /**
   * Supplier name
   *
   * - MaxLength: 255
   * - MinLength: 1
   */
  name: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface SupplierRequest {
  activity_type: string[];
  branch: string[];
  /** - Format: uuid */
  city: string;
  /** - Format: uuid */
  country: string;
  /** - Format: uuid */
  district: string;
  /**
   * Supplier name
   *
   * - MaxLength: 255
   * - MinLength: 1
   */
  name: string;
  /** - Format: uuid */
  type: string;
  /**
   * Haritadan seçim yaparak, profilinizde konumunuzun görünmesini
   * sağlayabilirsiniz.
   *
   * - MaxLength: 255
   */
  address?: string;
  /**
   * Commercial ID No
   *
   * - MaxLength: 255
   */
  commercial_reg_id?: string;
  /**
   * E-mail (1)
   *
   * - Format: email
   * - MaxLength: 255
   */
  email1?: string;
  /**
   * E-mail (2)
   *
   * - Format: email
   * - MaxLength: 255
   */
  email2?: string;
  /**
   * Fax (1)
   *
   * - MaxLength: 255
   */
  fax?: string;
  /**
   * Coordinates
   *
   * - MaxLength: 255
   * - Pattern: ^-?[0-9]+.[0-9]+,-?[0-9]+.[0-9]+$
   */
  geolocation?: string;
  /** - MaxLength: 255 */
  legal_name?: string;
  /**
   * - MaxLength: 16
   * - MinLength: 16
   */
  mersis_no?: string;
  /**
   * Phone No (1)
   *
   * - MaxLength: 255
   */
  phone1?: string;
  /**
   * Phone No (2)
   *
   * - MaxLength: 255
   */
  phone2?: string;
  /**
   * Tax/TC ID No
   *
   * - MaxLength: 20
   */
  tax_no?: string;
  /** - MaxLength: 255 */
  tax_office?: string;
  /**
   * Website
   *
   * - Format: uri
   * - MaxLength: 255
   */
  website_url?: string;
}

export interface SupplierType {
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  value: string;
}

export interface SupplierTypeRequest {
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  value: string;
}

export interface Tax {
  /** - Format: uuid */
  id: string;
  type: TaxParameter;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount?: string;
  unit?: DiscountUnitChoices;
}

export interface TaxParameter {
  category: string;
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  value: string;
  /** Include Vat */
  add_to_vat?: boolean;
  /**
   * Tax Ratio
   *
   * - Max: 100
   */
  ratio?: number;
}

export interface TaxParameterRequest {
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  value: string;
  /** Include Vat */
  add_to_vat?: boolean;
  /**
   * Tax Ratio
   *
   * - Max: 100
   */
  ratio?: number;
}

export interface TaxRequest {
  /** - Format: uuid */
  type: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount?: string;
  unit?: DiscountUnitChoices;
}

export interface ToBePaid {
  /** - Format: uuid */
  id: string;
  object_type: number;
}

export interface ToBePaidRequest {
  /** - Format: uuid */
  id: string;
  object_type: number;
}

export interface Transaction {
  account: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount: string;
  company: string;
  /** - MaxLength: 255 */
  description: string;
  project: string;
  /** - Format: uuid */
  slip: string;
  /** - Format: date-time */
  txn_date: string;
  txn_type: string;
  /**
   * Exchange rate
   *
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  xrate: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount_dc?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_credit?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_credit_dc?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_debit?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_debit_dc?: string;
  direction?: TransactionDirectionEnum;
}

export interface TransactionCreate {
  /** - Format: uuid */
  id: string;
  new_status: WarehouseTransactionStatus;
  old_status: WarehouseTransactionStatus;
  /** - Format: uuid */
  product: string;
  /** - Format: date-time */
  txn_date: string;
  new_company?: CompanyName;
  new_project?: ProjectName;
  new_warehouse?: WarehouseName;
  old_company?: CompanyName;
  old_project?: ProjectName;
  old_warehouse?: WarehouseName;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  quantity?: string;
}

export interface TransactionCreateRequest {
  new_status: WarehouseTransactionStatus;
  old_status: WarehouseTransactionStatus;
  /** - Format: uuid */
  product: string;
  /** - Format: date-time */
  txn_date: string;
  /** - Format: uuid */
  new_company?: string;
  /** - Format: uuid */
  new_project?: string;
  /** - Format: uuid */
  new_warehouse?: string;
  /** - Format: uuid */
  old_company?: string;
  /** - Format: uuid */
  old_project?: string;
  /** - Format: uuid */
  old_warehouse?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  quantity?: string;
}

/** - \`D\` - Debit \`C\` - Credit */

export type TransactionDirectionEnum = \\"D\\" | \\"C\\";

export interface TransactionList {
  /** - Format: uuid */
  id: string;
  status: WarehouseTransactionStatus;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  quantity?: string;
  /**
   * Transaction date
   *
   * - Format: date-time
   */
  txn_date?: string;
}

export interface TransactionListCreate {
  transactions: TransactionCreate[];
}

export interface TransactionListCreateRequest {
  transactions: TransactionCreateRequest[];
}

export interface TransactionRequest {
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount: string;
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  description: string;
  /** - Format: uuid */
  slip: string;
  /** - Format: date-time */
  txn_date: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  amount_dc?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_credit?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_credit_dc?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_debit?: string;
  /**
   * - Format: decimal
   * - Pattern: ^-?\\\\d{0,15}(?:.\\\\d{0,4})?$
   */
  balance_debit_dc?: string;
  direction?: TransactionDirectionEnum;
}

export interface TransactionType {
  id: string;
  value: string;
}

export interface Transition {
  approver: UserProfile;
  approver_type: string;
  delegate: UserProfile;
  destination_state: string;
  direction: string;
  notes: string;
  source_state: string;
  /** - Format: uuid */
  transition: string;
}

export interface UnCancellableRequest {
  ids: any[];
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface UserFullName {
  full_name: string;
  id: number;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface UserFullNameAvatar {
  /** - Format: uri */
  avatar: string;
  full_name: string;
  id: number;
}

export interface UserGroup {
  /** - Format: uri */
  avatar: string;
  full_name: string;
  groups: Group[];
  id: number;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface UserNameAvatar {
  /** - Format: uri */
  avatar: string;
  full_name: string;
  id: number;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface UserNameAvatarRequest {
  /** - Format: binary */
  avatar: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface UserProfile {
  /** - Format: uri */
  avatar: string;
  full_name: string;
  id: number;
  phone_number: string;
  title: string;
  /**
   * Email address
   *
   * - Format: email
   * - MaxLength: 254
   */
  email?: string;
}

export interface ValidateOfferComparisonApiKeyRequestRequest {
  /** - MinLength: 1 */
  etedarik_api_key: string;
}

export interface ValidateOfferComparisonApiKeyResponse {
  detail: string;
}

/** - \`0\` - 0% \`1\` - 1% \`8\` - 8% \`10\` - 10% \`18\` - 18% \`20\` - 20% */

export type VatRatioChoices = 0 | 1 | 8 | 10 | 18 | 20;

export interface Vatwitholding {
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  value: string;
  /**
   * Vat witholding Ratio
   *
   * - Max: 100
   */
  ratio?: number;
}

export interface VatwitholdingRequest {
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  value: string;
  /**
   * Vat witholding Ratio
   *
   * - Max: 100
   */
  ratio?: number;
}

export interface WBS {
  /** - MaxLength: 2 */
  code: string;
  /** - Format: date-time */
  created: string;
  depth: number;
  full_code: string;
  /** - Format: uuid */
  id: string;
  /** - Format: date-time */
  modified: string;
  name: string;
  parent_id: string;
  /** - Format: uuid */
  project: string;
  /**
   * Name [en]
   *
   * - MaxLength: 255
   */
  name_en?: string;
  /**
   * Name [tr]
   *
   * - MaxLength: 255
   */
  name_tr?: string;
  /** - Max: 2147483647 */
  numchild?: number;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface WBSList {
  /** - MaxLength: 2 */
  code: string;
  full_code: string;
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  name: string;
  numchild: number;
  /** - Format: uuid */
  project: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface WBSNameCode {
  /** - MaxLength: 2 */
  code: string;
  full_code: string;
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  name: string;
}

export interface WBSRequest {
  /**
   * - MaxLength: 2
   * - MinLength: 1
   */
  code: string;
  /** - Format: uuid */
  project: string;
  /**
   * Name [en]
   *
   * - MaxLength: 255
   */
  name_en?: string;
  /**
   * Name [tr]
   *
   * - MaxLength: 255
   */
  name_tr?: string;
  /** - Max: 2147483647 */
  numchild?: number;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface Warehouse {
  city: City;
  country: Country;
  district: District;
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  name: string;
  responsibles: UserNameAvatar[];
  /**
   * Haritadan seçim yaparak, profilinizde konumunuzun görünmesini
   * sağlayabilirsiniz.
   *
   * - MaxLength: 255
   */
  address?: string;
  /**
   * E-mail (1)
   *
   * - Format: email
   * - MaxLength: 255
   */
  email1?: string;
  /**
   * Phone No (1)
   *
   * - MaxLength: 255
   */
  phone1?: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface WarehouseName {
  /** - Format: uuid */
  id: string;
  /** - MaxLength: 255 */
  name: string;
}

/**
 * A ModelSerializer that takes an additional \`fields\` argument that controls
 * which fields should be displayed.
 */

export interface WarehouseRequest {
  /**
   * - MaxLength: 255
   * - MinLength: 1
   */
  name: string;
  responsibles: UserNameAvatarRequest[];
  /**
   * Haritadan seçim yaparak, profilinizde konumunuzun görünmesini
   * sağlayabilirsiniz.
   *
   * - MaxLength: 255
   */
  address?: string;
  /**
   * E-mail (1)
   *
   * - Format: email
   * - MaxLength: 255
   */
  email1?: string;
  /**
   * Phone No (1)
   *
   * - MaxLength: 255
   */
  phone1?: string;
}

/**
 * - \`EXPECTED\` - expected \`OVERDELIVERED\` - overdelivered \`STOCK\` - Stock \`USED\`
 *   - Used \`DAMAGED\` - Damaged \`LOST\` - Lost \`STOLEN\` - Stolen \`SOLD\` - Sold
 *   \`CANCELLED\` - Cancelled
 */

export type WarehouseTransactionStatus =
  | \\"EXPECTED\\"
  | \\"OVERDELIVERED\\"
  | \\"STOCK\\"
  | \\"USED\\"
  | \\"DAMAGED\\"
  | \\"LOST\\"
  | \\"STOLEN\\"
  | \\"SOLD\\"
  | \\"CANCELLED\\";
",
}
`;

// Please add your custom config
import Axios, {
  AxiosRequestConfig,
  AxiosError,
  AxiosResponse,
  AxiosInstance,
} from "axios";
import qs from "qs";

const baseConfig: AxiosRequestConfig = {
  baseURL: "",
  headers: {
    "Content-Encoding": "UTF-8",
    Accept: "application/json",
    "Content-Type": "application/json-patch+json",
  },
  paramsSerializer: (param) => qs.stringify(param, { indices: false }),
};

let axiosInstance: AxiosInstance;

function getAxiosInstance(): AxiosInstance {
  if (!axiosInstance) {
    axiosInstance = Axios.create(baseConfig);
    axiosInstance.interceptors.request.use(
      async (requestConfig) => {
        /* Example on how to add authorization to specific paths
        if (requestConfig.url?.includes("/")) {
          requestConfig.headers.authorization = "";
        }
        */
        return requestConfig;
      },
      (error) => {
        Promise.reject(error);
      },
    );

    axiosInstance.interceptors.response.use(
      async (response: AxiosResponse) => {
        return response;
        /* Example on response manipulation
        const swaggerResponse: SwaggerResponse = {
          ...response
        };        
        return swaggerResponse;
        */
      },
      (error: AxiosError) => {
        if (error.response) {
          Promise.reject(new SwaggerError({
            message: error.response.data,
            status: error.response.status,
            response: error.response,
          }));
        }
      
        if (error.isAxiosError) {
          Promise.reject(new SwaggerError({
            message: "noInternetConnection",
          }));
        }
        Promise.reject(error);
      },
    );
  }

  return axiosInstance;
}

interface ErrorParam {
  message: string;
  status?: number;
  response?: AxiosResponse;
}

class SwaggerError extends Error {
  message: string;
  status?: number;
  response?: AxiosResponse;

  constructor({ message, status, response }: ErrorParam) {
    super();
    this.message = message;
    this.status = status;
    this.response = response;
  }

  isApiException = true;
}

export interface SwaggerResponse<R> extends AxiosResponse<R> {}

export {
  getAxiosInstance,
};

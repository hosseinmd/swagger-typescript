// Please add your custom config
import Axios, {
  AxiosRequestConfig,
  AxiosError,
  AxiosResponse,
  AxiosInstance,
} from "axios";

async function getBaseConfig(): Promise<AxiosRequestConfig> {
  return {
    baseURL: "",
    headers: {
      "Content-Encoding": "UTF-8",
      Accept: "application/json",
      "Content-Type": "application/json-patch+json",
    },
  };
}

let axiosInstance: AxiosInstance;

function getAxiosInstance(): AxiosInstance {
  if (!axiosInstance) {
    axiosInstance = Axios.create();
    axiosInstance.interceptors.request.use(
      async (request) => {
        if (request.url?.includes("/")) {
          request.headers.authorization = ""; // Add authorization header conditionaly.
        }
        return request;
      },
      (error) => {
        Promise.reject(error);
      },
    );

    axiosInstance.interceptors.response.use(
      async (response) => {
        return response;
      },
      (error) => {
        Promise.reject(error);
      },
    );
  }

  return axiosInstance;
}

function errorCatch(error: AxiosError): any {
  if (error.response) {
    throw new Exception({
      message: error.response.data,
      status: error.response.status,
      response: error.response,
    });
  }

  if (error.isAxiosError) {
    throw new Exception({
      message: "noInternetConnection",
    });
  }

  throw error;
}

interface ErrorParam {
  message: string;
  status?: number;
  response?: AxiosResponse;
}

class Exception extends Error {
  message: string;
  status?: number;
  response?: AxiosResponse;

  constructor({ message, status, response }: ErrorParam) {
    super();
    this.message = message;
    this.status = status;
    this.response = response;
  }

  isApiException = true;
}

// export type SwaggerResponse<R> = R;

export interface SwaggerResponse<R> extends AxiosResponse<R> {}

async function responseWrapper(
  response: AxiosResponse<any>,
): Promise<SwaggerResponse<any>> {
  return response;
}

export {
  getBaseConfig,
  errorCatch,
  Exception,
  responseWrapper,
  getAxiosInstance,
};
